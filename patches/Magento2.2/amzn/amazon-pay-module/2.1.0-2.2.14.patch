--- /dev/null
+++ b/Controller/Payment/CompleteCheckout.php
@@ -0,0 +1,111 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Controller\Payment;
+
+use Amazon\Core\Exception\AmazonWebapiException;
+use Magento\Framework\App\Action\Action;
+use Magento\Framework\App\Action\Context;
+use Magento\Quote\Api\CartManagementInterface;
+use Magento\Quote\Api\GuestCartManagementInterface;
+use Magento\Checkout\Model\Session as CheckoutSession;
+use Magento\Customer\Model\Session;
+use Magento\Framework\View\Result\PageFactory;
+use \Magento\Framework\Message\ManagerInterface as MessageManager;
+
+/**
+ * Class CompleteCheckout
+ *
+ * @package Amazon\Payment\Controller\Payment
+ */
+class CompleteCheckout extends Action
+{
+
+    /**
+     * @var CheckoutSession
+     */
+    private $checkoutSession;
+
+    /**
+     * @var CartManagementInterface
+     */
+    private $cartManagement;
+
+    /**
+     * @var PageFactory
+     */
+    private $pageFactory;
+
+    /**
+     * CompleteCheckout constructor.
+     *
+     * @param Context $context
+     * @param CartManagementInterface $cartManagement
+     * @param GuestCartManagementInterface $guestCartManagement
+     * @param CheckoutSession $checkoutSession
+     * @param Session $session
+     * @param PageFactory $pageFactory
+     */
+    public function __construct(
+        Context $context,
+        CartManagementInterface $cartManagement,
+        GuestCartManagementInterface $guestCartManagement,
+        CheckoutSession $checkoutSession,
+        Session $session,
+        PageFactory $pageFactory,
+        MessageManager $messageManager
+    ) {
+        parent::__construct($context);
+        $this->cartManagement = $cartManagement;
+        $this->checkoutSession = $checkoutSession;
+        $this->session = $session;
+        $this->pageFactory = $pageFactory;
+        $this->messageManager = $messageManager;
+    }
+
+    /*
+     * @inheritdoc
+     */
+    public function execute()
+    {
+        $authenticationStatus = $this->getRequest()->getParam('AuthenticationStatus');
+        switch ($authenticationStatus) {
+            case 'Success':
+                try {
+                    if (!$this->session->isLoggedIn()) {
+                        $this->checkoutSession->getQuote()->setCheckoutMethod(CartManagementInterface::METHOD_GUEST);
+                    }
+                    $this->cartManagement->placeOrder($this->checkoutSession->getQuoteId());
+                    return $this->_redirect('checkout/onepage/success');
+                } catch (AmazonWebapiException $e) {
+                    $this->messageManager->addErrorMessage($e->getMessage());
+                }
+                break;
+            case 'Failure':
+                $this->messageManager->addErrorMessage(__(
+                    'Amazon Pay was unable to authenticate the payment instrument.  '
+                    . 'Please try again, or use a different payment method.'
+                ));
+                break;
+            case 'Abandoned':
+            default:
+                $this->messageManager->addErrorMessage(__(
+                    'The SCA challenge was not completed successfully.  '
+                    . 'Please try again, or use a different payment method.'
+                ));
+        }
+        return $this->_redirect('checkout/cart');
+    }
+}

--- a/Domain/Validator/AmazonAuthorization.php
+++ b/Domain/Validator/AmazonAuthorization.php
@@ -21,7 +21,7 @@ use Amazon\Payment\Domain\Details\AmazonAuthorizationDetails;
 
 /**
  * Class AmazonAuthorization
- * @package Amazon\Payment\Domain\Validator
+ * validates Amazon Pay status during cron updates.
  */
 class AmazonAuthorization
 {

--- a/Gateway/Command/AmazonAuthCommand.php
+++ b/Gateway/Command/AmazonAuthCommand.php
@@ -24,7 +24,6 @@ use Amazon\Payment\Gateway\Config\Config;
  * Class AmazonAuthCommand
  *
  * Enables customized error handling for Amazon Payment
- * @api
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  */
 class AmazonAuthCommand implements CommandInterface
@@ -185,10 +184,6 @@ class AmazonAuthCommand implements CommandInterface
             }
         }
 
-        if ($isDecline) {
-            $messages[] = __("You will be redirected to the cart shortly.");
-        }
-
         if ($isTimeout) {
             return true;
         }

--- a/Gateway/Command/CaptureStrategyCommand.php
+++ b/Gateway/Command/CaptureStrategyCommand.php
@@ -115,7 +115,7 @@ class CaptureStrategyCommand implements CommandInterface
         }
 
         // capture on settlement/invoice
-        if (!$isCaptured && $this->isAuthorized($payment)) {
+        if (!$isCaptured && $payment->getAuthorizationTransaction()) {
             return self::CAPTURE;
         }
 
@@ -127,32 +127,6 @@ class CaptureStrategyCommand implements CommandInterface
         return self::AUTHORIZE_CAPTURE;
     }
 
-    /**
-     * Check if auth transaction exists
-     *
-     * @param  OrderPaymentInterface $payment
-     * @return boolean
-     */
-    private function isAuthorized(OrderPaymentInterface $payment) 
-    {
-        $filters = [];
-        $this->filterBuilder->setField('transaction_id')
-            ->setValue($payment->getLastTransId())
-            ->create();
-
-        $this->filterBuilder->setField('txn_type')
-            ->setValue(TransactionInterface::TYPE_AUTH)
-            ->create();
-
-        $searchCriteria = $this->searchCriteriaBuilder->addFilters($filters)
-            ->create();
-
-        $count = $this->transactionRepository->getList($searchCriteria)->getTotalCount();
-
-        return (boolean) $count;
-
-    }
-
     /**
      * Check if capture transaction already exists
      *

--- a/Gateway/Helper/SubjectReader.php
+++ b/Gateway/Helper/SubjectReader.php
@@ -25,10 +25,7 @@ use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
 
 /**
  * Class SubjectReader
- *
  * Consolidates commonly used calls
- *
- * @package Amazon\Payment\Gateway\Helper
  */
 class SubjectReader
 {
@@ -51,8 +48,9 @@ class SubjectReader
     /**
      * SubjectReader constructor.
      *
-     * @param Session                   $checkoutSession
+     * @param Session $checkoutSession
      * @param QuoteLinkInterfaceFactory $quoteLinkInterfaceFactory
+     * @param Data $coreHelper
      */
     public function __construct(
         Session $checkoutSession,
@@ -64,7 +62,6 @@ class SubjectReader
         $this->coreHelper = $coreHelper;
     }
 
-
     /**
      * Reads payment from subject
      *
@@ -76,7 +73,6 @@ class SubjectReader
         return Helper\SubjectReader::readPayment($subject);
     }
 
-
     /**
      * Reads amount from subject
      *
@@ -144,5 +140,4 @@ class SubjectReader
     {
         return $this->checkoutSession->getLastRealOrder();
     }
-
 }

--- a/Gateway/Http/Client/AbstractClient.php
+++ b/Gateway/Http/Client/AbstractClient.php
@@ -26,12 +26,10 @@ use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
 
 /**
  * Class AbstractClient
- *
- * @package Amazon\Payment\Gateway\Http\Client
+ * Base class for gateway client classes
  */
 abstract class AbstractClient implements ClientInterface
 {
-
     /**
      * @var SubjectReader
      */
@@ -47,7 +45,6 @@ abstract class AbstractClient implements ClientInterface
      */
     protected $clientFactory;
 
-
     /**
      * @var Data
      */
@@ -58,7 +55,14 @@ abstract class AbstractClient implements ClientInterface
      */
     protected $adapter;
 
-
+    /**
+     * AbstractClient constructor.
+     * @param Logger $logger
+     * @param ClientFactoryInterface $clientFactory
+     * @param SubjectReader $subjectReader
+     * @param Data $coreHelper
+     * @param AmazonPaymentAdapter $adapter
+     */
     public function __construct(
         Logger $logger,
         ClientFactoryInterface $clientFactory,
@@ -91,19 +95,14 @@ abstract class AbstractClient implements ClientInterface
         try {
             $response = $this->process($data);
         } catch (\Exception $e) {
-            $message = __($e->getMessage() ?: "Something went wrong during Gateway request.");
+            $message = $e->getMessage() ? $e->getMessage() : "Something went wrong during Gateway request.";
             $log['error'] = $message;
             $this->logger->debug($log);
-        } finally {
-            $log['response'] = (array) $response;
-            $this->logger->debug($log);
         }
 
         return $response;
     }
 
-
-
     /**
      * Process http request
      *

--- a/Gateway/Http/Client/AuthorizeClient.php
+++ b/Gateway/Http/Client/AuthorizeClient.php
@@ -19,8 +19,7 @@ namespace Amazon\Payment\Gateway\Http\Client;
 
 /**
  * Class Client
- *
- * @package Amazon\Payment\Gateway\Http\Client
+ * Amazon Pay authorization gateway client
  */
 class AuthorizeClient extends AbstractClient
 {
@@ -39,5 +38,4 @@ class AuthorizeClient extends AbstractClient
 
         return $response;
     }
-
 }

--- a/Gateway/Http/Client/CaptureClient.php
+++ b/Gateway/Http/Client/CaptureClient.php
@@ -19,8 +19,7 @@ namespace Amazon\Payment\Gateway\Http\Client;
 
 /**
  * Class Client
- *
- * @package Amazon\Payment\Gateway\Http\Client
+ * Amazon Pay gateway capture client
  */
 class CaptureClient extends AbstractClient
 {

--- a/Gateway/Http/Client/RefundClient.php
+++ b/Gateway/Http/Client/RefundClient.php
@@ -24,8 +24,7 @@ use Amazon\Payment\Domain\AmazonRefundResponseFactory;
 
 /**
  * Class RefundClient
- *
- * @package Amazon\Payment\Gateway\Http\Client
+ * Amazon Pay refund client
  */
 class RefundClient implements ClientInterface
 {
@@ -42,7 +41,6 @@ class RefundClient implements ClientInterface
      */
     private $logger;
 
-
     /**
      * @var AmazonRefundResponseFactory
      */
@@ -128,5 +126,4 @@ class RefundClient implements ClientInterface
         // Gateway expects response to be in form of array
         return $response;
     }
-
 }

--- a/Gateway/Http/Client/SettlementClient.php
+++ b/Gateway/Http/Client/SettlementClient.php
@@ -20,8 +20,7 @@ use Amazon\Core\Exception\AmazonServiceUnavailableException;
 
 /**
  * Class SettlementClient
- *
- * @package Amazon\Payment\Gateway\Http\Client
+ * Amazon Pay capture client
  */
 class SettlementClient extends AbstractClient
 {
@@ -59,9 +58,4 @@ class SettlementClient extends AbstractClient
 
         return $response;
     }
-
-
-
-
-
 }

--- a/Gateway/Http/Client/VoidClient.php
+++ b/Gateway/Http/Client/VoidClient.php
@@ -19,8 +19,7 @@ namespace Amazon\Payment\Gateway\Http\Client;
 
 /**
  * Class VoidClient
- *
- * @package Amazon\Payment\Gateway\Http\Client
+ * Amazon Pay client for gateway cancel and void
  */
 class VoidClient extends AbstractClient
 {

--- a/Gateway/Request/AuthorizationRequest.php
+++ b/Gateway/Request/AuthorizationRequestBuilder.php
@@ -26,7 +26,7 @@ use Magento\Framework\DataObject;
 use Amazon\Payment\Plugin\AdditionalInformation;
 use Amazon\Core\Helper\CategoryExclusion;
 
-class AuthorizationRequest implements BuilderInterface
+class AuthorizationRequestBuilder implements BuilderInterface
 {
     /**
      * @var ConfigInterface
@@ -59,7 +59,7 @@ class AuthorizationRequest implements BuilderInterface
     private $categoryExclusion;
 
     /**
-     * AuthorizationRequest constructor.
+     * AuthorizationRequestBuilder constructor.
      *
      * @param ConfigInterface $config
      * @param ProductMetadata $productMetadata

--- a/Gateway/Request/CaptureRequest.php
+++ b/Gateway/Request/CaptureRequestBuilder.php
@@ -24,7 +24,7 @@ use Amazon\Core\Helper\Data;
 use Magento\Framework\Exception\LocalizedException;
 use Magento\Payment\Model\Method\Logger;
 
-class CaptureRequest implements BuilderInterface
+class CaptureRequestBuilder implements BuilderInterface
 {
     /**
      * @var Config
@@ -52,7 +52,7 @@ class CaptureRequest implements BuilderInterface
     private $coreHelper;
 
     /**
-     * CaptureRequest constructor.
+     * CaptureRequestBuilder constructor.
      *
      * @param Config          $config
      * @param ProductMetadata $productMetadata
@@ -144,9 +144,4 @@ class CaptureRequest implements BuilderInterface
 
         return $data;
     }
-
-
-
-
 }
-

--- a/Gateway/Request/RefundRequest.php
+++ b/Gateway/Request/RefundRequestBuilder.php
@@ -23,11 +23,10 @@ use Amazon\Core\Helper\Data;
 use Magento\Sales\Api\OrderRepositoryInterface;
 
 /**
- * Class RefundRequest
- *
- * @package Amazon\Payment\Gateway\Request
+ * Class RefundRequestBuilder
+ * Builds refund request for Amazon Pay
  */
-class RefundRequest implements BuilderInterface
+class RefundRequestBuilder implements BuilderInterface
 {
 
     /**
@@ -51,7 +50,7 @@ class RefundRequest implements BuilderInterface
     private $orderRepository;
 
     /**
-     * RefundRequest constructor.
+     * RefundRequestBuilder constructor.
      *
      * @param ProductMetadata          $productMetadata
      * @param SubjectReader            $subjectReader

--- a/Gateway/Request/SettlementRequest.php
+++ b/Gateway/Request/SettlementRequestBuilder.php
@@ -24,7 +24,7 @@ use Magento\Payment\Model\Method\Logger;
 use Magento\Sales\Api\OrderRepositoryInterface;
 use Magento\Quote\Api\CartRepositoryInterface;
 
-class SettlementRequest implements BuilderInterface
+class SettlementRequestBuilder implements BuilderInterface
 {
     /**
      * @var Config
@@ -62,7 +62,7 @@ class SettlementRequest implements BuilderInterface
     private $quoteRepository;
 
     /**
-     * SettlementRequest constructor.
+     * SettlementRequestBuilder constructor.
      *
      * @param Config                   $config
      * @param ProductMetadata          $productMetadata
@@ -131,4 +131,3 @@ class SettlementRequest implements BuilderInterface
     }
 
 }
-

--- a/Gateway/Request/VoidRequest.php
+++ b/Gateway/Request/VoidRequestBuilder.php
@@ -22,7 +22,7 @@ use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
 use Magento\Sales\Api\OrderRepositoryInterface;
 
-class VoidRequest implements BuilderInterface
+class VoidRequestBuilder implements BuilderInterface
 {
 
     /**
@@ -46,7 +46,7 @@ class VoidRequest implements BuilderInterface
     private $orderRepository;
 
     /**
-     * VoidRequest constructor.
+     * VoidRequestBuilder constructor.
      *
      * @param ProductMetadata          $productMetadata
      * @param SubjectReader            $subjectReader

--- a/Gateway/Response/RefundHandler.php
+++ b/Gateway/Response/RefundHandler.php
@@ -25,8 +25,7 @@ use Amazon\Payment\Api\Data\PendingRefundInterfaceFactory;
 
 /**
  * Class RefundHandler
- *
- * @package Amazon\Payment\Gateway\Response
+ * Handles refund behavior for Amazon Pay
  */
 class RefundHandler implements HandlerInterface
 {
@@ -56,7 +55,6 @@ class RefundHandler implements HandlerInterface
      */
     private $pendingRefundFactory;
 
-
     /**
      * RefundHandler constructor.
      *
@@ -109,5 +107,4 @@ class RefundHandler implements HandlerInterface
             $this->messageManager->addSuccessMessage(__('Amazon Pay refund successful.'));
         }
     }
-
 }

--- a/Gateway/Validator/AuthorizationValidator.php
+++ b/Gateway/Validator/AuthorizationValidator.php
@@ -22,8 +22,7 @@ use Amazon\Payment\Domain\AmazonConstraint;
 
 /**
  * Class AuthorizationValidator
- *
- * @package Amazon\Payment\Gateway\Validator
+ * Validates authorization calls during gateway payment
  */
 class AuthorizationValidator extends AbstractValidator
 {

--- a/Gateway/Validator/CurrencyValidator.php
+++ b/Gateway/Validator/CurrencyValidator.php
@@ -23,8 +23,7 @@ use Amazon\Core\Helper\Data;
 
 /**
  * Class CurrencyValidator
- *
- * @package Amazon\Payment\Gateway\Validator
+ * Validates allowable currencies for Amazon Pay
  */
 class CurrencyValidator extends AbstractValidator
 {
@@ -56,7 +55,6 @@ class CurrencyValidator extends AbstractValidator
         parent::__construct($resultFactory);
     }
 
-
     /**
      * @param array $validationSubject
      * @return \Magento\Payment\Gateway\Validator\ResultInterface

--- a/Helper/Address.php
+++ b/Helper/Address.php
@@ -21,6 +21,7 @@ use Magento\Customer\Api\Data\AddressInterface;
 use Magento\Customer\Api\Data\AddressInterfaceFactory;
 use Magento\Customer\Api\Data\RegionInterfaceFactory;
 use Magento\Directory\Model\RegionFactory;
+use Magento\Framework\App\Config\ScopeConfigInterface;
 
 class Address
 {
@@ -39,14 +40,21 @@ class Address
      */
     private $regionDataFactory;
 
+    /**
+     * @var ScopeConfigInterface
+     */
+    private $scopeConfig;
+
     public function __construct(
         AddressInterfaceFactory $addressFactory,
         RegionFactory $regionFactory,
-        RegionInterfaceFactory $regionDataFactory
+        RegionInterfaceFactory $regionDataFactory,
+        ScopeConfigInterface $config
     ) {
         $this->addressFactory    = $addressFactory;
         $this->regionFactory     = $regionFactory;
         $this->regionDataFactory = $regionDataFactory;
+        $this->scopeConfig = $config;
     }
 
     /**
@@ -58,15 +66,35 @@ class Address
      */
     public function convertToMagentoEntity(AmazonAddressInterface $amazonAddress)
     {
+        $addressLinesAllowed = (int)$this->scopeConfig->getValue(
+            'customer/address/street_lines',
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
+        );
+
         $address = $this->addressFactory->create();
         $address->setFirstname($amazonAddress->getFirstName());
         $address->setLastname($amazonAddress->getLastName());
         $address->setCity($amazonAddress->getCity());
-        $address->setStreet(array_values($amazonAddress->getLines()));
         $address->setPostcode($amazonAddress->getPostCode());
         $address->setTelephone($amazonAddress->getTelephone());
         $address->setCountryId($this->getCountryId($amazonAddress));
 
+        /*
+         * The number of lines in a street address is configurable via 'customer/address/street_lines'.
+         * To avoid discarding information, we'll concatenate additional lines so that they fit within the configured
+         *  address length.
+         */
+        $lines = [];
+        for ($i = 1; $i <= 4; $i++) {
+            $line = (string) $amazonAddress->getLine($i);
+            if ($i <= $addressLinesAllowed) {
+                $lines[] = $line;
+            } else {
+                $lines[count($lines)-1] = trim($lines[count($lines)-1] . ' ' . $line);
+            }
+        }
+        $address->setStreet(array_values($lines));
+
         $company = !empty($amazonAddress->getCompany()) ? $amazonAddress->getCompany() : '';
         $address->setCompany($company);
 

--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,202 @@
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "{}"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright {yyyy} {name of copyright owner}
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+

--- a/Model/Adapter/AmazonPaymentAdapter.php
+++ b/Model/Adapter/AmazonPaymentAdapter.php
@@ -25,6 +25,8 @@ use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
 use Amazon\Payment\Api\Data\PendingCaptureInterfaceFactory;
+use Magento\Framework\UrlInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * Class AmazonPaymentAdapter
@@ -80,6 +82,11 @@ class AmazonPaymentAdapter
      */
     private $pendingAuthorizationFactory;
 
+    /**
+     * @var UrlInterface
+     */
+    private $urlBuilder;
+
     /**
      * AmazonPaymentAdapter constructor.
      * @param ClientFactoryInterface $clientFactory
@@ -91,6 +98,7 @@ class AmazonPaymentAdapter
      * @param SubjectReader $subjectReader
      * @param Data $coreHelper
      * @param Logger $logger
+     * @param UrlInterface $urlBuilder
      */
     public function __construct(
         ClientFactoryInterface $clientFactory,
@@ -101,9 +109,9 @@ class AmazonPaymentAdapter
         PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory,
         SubjectReader $subjectReader,
         Data $coreHelper,
-        Logger $logger
-    )
-    {
+        Logger $logger,
+        UrlInterface $urlBuilder = null
+    ) {
         $this->clientFactory = $clientFactory;
         $this->amazonSetOrderDetailsResponseFactory = $amazonSetOrderDetailsResponseFactory;
         $this->logger = $logger;
@@ -113,6 +121,7 @@ class AmazonPaymentAdapter
         $this->coreHelper = $coreHelper;
         $this->pendingCaptureFactory = $pendingCaptureFactory;
         $this->pendingAuthorizationFactory = $pendingAuthorizationFactory;
+        $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
     }
 
     /**
@@ -159,7 +168,9 @@ class AmazonPaymentAdapter
 
         $response = $this->clientFactory->create($storeId)->confirmOrderReference(
             [
-                'amazon_order_reference_id' => $amazonOrderReferenceId
+                'amazon_order_reference_id' => $amazonOrderReferenceId,
+                'success_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout'),
+                'failure_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout')
             ]
         );
 
@@ -230,15 +241,6 @@ class AmazonPaymentAdapter
         $response['constraints'] = [];
         $response['amazon_order_reference_id'] = $data['amazon_order_reference_id'];
 
-        if (!$attempts) {
-            $detailResponse = $this->setOrderReferenceDetails($storeId, $data);
-
-            if (isset($detailResponse['constraints']) && !empty($detailResponse['constraints'])) {
-                $response['constraints'] = $detailResponse['constraints'];
-                return $response;
-            }
-        }
-
         $confirmResponse = $this->confirmOrderReference($storeId, $data['amazon_order_reference_id']);
 
         if ($confirmResponse->response['Status'] == 200) {

--- a/Model/Method/AmazonLoginMethod.php
+++ b/Model/Method/AmazonLoginMethod.php
@@ -19,8 +19,7 @@ use Amazon\Core\Helper\Data as AmazonCoreHelper;
 
 /**
  * Class AmazonLoginMethod
- *
- * @package Amazon\Payment\Model\Method
+ * For display of Amazon Pay in payment method list
  */
 class AmazonLoginMethod extends \Magento\Payment\Model\Method\AbstractMethod
 {
@@ -52,4 +51,18 @@ class AmazonLoginMethod extends \Magento\Payment\Model\Method\AbstractMethod
      */
     protected $_isOffline = true;
 
+    /**
+     * Is active
+     *
+     * @param int|null $storeId
+     * @return bool
+     */
+    public function isActive($storeId = null)
+    {
+        return (bool)(int)$this->_scopeConfig->getValue(
+            AmazonCoreHelper::AMAZON_ACTIVE,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            $storeId
+        ) && (bool)(int)$this->getConfigData('active', $storeId);
+    }
 }

--- a/Model/OrderInformationManagement.php
+++ b/Model/OrderInformationManagement.php
@@ -32,6 +32,8 @@ use Magento\Quote\Model\Quote;
 use Magento\Store\Model\ScopeInterface;
 use AmazonPay\ResponseInterface;
 use Psr\Log\LoggerInterface;
+use Magento\Framework\UrlInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
@@ -97,7 +99,8 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory,
         QuoteLinkInterfaceFactory $quoteLinkFactory,
         LoggerInterface $logger,
-        ProductMetadata $productMetadata
+        ProductMetadata $productMetadata,
+        UrlInterface $urlBuilder = null
     ) {
         $this->session                              = $session;
         $this->clientFactory                        = $clientFactory;
@@ -107,6 +110,7 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         $this->quoteLinkFactory                     = $quoteLinkFactory;
         $this->logger                               = $logger;
         $this->productMetadata                      = $productMetadata;
+        $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
     }
 
     /**
@@ -189,7 +193,9 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         try {
             $response = $this->clientFactory->create($storeId)->confirmOrderReference(
                 [
-                    'amazon_order_reference_id' => $amazonOrderReferenceId
+                    'amazon_order_reference_id' => $amazonOrderReferenceId,
+                    'success_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout'),
+                    'failure_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout')
                 ]
             );
 

--- a/Model/PaymentManagement/Authorization.php
+++ b/Model/PaymentManagement/Authorization.php
@@ -341,12 +341,11 @@ class Authorization extends AbstractOperation
             $invoice = $this->getInvoice($transactionId, $order);
             $this->setPaymentReview($order);
             $formattedAmount = $order->getBaseCurrency()->formatTxt($invoice->getBaseGrandTotal());
-            $message = __('Declined amount of %1 online', $formattedAmount);
         } else {
             $formattedAmount = $order->getBaseCurrency()->formatTxt($payment->getBaseAmountAuthorized());
-            $message = __('Declined amount of %1 online', $formattedAmount);
         }
 
+        $message = __('Declined amount of %1 online', $formattedAmount);
         $transaction = $this->paymentManagement->getTransaction($transactionId, $payment, $order);
         $payment->addTransactionCommentsToOrder($transaction, $message);
         $this->paymentManagement->closeTransaction($transactionId, $payment, $order);
@@ -386,15 +385,13 @@ class Authorization extends AbstractOperation
         if ($capture) {
             $invoice = $this->getInvoiceAndSetCancelled($transactionId, $order);
             $formattedAmount = $order->getBaseCurrency()->formatTxt($invoice->getBaseGrandTotal());
-            $message = __('Declined amount of %1 online', $formattedAmount);
             $this->addCaptureDeclinedNotice($order);
         } else {
             $formattedAmount = $order->getBaseCurrency()->formatTxt($payment->getBaseAmountAuthorized());
-            $message = __('Declined amount of %1 online', $formattedAmount);
         }
 
+        $message = __('Declined amount of %1 online', $formattedAmount);
         $this->setOnHold($order);
-
         $transaction = $this->paymentManagement->getTransaction($transactionId, $payment, $order);
         $payment->addTransactionCommentsToOrder($transaction, $message);
         $this->paymentManagement->closeTransaction($transactionId, $payment, $order);
@@ -505,7 +502,8 @@ class Authorization extends AbstractOperation
         OrderInterface $order,
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization
-    ) {
+    )
+    {
         $capture = true;
 
         try {

--- /dev/null
+++ b/Plugin/ConfirmOrderReference.php
@@ -0,0 +1,103 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+namespace Amazon\Payment\Plugin;
+
+use Amazon\Core\Exception\AmazonWebapiException;
+use Amazon\Payment\Api\Data\QuoteLinkInterface;
+use Magento\Checkout\Model\Session;
+use Magento\Checkout\Api\PaymentInformationManagementInterface;
+use Magento\Quote\Api\PaymentMethodManagementInterface;
+use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
+use Amazon\Payment\Model\OrderInformationManagement;
+use Magento\Quote\Api\Data\PaymentInterface;
+use Magento\Quote\Api\Data\AddressInterface;
+use Magento\Framework\Exception\LocalizedException;
+use Amazon\Payment\Gateway\Config\Config as GatewayConfig;
+use Magento\Quote\Api\CartRepositoryInterface;
+
+
+/**
+ * Class ConfirmOrderReference
+ *
+ * Confirm the OrderReference when payment details are saved
+ */
+class ConfirmOrderReference
+{
+    /**
+     * @var Session
+     */
+    private $checkoutSession;
+
+    /**
+     * @var OrderInformationManagement
+     */
+    private $orderInformationManagement;
+
+    /**
+     * @var CartRepositoryInterface
+     */
+    private $quoteRepository;
+
+    /**
+     * ConfirmOrderReference constructor.
+     * @param Session $checkoutSession
+     * @param OrderInformationManagement $orderInformationManagement
+     * @param CartRepositoryInterface $quoteRepository
+     */
+    public function __construct(
+        Session $checkoutSession,
+        OrderInformationManagement $orderInformationManagement,
+        CartRepositoryInterface $quoteRepository
+    ) {
+        $this->checkoutSession = $checkoutSession;
+        $this->orderInformationManagement = $orderInformationManagement;
+        $this->quoteRepository = $quoteRepository;
+    }
+
+    /**
+     * @param PaymentMethodManagementInterface $subject
+     * @param $result
+     * @param $cartId
+     * @param PaymentInterface $paymentMethod
+     * @param AddressInterface|null $billingAddress
+     * @return mixed
+     * @throws \Magento\Framework\Exception\LocalizedException
+     */
+    public function afterSet(
+        PaymentMethodManagementInterface $subject,
+        $result,
+        $cartId,
+        PaymentInterface $paymentMethod
+    ) {
+        if($paymentMethod->getMethod() == GatewayConfig::CODE) {
+            $quote = $this->quoteRepository->get($cartId);
+            $quoteExtensionAttributes = $quote->getExtensionAttributes();
+            if ($quoteExtensionAttributes) {
+                $amazonOrderReferenceId = $quoteExtensionAttributes
+                    ->getAmazonOrderReferenceId();
+
+                $this->orderInformationManagement->saveOrderInformation($amazonOrderReferenceId);
+                $this->orderInformationManagement->confirmOrderReference(
+                    $amazonOrderReferenceId,
+                    $quote->getStoreId()
+                );
+            }
+        }
+
+        return $result;
+    }
+}

--- a/Plugin/ShippingInformationManagement.php
+++ b/Plugin/ShippingInformationManagement.php
@@ -92,6 +92,16 @@ class ShippingInformationManagement
             );
         }
 
+        /*
+         * Magento\Quote\Model\Quote::setShippingAddress merges into the existing shipping address,
+         *  rather than replacing it.  Because not all addresses have a region_id, make sure that
+         *  the region_id is explicitly emptied, to prevent the old one being used.
+         */
+        $shippingAddress = $shippingInformation->getShippingAddress();
+        if(!$shippingAddress->hasData('region_id')) {
+            $shippingAddress->setRegionId("");
+        }
+
         return $return;
     }
 }

--- /dev/null
+++ b/Test/Mftf/Data/AmazonPaymentData.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+          xsi:noNamespaceSchemaLocation="../../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataProfileSchema.xsd">
+    <entity name="SampleAmazonPaymentConfig" type="amazon_payment_config_state">
+        <requiredEntity type="merchant_id">SampleMerchantId</requiredEntity>
+        <requiredEntity type="access_key">SampleAccessKey</requiredEntity>
+        <requiredEntity type="secret_key">SampleSecretKey</requiredEntity>
+        <requiredEntity type="client_id">SampleClientId</requiredEntity>
+        <requiredEntity type="client_secret">SampleClientSecret</requiredEntity>
+        <requiredEntity type="payment_region">SamplePaymentRegion</requiredEntity>
+        <requiredEntity type="sandbox">SampleSandbox</requiredEntity>
+        <requiredEntity type="payment_action">SamplePaymentAction</requiredEntity>
+        <requiredEntity type="authorization_mode">SampleAuthorizationMode</requiredEntity>
+    </entity>
+    <entity name="SampleMerchantId" type="merchant_id">
+        <data key="value">someMerchantId</data>
+    </entity>
+    <entity name="SampleAccessKey" type="access_key">
+        <data key="value">someAccessKey</data>
+    </entity>
+    <entity name="SampleSecretKey" type="secret_key">
+        <data key="value">somePrivateKey</data>
+    </entity>
+    <entity name="SampleClientId" type="client_id">
+        <data key="value">someClientId</data>
+    </entity>
+    <entity name="SampleClientSecret" type="client_secret">
+        <data key="value">someClientSecret</data>
+    </entity>
+    <entity name="SamplePaymentRegion" type="payment_region">
+        <data key="value">us</data>
+    </entity>
+    <entity name="SampleSandbox" type="sandbox">
+        <data key="value">1</data>
+    </entity>
+    <entity name="SamplePaymentAction" type="payment_action">
+        <data key="value">authorize</data>
+    </entity>
+    <entity name="SampleAuthorizationMode" type="authorization_mode">
+        <data key="value">synchronous</data>
+    </entity>
+    <!-- default configuration used to restore Magento config -->
+    <entity name="DefaultAmazonPaymentConfig" type="amazon_payment_config_state">
+        <requiredEntity type="merchant_id">DefaultMerchantId</requiredEntity>
+        <requiredEntity type="access_key">DefaultAccessKey</requiredEntity>
+        <requiredEntity type="secret_key">DefaultSecretKey</requiredEntity>
+        <requiredEntity type="client_id">DefaultClientId</requiredEntity>
+        <requiredEntity type="client_secret">DefaultClientSecret</requiredEntity>
+        <requiredEntity type="payment_region">DefaultPaymentRegion</requiredEntity>
+        <requiredEntity type="sandbox">DefaultSandbox</requiredEntity>
+        <requiredEntity type="payment_action">DefaultPaymentAction</requiredEntity>
+        <requiredEntity type="authorization_mode">DefaultAuthorizationMode</requiredEntity>
+    </entity>
+    <entity name="DefaultMerchantId" type="merchant_id">
+        <data key="value"/>
+    </entity>
+    <entity name="DefaultAccessKey" type="access_key">
+        <data key="value"/>
+    </entity>
+    <entity name="DefaultSecretKey" type="secret_key">
+        <data key="value"/>
+    </entity>
+    <entity name="DefaultClientId" type="client_id">
+        <data key="value"/>
+    </entity>
+    <entity name="DefaultClientSecret" type="client_secret">
+        <data key="value"/>
+    </entity>
+    <entity name="DefaultPaymentRegion" type="payment_region">
+        <data key="value"/>
+    </entity>
+    <entity name="DefaultSandbox" type="sandbox">
+        <data key="value"/>
+    </entity>
+    <entity name="DefaultPaymentAction" type="payment_action">
+        <data key="value">authorize</data>
+    </entity>
+    <entity name="DefaultAuthorizationMode" type="authorization_mode">
+        <data key="value">synchronous</data>
+    </entity>
+</entities>

--- /dev/null
+++ b/Test/Mftf/Metadata/amazon_payment_config-meta.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<operations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+            xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataOperation.xsd">
+    <operation name="CreateAmazonPaymentConfigState" dataType="amazon_payment_config_state" type="create" auth="adminFormKey" url="/admin/system_config/save/section/payment/" method="POST">
+        <object key="groups" dataType="amazon_payment_config_state">
+            <object key="amazon_payment" dataType="amazon_payment_config_state">
+                <object key="groups" dataType="amazon_payment_config_state">
+                    <object key="amazon_payment" dataType="amazon_payment_config_state">
+                        <object key="groups" dataType="amazon_payment_config_state">
+                            <object key="amazon_payment_required" dataType="amazon_payment_config_state">
+                                <object key="fields" dataType="amazon_payment_config_state">
+                                    <object key="merchant_id" dataType="merchant_id">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="access_key" dataType="access_key">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="secret_key" dataType="secret_key">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="client_id" dataType="client_id">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="client_secret" dataType="client_secret">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="payment_region" dataType="payment_region">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="sandbox" dataType="sandbox">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="payment_action" dataType="payment_action">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="authorization_mode" dataType="authorization_mode">
+                                        <field key="value">string</field>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                    </object>
+                </object>
+            </object>
+        </object>
+    </operation>
+</operations>

--- /dev/null
+++ b/Test/Mftf/Metadata/amazon_payment_config_meta.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<operations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+            xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataOperation.xsd">
+    <operation name="CreateAmazonPaymentConfigState" dataType="amazon_payment_config_state" type="create" auth="adminFormKey" url="/admin/system_config/save/section/payment/" method="POST">
+        <object key="groups" dataType="amazon_payment_config_state">
+            <object key="amazon_payment" dataType="amazon_payment_config_state">
+                <object key="groups" dataType="amazon_payment_config_state">
+                    <object key="amazon_payment" dataType="amazon_payment_config_state">
+                        <object key="groups" dataType="amazon_payment_config_state">
+                            <object key="amazon_payment_required" dataType="amazon_payment_config_state">
+                                <object key="fields" dataType="amazon_payment_config_state">
+                                    <object key="merchant_id" dataType="merchant_id">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="access_key" dataType="access_key">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="secret_key" dataType="secret_key">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="client_id" dataType="client_id">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="client_secret" dataType="client_secret">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="payment_region" dataType="payment_region">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="sandbox" dataType="sandbox">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="payment_action" dataType="payment_action">
+                                        <field key="value">string</field>
+                                    </object>
+                                    <object key="authorization_mode" dataType="authorization_mode">
+                                        <field key="value">string</field>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                    </object>
+                </object>
+            </object>
+        </object>
+    </operation>
+</operations>

--- /dev/null
+++ b/Test/Mftf/README.md
@@ -0,0 +1,3 @@
+# Amazon Payment Functional Tests
+
+Functional Test Module for Amazon Payment modules.
\ No newline at end of file

--- /dev/null
+++ b/Test/Mftf/composer.json
@@ -0,0 +1,28 @@
+{
+  "name": "amzn/login-with-amazon-module",
+  "description": "Login with Amazon module",
+  "type": "magento2-module",
+  "version": "2.1.2",
+  "license": [
+    "Apache-2.0"
+  ],
+  "require": {
+    "php": "~7.0.13|~7.1.0|~7.2.0",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^2.1.2",
+    "magento/module-customer": "^101.0",
+    "magento/module-store": "^100.1",
+    "magento/module-eav": "101.0.*",
+    "magento/module-checkout": "100.2.*",
+    "magento/module-checkout-agreements": "100.2.*"
+
+  },
+  "suggest": {
+    "magento/module-sales": "101.0.*"
+  },
+  "autoload": {
+    "files": ["registration.php"],
+    "psr-4": {
+      "Amazon\\Login\\": ""
+    }
+  }
+}

--- /dev/null
+++ b/Test/Unit/Gateway/Command/CaptureStrategyCommandTest.php
@@ -0,0 +1,297 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Test\Unit\Gateway\Command;
+
+use Amazon\Payment\Gateway\Command\CaptureStrategyCommand;
+use Amazon\Core\Helper\Data;
+use Amazon\Payment\Gateway\Data\Order\OrderAdapterFactory;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+use Magento\Framework\Api\SearchCriteriaBuilder;
+use Magento\Framework\Api\FilterBuilder;
+use Magento\Framework\Api\Search\SearchCriteria;
+use Magento\Payment\Gateway\Command\CommandPoolInterface;
+use Magento\Payment\Gateway\Command\GatewayCommand;
+use Magento\Payment\Gateway\Data\OrderAdapterInterface;
+use Magento\Payment\Gateway\Data\PaymentDataObject;
+use Magento\Sales\Api\TransactionRepositoryInterface;
+use Magento\Sales\Model\Order\Payment;
+use Magento\Sales\Model\ResourceModel\Order\Payment\Transaction\CollectionFactory;
+use PHPUnit_Framework_MockObject_MockObject as MockObject;
+
+/**
+ * Class CaptureStrategyCommandTest
+ *
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ */
+class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
+{
+    /**
+     * @var CaptureStrategyCommand
+     */
+    private $strategyCommand;
+
+    /**
+     * @var CommandPoolInterface|MockObject
+     */
+    private $commandPool;
+
+    /**
+     * @var TransactionRepositoryInterface|MockObject
+     */
+    private $transactionRepository;
+
+    /**
+     * @var FilterBuilder|MockObject
+     */
+    private $filterBuilder;
+
+    /**
+     * @var SearchCriteriaBuilder|MockObject
+     */
+    private $searchCriteriaBuilder;
+
+    /**
+     * @var Payment|MockObject
+     */
+    private $payment;
+
+    /**
+     * @var GatewayCommand|MockObject
+     */
+    private $command;
+
+    /**
+     * @var Data|MockObject
+     */
+    private $coreHelper;
+
+    /**
+     * @var OrderAdapterFactory|MockObject
+     */
+    private $orderAdapterFactory;
+
+    /**
+     * Sets up base classes needed to mock the command strategy class
+     */
+    protected function setUp()
+    {
+        $this->commandPool = $this->getMockBuilder(CommandPoolInterface::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['get', '__wakeup'])
+            ->getMock();
+
+        $this->initCommandMock();
+        $this->initTransactionRepositoryMock();
+        $this->initFilterBuilderMock();
+        $this->initSearchCriteriaBuilderMock();
+        $this->initOrderAdapterFactoryMock();
+
+        $this->coreHelper = $this->getMockBuilder(\Amazon\Core\Helper\Data::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        $this->strategyCommand = new CaptureStrategyCommand(
+            $this->commandPool,
+            $this->transactionRepository,
+            $this->searchCriteriaBuilder,
+            $this->filterBuilder,
+            $this->coreHelper,
+            $this->orderAdapterFactory
+        );
+    }
+
+    /**
+     * Tests if command strategy class returns correct command value when item is authorized but not captured
+     * @throws \Magento\Payment\Gateway\Command\CommandException
+     */
+    public function testSaleExecute()
+    {
+        $paymentData = $this->getPaymentDataObjectMock();
+        $subject['payment'] = $paymentData;
+
+        $this->payment->method('getAuthorizationTransaction')
+            ->willReturn(false);
+
+        $this->payment->method('getId')
+            ->willReturn(1);
+
+        $this->coreHelper->method('getPaymentAction')->willReturn('authorize_capture');
+
+        $this->buildSearchCriteria();
+
+        $this->transactionRepository->method('getTotalCount')
+            ->willReturn(0);
+
+        $this->commandPool->method('get')
+            ->with(CaptureStrategyCommand::SALE)
+            ->willReturn($this->command);
+
+        $this->strategyCommand->execute($subject);
+    }
+
+    /**
+     * Tests if command strategy class returns correct command value when item is to be authorized and captured
+     * @throws \Magento\Payment\Gateway\Command\CommandException
+     */
+    public function testCaptureExecute()
+    {
+        $paymentData = $this->getPaymentDataObjectMock();
+        $subject['payment'] = $paymentData;
+        $lastTransId = 'transaction_id';
+
+        $this->payment->method('getAuthorizationTransaction')
+            ->willReturn(true);
+
+        $this->payment->method('getLastTransId')
+            ->willReturn($lastTransId);
+
+        $this->payment->method('getId')
+            ->willReturn(1);
+
+        $this->buildSearchCriteria();
+
+        $this->transactionRepository->method('getTotalCount')
+            ->willReturn(0);
+
+        $this->commandPool->method('get')
+            ->with(CaptureStrategyCommand::CAPTURE)
+            ->willReturn($this->command);
+
+        $this->strategyCommand->execute($subject);
+    }
+
+
+    /**
+     * Creates mock for payment data object and order payment
+     * @return MockObject
+     */
+    private function getPaymentDataObjectMock()
+    {
+        $this->payment = $this->getMockBuilder(Payment::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        $mock = $this->getMockBuilder(PaymentDataObject::class)
+            ->setMethods(['getPayment', 'getOrder'])
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        $mock->method('getPayment')
+            ->willReturn($this->payment);
+
+        $order = $this->getMockBuilder(OrderAdapterInterface::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        $mock->method('getOrder')
+            ->willReturn($order);
+
+        return $mock;
+    }
+
+    /**
+     * Creates mock for gateway command object
+     */
+    private function initCommandMock()
+    {
+        $this->command = $this->getMockBuilder(GatewayCommand::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['execute'])
+            ->getMock();
+
+        $this->command->method('execute')
+            ->willReturn([]);
+    }
+
+    /**
+     * Creates mock for filter object
+     */
+    private function initFilterBuilderMock()
+    {
+        $this->filterBuilder = $this->getMockBuilder(FilterBuilder::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['setField', 'setValue', 'create', '__wakeup'])
+            ->getMock();
+    }
+
+    /**
+     * Builds search criteria
+     */
+    private function buildSearchCriteria()
+    {
+        $this->filterBuilder->expects(self::exactly(2))
+            ->method('setField')
+            ->willReturnSelf();
+        $this->filterBuilder->expects(self::exactly(2))
+            ->method('setValue')
+            ->willReturnSelf();
+
+        $searchCriteria = new SearchCriteria();
+        $this->searchCriteriaBuilder->expects(self::exactly(2))
+            ->method('addFilters')
+            ->willReturnSelf();
+        $this->searchCriteriaBuilder->method('create')
+            ->willReturn($searchCriteria);
+
+        $this->transactionRepository->method('getList')
+            ->with($searchCriteria)
+            ->willReturnSelf();
+    }
+
+    /**
+     * Create mock for search criteria object
+     */
+    private function initSearchCriteriaBuilderMock()
+    {
+        $this->searchCriteriaBuilder = $this->getMockBuilder(SearchCriteriaBuilder::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['addFilters', 'create', '__wakeup'])
+            ->getMock();
+    }
+
+    /**
+     * Create mock for transaction repository
+     */
+    private function initTransactionRepositoryMock()
+    {
+        $this->transactionRepository = $this->getMockBuilder(TransactionRepositoryInterface::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['getList', 'getTotalCount', 'delete', 'get', 'save', 'create', '__wakeup'])
+            ->getMock();
+    }
+
+    /**
+     * Create mock for Order Adapter Factory
+     */
+    public function initOrderAdapterFactoryMock()
+    {
+        $this->orderAdapterFactory = $this->getMockBuilder(OrderAdapterFactory::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['create'])
+            ->getMock();
+
+        $orderMock = $this->getMockBuilder(OrderAdapterInterface::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['getAmazonOrderID'])
+            ->getMock();
+
+        $orderMock->method('getAmazonOrderID')
+            ->willReturn('123456');
+
+        $this->orderAdapterFactory->method('create')
+            ->willReturn($orderMock);
+    }
+}

--- /dev/null
+++ b/Test/Unit/Observer/AddAmazonButtonTest.php
@@ -0,0 +1,66 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Test\Unit\Observer;
+
+use Amazon\Payment\Block\Minicart\Button;
+use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
+use Magento\Catalog\Block\ShortcutButtons;
+use Magento\Framework\Event;
+use Magento\Framework\Event\Observer;
+use Amazon\Payment\Observer\AddAmazonButton;
+
+/**
+ * Class AddAmazonButtonTest
+ *
+ * @see \Amazon\Payment\Observer\AddAmazonButton
+ */
+class AddAmazonButtonTest extends \PHPUnit\Framework\TestCase
+{
+    public function testExecute()
+    {
+
+        $objectManager = new ObjectManager($this);
+        $data = $objectManager->getObject(\Amazon\Core\Helper\Data::class);
+        $shortcutFactory = $objectManager->getObject(\Amazon\Payment\Helper\Shortcut\Factory::class);
+        $addAmazonButton = new AddAmazonButton($data, $shortcutFactory);
+
+        /** @var Observer|\PHPUnit_Framework_MockObject_MockObject $observerMock */
+        $observerMock = $this->getMockBuilder(Observer::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        /** @var Event|\PHPUnit_Framework_MockObject_MockObject $eventMock */
+        $eventMock = $this->getMockBuilder(Event::class)
+            ->setMethods(['getContainer'])
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        /** @var ShortcutButtons|\PHPUnit_Framework_MockObject_MockObject $shortcutButtonsMock */
+        $shortcutButtonsMock = $this->getMockBuilder(ShortcutButtons::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+
+        $observerMock->expects(self::once())
+            ->method('getEvent')
+            ->willReturn($eventMock);
+
+        $eventMock->expects(self::once())
+            ->method('getContainer')
+            ->willReturn($shortcutButtonsMock);
+
+        $addAmazonButton->execute($observerMock);
+    }
+}

--- /dev/null
+++ b/Test/Unit/Observer/DataAssignObserverTest.php
@@ -0,0 +1,66 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Test\Unit\Observer;
+
+use Magento\Framework\DataObject;
+use Magento\Framework\Event;
+use Magento\Payment\Model\InfoInterface;
+use Magento\Payment\Observer\AbstractDataAssignObserver;
+use Amazon\Payment\Observer\DataAssignObserver;
+use Magento\Quote\Api\Data\PaymentInterface;
+
+/**
+ * Class DataAssignObserverTest
+ */
+class DataAssignObserverTest extends \PHPUnit\Framework\TestCase
+{
+    const KEY_SANDBOX_SIMULATION_REFERENCE = 'sandbox_simulation_reference';
+
+    public function testExecute()
+    {
+        $observerContainer = $this->getMockBuilder(Event\Observer::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+        $event = $this->getMockBuilder(Event::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+        $paymentInfoModel = $this->createMock(InfoInterface::class);
+        $dataObject = new DataObject(
+            [
+                PaymentInterface::KEY_ADDITIONAL_DATA => [
+                    'sandbox_simulation_reference' => self::KEY_SANDBOX_SIMULATION_REFERENCE
+                ]
+            ]
+        );
+        $observerContainer->expects(static::atLeastOnce())
+            ->method('getEvent')
+            ->willReturn($event);
+        $event->expects(static::exactly(2))
+            ->method('getDataByKey')
+            ->willReturnMap(
+                [
+                    [AbstractDataAssignObserver::MODEL_CODE, $paymentInfoModel],
+                    [AbstractDataAssignObserver::DATA_CODE, $dataObject]
+                ]
+            );
+        $paymentInfoModel->expects(static::at(0))
+            ->method('setAdditionalInformation')
+            ->with('sandbox_simulation_reference', self::KEY_SANDBOX_SIMULATION_REFERENCE);
+
+        $observer = new DataAssignObserver();
+        $observer->execute($observerContainer);
+    }
+}

--- a/composer.json
+++ b/composer.json
@@ -2,29 +2,29 @@
   "name": "amzn/amazon-pay-module",
   "description": "Amazon Pay module",
   "type": "magento2-module",
-  "version": "2.1.0",
+  "version": "2.2.14",
   "license": [
     "Apache-2.0"
   ],
   "require": {
-    "php": "~7.0.13|~7.1.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^2.1.0",
-    "amzn/login-with-amazon-module": "^2.1.0",
-    "magento/module-eav": "101.0.*",
-    "magento/module-sales": "101.0.*",
-    "magento/module-quote": "101.0.*",
-    "magento/module-payment": "100.2.*",
-    "magento/module-backend": "100.2.*",
-    "magento/module-store": "^100.1",
-    "magento/module-checkout": "100.2.*",
-    "magento/module-catalog": "102.0.*",
-    "magento/module-paypal": "100.2.*",
-    "magento/module-directory": "100.2.*"
+    "php": "~7.0.13|~7.1.0|~7.2.0",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^2.2.14",
+    "amzn/login-with-amazon-module": "^2.2.14",
+    "magento/module-eav": "*",
+    "magento/module-sales": "*",
+    "magento/module-quote": "*",
+    "magento/module-payment": "*",
+    "magento/module-backend": "*",
+    "magento/module-store": "*",
+    "magento/module-checkout": "*",
+    "magento/module-catalog": "*",
+    "magento/module-paypal": "*",
+    "magento/module-directory": "*"
   },
   "suggest": {
-    "magento/module-customer": "^101.0",
-    "magento/module-scalable-checkout": "100.2.*",
-    "magento/module-scalable-oms": "100.2.*"
+    "magento/module-customer": "*",
+    "magento/module-scalable-checkout": "*",
+    "magento/module-scalable-oms": "*"
   },
   "autoload": {
     "files": ["registration.php"],

--- a/etc/config.xml
+++ b/etc/config.xml
@@ -35,7 +35,7 @@
                 <button_color>Gold</button_color>
                 <button_size>medium</button_size>
                 <logging>1</logging>
-                <platform_id>A2ZAYEJU54T1BM</platform_id>
+                <platform_id>AUGT0HMCLQVX1</platform_id>
                 <hard_decline_code>4273</hard_decline_code>
                 <soft_decline_code>7638</soft_decline_code>
             </amazon_payment>

--- a/etc/di.xml
+++ b/etc/di.xml
@@ -55,8 +55,8 @@
     <virtualType name="Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper"
                  type="Magento\Payment\Gateway\ErrorMapper\ErrorMessageMapper">
         <arguments>
-            <argument name="messageMapping" xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualMappingData
-            </argument>
+            <argument name="messageMapping"
+                xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualMappingData</argument>
         </arguments>
     </virtualType>
 
@@ -120,19 +120,18 @@
     <!-- Authorize command -->
     <virtualType name="AmazonAuthorizeCommand" type="Amazon\Payment\Gateway\Command\AmazonAuthCommand">
         <arguments>
-            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\AuthorizationRequest
-            </argument>
+            <argument name="requestBuilder"
+                      xsi:type="object">Amazon\Payment\Gateway\Request\AuthorizationRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\CompleteAuthHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
             <argument name="validator" xsi:type="object">AmazonAuthorizationValidators</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\AuthorizeClient</argument>
             <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper
-            </argument>
+                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
-    <type name="Amazon\Payment\Gateway\Request\AuthorizationRequest">
+    <type name="Amazon\Payment\Gateway\Request\AuthorizationRequestBuilder">
         <arguments>
             <argument name="config" xsi:type="object">AmazonGatewayConfig</argument>
         </arguments>
@@ -141,35 +140,33 @@
     <!-- Authorize and Capture command -->
     <virtualType name="AmazonSaleCommand" type="Amazon\Payment\Gateway\Command\AmazonAuthCommand">
         <arguments>
-            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\AuthorizationRequest
-            </argument>
+            <argument name="requestBuilder"
+                      xsi:type="object">Amazon\Payment\Gateway\Request\AuthorizationRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\CompleteSaleHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
             <argument name="validator" xsi:type="object">AmazonAuthorizationValidators</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\CaptureClient</argument>
             <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper
-            </argument>
+                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
     <!-- Capture settlement command -->
     <virtualType name="AmazonSettlementCommand" type="Amazon\Payment\Gateway\Command\AmazonAuthCommand">
         <arguments>
-            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\SettlementRequest
-            </argument>
+            <argument name="requestBuilder"
+                      xsi:type="object">Amazon\Payment\Gateway\Request\SettlementRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\SettlementHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
             <argument name="validator" xsi:type="object">AmazonAuthorizationValidators</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\SettlementClient</argument>
             <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper
-            </argument>
+                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
     <!-- Capture Request -->
-    <type name="Amazon\Payment\Gateway\Request\CaptureRequest">
+    <type name="Amazon\Payment\Gateway\Request\CaptureRequestBuilder">
         <arguments>
             <argument name="config" xsi:type="object">AmazonGatewayConfig</argument>
             <argument name="coreHelper" xsi:type="object">Amazon\Core\Helper\Data</argument>
@@ -180,35 +177,33 @@
     <!-- Refund Command -->
     <virtualType name="AmazonRefundCommand" type="Magento\Payment\Gateway\Command\GatewayCommand">
         <arguments>
-            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\RefundRequest</argument>
+            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\RefundRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\RefundHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
-            <argument name="validator" xsi:type="object">Amazon\Payment\Gateway\Validator\AuthorizationValidator
-            </argument>
+            <argument name="validator"
+                      xsi:type="object">Amazon\Payment\Gateway\Validator\AuthorizationValidator</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\RefundClient</argument>
             <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper
-            </argument>
+                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
     <!-- Void command -->
     <virtualType name="AmazonVoidCommand" type="Magento\Payment\Gateway\Command\GatewayCommand">
         <arguments>
-            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\VoidRequest</argument>
+            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\VoidRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\VoidHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
-            <argument name="validator" xsi:type="object">Amazon\Payment\Gateway\Validator\AuthorizationValidator
-            </argument>
+            <argument name="validator"
+                      xsi:type="object">Amazon\Payment\Gateway\Validator\AuthorizationValidator</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\VoidClient</argument>
             <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper
-            </argument>
+                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
     <!-- Void Request -->
-    <type name="Amazon\Payment\Gateway\Request\VoidRequest">
+    <type name="Amazon\Payment\Gateway\Request\VoidRequestBuilder">
         <arguments>
             <argument name="config" xsi:type="object">AmazonGatewayConfig</argument>
         </arguments>
@@ -267,6 +262,9 @@
                 sortOrder="10"
                 disabled="false"/>
     </type>
+    <type name="Magento\Quote\Model\PaymentMethodManagement">
+        <plugin name="confirm_order_reference_on_payment_details_save" type="Amazon\Payment\Plugin\ConfirmOrderReference" sortOrder="10" disabled="false"/>
+    </type>
 
     <type name="Amazon\Payment\Cron\ProcessAmazonRefunds">
         <arguments>
@@ -280,8 +278,8 @@
     </type>
     <type name="Amazon\Payment\Model\QueuedRefundUpdater">
         <arguments>
-            <argument name="adminNotifier" xsi:type="object">Magento\Framework\Notification\NotifierInterface\Proxy
-            </argument>
+            <argument name="adminNotifier"
+                  xsi:type="object">Magento\Framework\Notification\NotifierInterface\Proxy</argument>
         </arguments>
     </type>
     <type name="Amazon\Payment\Api\Ipn\CompositeProcessorInterface">
@@ -289,8 +287,7 @@
             <argument name="processors" xsi:type="array">
                 <item name="captureprocessor" xsi:type="object">Amazon\Payment\Model\Ipn\CaptureProcessor\Proxy</item>
                 <item name="authorizationprocessor"
-                      xsi:type="object">Amazon\Payment\Model\Ipn\AuthorizationProcessor\Proxy
-                </item>
+                      xsi:type="object">Amazon\Payment\Model\Ipn\AuthorizationProcessor\Proxy</item>
                 <item name="orderprocessor" xsi:type="object">Amazon\Payment\Model\Ipn\OrderProcessor\Proxy</item>
                 <item name="refundprocessor" xsi:type="object">Amazon\Payment\Model\Ipn\RefundProcessor\Proxy</item>
             </argument>

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Payment" setup_version="2.1.0" >
+    <module name="Amazon_Payment" setup_version="2.2.14" >
         <sequence>
             <module name="Amazon_Core"/>
             <module name="Amazon_Login"/>

--- a/view/frontend/web/js/action/place-order.js
+++ b/view/frontend/web/js/action/place-order.js
@@ -22,9 +22,10 @@ define(
         'Magento_Checkout/js/model/error-processor',
         'Magento_Customer/js/model/customer',
         'Magento_Checkout/js/model/full-screen-loader',
-        'Amazon_Payment/js/model/storage'
+        'Amazon_Payment/js/model/storage',
+        'Amazon_Payment/js/model/amazonPaymentConfig'
     ],
-    function (quote, urlBuilder, storage, url, errorProcessor, customer, fullScreenLoader, amazonStorage) {
+    function (quote, urlBuilder, storage, url, errorProcessor, customer, fullScreenLoader, amazonStorage, amazonPaymentConfig) {
         'use strict';
 
         return function (paymentData, redirectOnSuccess) {
@@ -35,7 +36,7 @@ define(
 
             /** Checkout for guest and registered customer. */
             if (!customer.isLoggedIn()) {
-                serviceUrl = urlBuilder.createUrl('/guest-carts/:quoteId/payment-information', {
+                serviceUrl = urlBuilder.createUrl('/guest-carts/:quoteId/set-payment-information', {
                     quoteId: quote.getQuoteId()
                 });
                 payload = {
@@ -45,7 +46,7 @@ define(
                     billingAddress: quote.billingAddress()
                 };
             } else {
-                serviceUrl = urlBuilder.createUrl('/carts/mine/payment-information', {});
+                serviceUrl = urlBuilder.createUrl('/carts/mine/set-payment-information', {});
                 payload = {
                     cartId: quote.getQuoteId(),
                     paymentMethod: paymentData,
@@ -54,29 +55,55 @@ define(
             }
 
             fullScreenLoader.startLoader();
-
-            return storage.post(
-                serviceUrl,
-                JSON.stringify(payload)
-            ).done(
-                function () {
-                    if (redirectOnSuccess) {
-                        window.location.replace(url.build('checkout/onepage/success/'));
+            if(['de', 'uk'].indexOf(amazonPaymentConfig.getValue('region')) !== -1) {
+                console.log('SCA enabled for region: ' + amazonPaymentConfig.getValue('region'));
+                return OffAmazonPayments.initConfirmationFlow(amazonPaymentConfig.getValue('merchantId'), amazonStorage.getOrderReference(), function(confirmationFlow) {
+                    return storage.post(
+                        serviceUrl,
+                        JSON.stringify(payload)
+                    ).done(
+                        function () {
+                            confirmationFlow.success();
+                        }
+                    ).fail(
+                        function (response) {
+                            confirmationFlow.error();
+                            errorProcessor.process(response);
+                            amazonStorage.amazonDeclineCode(response.responseJSON.code);
+                            fullScreenLoader.stopLoader(true);
+                            if (response.responseJSON.code === 4273) {
+                                setTimeout(function () {
+                                    window.location.replace(url.build('checkout/cart/'));
+                                }, 5000);
+                            }
+                        }
+                    );
+                });
+            } else {
+                console.log('SCA disabled for region: ' + amazonPaymentConfig.getValue('region'));
+                return storage.post(
+                    serviceUrl,
+                    JSON.stringify(payload)
+                ).done(
+                    function () {
+                        if(redirectOnSuccess) {
+                            window.location.replace(url.build('amazonpayments/payment/completecheckout/?AuthenticationStatus=Success'));
+                        }
                     }
-                }
-            ).fail(
-                function (response) {
-                    errorProcessor.process(response);
-                    amazonStorage.amazonDeclineCode(response.responseJSON.code);
-                    fullScreenLoader.stopLoader(true);
-                    if (response.responseJSON.code == 4273) {
-                        var intervalId = setInterval(function () {
-                            clearInterval(intervalId);
-                            window.location.replace(url.build('checkout/cart/'));
-                        }, 5000);
+                ).fail(
+                    function (response) {
+                        errorProcessor.process(response);
+                        amazonStorage.amazonDeclineCode(response.responseJSON.code);
+                        fullScreenLoader.stopLoader(true);
+                        if (response.responseJSON.code === 4273) {
+                            intervalId = setInterval(function () {
+                                clearInterval(intervalId);
+                                window.location.replace(url.build('checkout/cart/'));
+                            }, 5000);
+                        }
                     }
-                }
-            );
+                );
+            }
         };
     }
 );

--- a/view/frontend/web/js/view/notification.js
+++ b/view/frontend/web/js/view/notification.js
@@ -37,4 +37,3 @@ define(
         );
     }
 );
-

--- a/view/frontend/web/js/view/shipping-address/inline-form.js
+++ b/view/frontend/web/js/view/shipping-address/inline-form.js
@@ -16,29 +16,25 @@ define([
          */
         initObservable: function () {
             this._super();
-            amazonStorage.isAmazonAccountLoggedIn.subscribe(function (value) {
-                var elem = document.getElementById(this.formSelector);
-
-                if (elem && value === false) {
-                    document.getElementById(this.formSelector).style.display = 'block';
-                }
-            }, this);
-
+            amazonStorage.isAmazonAccountLoggedIn.subscribe(this.hideInlineForm, this);
             return this;
         },
 
         /**
-         * Show/hide inline form
+         * Show/hide inline form depending on Amazon login status
          */
         manipulateInlineForm: function () {
-            var elem;
+            this.hideInlineForm(amazonStorage.isAmazonAccountLoggedIn());
+        },
 
-            if (amazonStorage.isAmazonAccountLoggedIn()) {
-                elem = document.getElementById(this.formSelector);
+        /**
+         * Show/hide inline form
+         */
+        hideInlineForm: function(hide) {
+            var elem = document.getElementById(this.formSelector);
 
-                if (elem) {
-                    document.getElementById(this.formSelector).style.display = 'none';
-                }
+            if (elem) {
+                document.getElementById(this.formSelector).style.display = hide ? 'none' : 'block';
             }
         }
     });

--- a/view/frontend/web/template/payment/amazonlogin.html
+++ b/view/frontend/web/template/payment/amazonlogin.html
@@ -14,34 +14,32 @@
  * permissions and limitations under the License.
  */
 -->
-<!-- ko if: isPwaVisible() -->
-
-<div class="payment-method" data-bind="css: {'_active': (getCode() == isChecked())}">
-    <div class="payment-method-title field choice">
-        <input type="radio"
-               name="payment[method]"
-               class="radio"
-               data-bind="attr: {'id': getCode()}, value: getCode(), checked: isChecked, click: selectPaymentMethod, visible: isRadioButtonVisible()"/>
-        <label data-bind="attr: {'for': getCode()}" class="label"><span data-bind="text: getTitle()"></span></label>
-    </div>
-
-    <div class="payment-method-content">
-
-        <div class="amazon-button-container" data-bind="visible: true">
-            <div class="amazon-button-container__cell">
-                <div id="PayWithAmazon" class="login-with-amazon" data-bind="mageInit: {'amazonButton':{'buttonType': 'PwA'}}"></div>
-            </div>
-
-            <div class="amazon-button-container__cell">
-                <div class="field-tooltip toggle">
-                    <span class="field-tooltip-action action-help" data-bind="mageInit: {'dropdown':{'activeClass': '_active'}}" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>
-                    <div class="field-tooltip-content" data-target="dropdown" aria-hidden="true">
-                        <!-- ko i18n: 'Securely login into our website using your existing Amazon details.'--><!-- /ko -->
+<if args="isPwaVisible()">
+    <div class="payment-method" css="_active : (getCode() == isChecked())">
+        <div class="payment-method-title field choice">
+            <input type="radio"
+                   name="payment[method]"
+                   class="radio"
+                   ko-checked="isChecked" ko-value="getCode()" attr="{'id': getCode()}, click: selectPaymentMethod, visible: isRadioButtonVisible()"/>
+            <label attr="for : getCode()" class="label"><span text="getTitle()"></span></label>
+        </div>
+        <div class="payment-method-content">
+            <div class="amazon-button-container" data-bind="visible: true">
+                <div class="amazon-button-container__cell">
+                    <div id="PayWithAmazon" class="login-with-amazon"
+                         data-bind="mageInit: {'amazonButton':{'buttonType': 'PwA'}}"></div>
+                </div>
+                <div class="amazon-button-container__cell">
+                    <div class="field-tooltip toggle">
+                        <span class="field-tooltip-action action-help"
+                              data-bind="mageInit: {'dropdown':{'activeClass': '_active'}}" data-toggle="dropdown"
+                              aria-haspopup="true" aria-expanded="false"></span>
+                        <div class="field-tooltip-content" data-target="dropdown" aria-hidden="true">
+                            <translate args="'Securely login into our website using your existing Amazon details.'" />
+                        </div>
                     </div>
                 </div>
             </div>
         </div>
-
     </div>
-</div>
-<!--/ko-->
\ No newline at end of file
+</if>

