--- a/Block/Adminhtml/Form/Field/IpnUrl.php
+++ b/Block/Adminhtml/Form/Field/IpnUrl.php
@@ -32,21 +32,16 @@ class IpnUrl extends BaseField
     {
         $stores = $this->_storeManager->getStores();
         $valueReturn = '';
-        $urlArray = [];
 
-        foreach ($stores as $store) {
+        if ($store = reset($stores))
+        {
             $baseUrl = $store->getBaseUrl(UrlInterface::URL_TYPE_WEB, true);
             if ($baseUrl) {
-                $value      = $baseUrl . 'amazonpayments/payment/ipn/';
-                $urlArray[] = "<div>".$this->escapeHtml($value)."</div>";
+                $value       = $baseUrl . 'amazonpayments/payment/ipn/';
+                $valueReturn = "<div>".$this->escapeHtml($value)."</div>";
             }
         }
 
-        $urlArray = array_unique($urlArray);
-        foreach ($urlArray as $uniqueUrl) {
-            $valueReturn .= "<div>".$uniqueUrl."</div>";
-        }
-
         return '<td class="value">' . $valueReturn . '</td>';
     }
 

--- a/Controller/Adminhtml/Simplepath/Poll.php
+++ b/Controller/Adminhtml/Simplepath/Poll.php
@@ -17,6 +17,8 @@ namespace Amazon\Core\Controller\Adminhtml\Simplepath;
 
 use Magento\Backend\App\Action\Context;
 use Magento\Backend\Controller\Adminhtml\System;
+use Magento\Framework\App\ObjectManager;
+use Amazon\Core\Logger\ExceptionLogger;
 
 class Poll extends System
 {
@@ -36,16 +38,23 @@ class Poll extends System
      */
     private $jsonResultFactory;
 
+    /**
+     * @var \Amazon\Core\Logger\ExceptionLogger
+     */
+    private $exceptionLogger;
+
     public function __construct(
         Context $context,
         \Amazon\Core\Model\Config\SimplePath $simplePath,
         \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
-        \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory
+        \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory,
+        \Amazon\Core\Logger\ExceptionLogger $exceptionLogger = null
     ) {
         parent::__construct($context);
         $this->simplePath = $simplePath;
         $this->scopeConfig = $scopeConfig;
         $this->jsonResultFactory = $jsonResultFactory;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
     }
 
     /**
@@ -53,19 +62,24 @@ class Poll extends System
      */
     public function execute()
     {
-        // Keypair is destroyed when credentials are saved
-        $shouldRefresh = !($this->scopeConfig->getValue(
-            \Amazon\Core\Model\Config\SimplePath::CONFIG_XML_PATH_PUBLIC_KEY,
-            'default',
-            0
-        ));
+        try {
+            // Keypair is destroyed when credentials are saved
+            $shouldRefresh = !($this->scopeConfig->getValue(
+                \Amazon\Core\Model\Config\SimplePath::CONFIG_XML_PATH_PUBLIC_KEY,
+                'default',
+                0
+            ));
 
-        if ($shouldRefresh) {
-            $this->simplePath->autoEnable();
-        }
+            if ($shouldRefresh) {
+                $this->simplePath->autoEnable();
+            }
 
-        $result = $this->jsonResultFactory->create();
-        $result->setData((int)$shouldRefresh);
-        return $result;
+            $result = $this->jsonResultFactory->create();
+            $result->setData((int)$shouldRefresh);
+            return $result;
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 }

--- a/Controller/Simplepath/Listener.php
+++ b/Controller/Simplepath/Listener.php
@@ -16,6 +16,9 @@
 
 namespace Amazon\Core\Controller\Simplepath;
 
+use Amazon\Core\Logger\ExceptionLogger;
+use Magento\Framework\App\ObjectManager;
+
 /**
  * Class Listener
  * Retrieves entered keys from Amazon Pay popup
@@ -29,23 +32,28 @@ class Listener extends \Magento\Framework\App\Action\Action
     // @var \Amazon\Core\Model\Config\SimplePath
     private $simplepath;
 
+    // @var \Amazon\Core\Logger\ExceptionLogger
+    private $exceptionLogger;
+
     /**
      * Listener constructor.
      * @param \Magento\Framework\App\Action\Context $context
      * @param \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory
      * @param \Amazon\Core\Model\Config\SimplePath $simplepath
      * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
+     * @param \Amazon\Core\Logger\ExceptionLogger $exceptionLogger
      */
     public function __construct(
         \Magento\Framework\App\Action\Context $context,
         \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory,
         \Amazon\Core\Model\Config\SimplePath $simplepath,
-        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
-    )
-    {
+        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
+        ExceptionLogger $exceptionLogger = null
+    ) {
         $this->simplepath = $simplepath;
         $this->jsonResultFactory = $jsonResultFactory;
         $this->scopeConfig = $scopeConfig;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
         parent::__construct($context);
     }
 
@@ -54,41 +62,48 @@ class Listener extends \Magento\Framework\App\Action\Action
      */
     public function execute()
     {
-        $url = parse_url($this->simplepath->getEndpointRegister());
-        $host = trim(preg_replace("/\r|\n/", "", $url['host']));
-        $this->getResponse()->setHeader('Access-Control-Allow-Origin', 'https://' . $host);
-        $this->getResponse()->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
-        $this->getResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, X-CSRF-Token');
+        try {
+            $host = parse_url($this->getRequest()->getHeader('Origin'))['host'];
+            if(in_array($host, $this->simplepath->getListenerOrigins())) {
+                $this->getResponse()->setHeader('Access-Control-Allow-Origin', 'https://' . $host);
+            }
+            $this->getResponse()->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
+            $this->getResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, X-CSRF-Token');
+            $this->getResponse()->setHeader('Vary', 'Origin');
 
-        $payload = $this->_request->getParam('payload');
+            $payload = $this->_request->getParam('payload');
 
-        $result = $this->jsonResultFactory->create();
+            $result = $this->jsonResultFactory->create();
 
-        $return = ['result' => 'error', 'message' => 'Empty payload'];
+            $return = ['result' => 'error', 'message' => 'Empty payload'];
 
-        try {
-            if (strpos($payload, 'encryptedKey') === false) {
-                $return = ['result' => 'error', 'message' => 'Invalid payload: ' . $payload];
-            } else if ($payload) {
-                $json = $this->simplepath->decryptPayload($payload, false);
+            try {
+                if (strpos($payload, 'encryptedKey') === false) {
+                    $return = ['result' => 'error', 'message' => 'Invalid payload: ' . $payload];
+                } else if ($payload) {
+                    $json = $this->simplepath->decryptPayload($payload, false);
 
-                if ($json) {
-                    $return = ['result' => 'success'];
+                    if ($json) {
+                        $return = ['result' => 'success'];
+                    }
+                } else {
+                    $return = ['result' => 'error', 'message' => 'payload parameter not found.'];
                 }
-            } else {
-                $return = ['result' => 'error', 'message' => 'payload parameter not found.'];
+            } catch (\Exception $e) {
+                $return = ['result' => 'error', 'message' => $e->getMessage()];
             }
-        } catch (\Exception $e) {
-            $return = ['result' => 'error', 'message' => $e->getMessage()];
-        }
 
-        if ($this->_request->isPost() && (empty($return['result']) || $return['result'] == 'error')) {
-            $result->setHttpResponseCode(\Magento\Framework\Webapi\Exception::HTTP_BAD_REQUEST);
-        }
+            if ($this->_request->isPost() && (empty($return['result']) || $return['result'] == 'error')) {
+                $result->setHttpResponseCode(\Magento\Framework\Webapi\Exception::HTTP_BAD_REQUEST);
+            }
 
-        $result->setData($return);
+            $result->setData($return);
 
-        return $result;
+            return $result;
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 
     /**

--- a/Domain/AmazonAddressDecoratorDe.php
+++ b/Domain/AmazonAddressDecoratorDe.php
@@ -178,6 +178,6 @@ class AmazonAddressDecoratorDe implements AmazonAddressInterface
      */
     public function getLine($lineNumber)
     {
-        $this->amazonAddress->getLine($lineNumber);
+        return $this->amazonAddress->getLine($lineNumber);
     }
 }

--- a/Domain/AmazonAddressDecoratorJp.php
+++ b/Domain/AmazonAddressDecoratorJp.php
@@ -37,20 +37,13 @@ class AmazonAddressDecoratorJp implements AmazonAddressInterface
      */
     public function getLines()
     {
-        $line1 = (string) $this->amazonAddress->getLine(1);
-        $line2 = (string) $this->amazonAddress->getLine(2);
-        $line3 = (string) $this->amazonAddress->getLine(3);
-        $city = (string) $this->amazonAddress->getCity();
+        $city = $this->amazonAddress->getCity();
 
-        $lines = [];
-        if (empty($city)) {
-            $lines[] = trim($line1 . ' ' . $line2);
-        } else {
-            $lines[] = $line2;
-        }
-        $lines[] = $line3;
-
-        return $lines;
+        /*
+         * AmazonAddressDecoratorJp->getCity() returns address line 1 when city is empty.
+         * Omit line 1 from the street address in this case.
+         */
+        return array_slice($this->amazonAddress->getLines(), empty($city) ? 1 : 0);
     }
 
     /**
@@ -122,6 +115,10 @@ class AmazonAddressDecoratorJp implements AmazonAddressInterface
      */
     public function getLine($lineNumber)
     {
-        $this->amazonAddress->getLine($lineNumber);
+        $lines = $this->getLines();
+        if (isset($lines[$lineNumber-1])) {
+            return $lines[$lineNumber-1];
+        }
+        return null;
     }
 }

--- a/Domain/AmazonAddressFactory.php
+++ b/Domain/AmazonAddressFactory.php
@@ -23,10 +23,6 @@ use Magento\Framework\Escaper;
 
 class AmazonAddressFactory
 {
-    /**
-     * @var Escaper
-     */
-    private $escaper;
 
     /**
      * @var ObjectManagerInterface
@@ -48,7 +44,6 @@ class AmazonAddressFactory
      *
      * @param ObjectManagerInterface $objectManager
      * @param AmazonNameFactory $amazonNameFactory
-     * @param Escaper $escaper
      * @param array $addressDecoratorPool Per-country custom decorators of incoming address data.
      *                                         The key as an "ISO 3166-1 alpha-2" country code and
      *                                         the value as an FQCN of a child of AmazonAddress.
@@ -56,12 +51,10 @@ class AmazonAddressFactory
     public function __construct(
         ObjectManagerInterface $objectManager,
         AmazonNameFactory $amazonNameFactory,
-        Escaper $escaper,
         array $addressDecoratorPool = []
     ) {
         $this->objectManager = $objectManager;
         $this->amazonNameFactory = $amazonNameFactory;
-        $this->escaper = $escaper;
         $this->addressDecoratorPool = $addressDecoratorPool;
     }
 
@@ -76,21 +69,24 @@ class AmazonAddressFactory
         $address = $responseData['address'];
         $amazonName = $this->amazonNameFactory->create(
             [
-                'name' => $this->escaper->escapeHtml($address['Name']),
-                'country' => $this->escaper->escapeHtml($address['CountryCode'])]
+                'name' => $address['Name'],
+                'country' => $address['CountryCode']]
         );
 
         $data = [
-            AmazonAddressInterface::CITY => isset($address['City']) ? $this->escaper->escapeHtml($address['City']) : '',
-            AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $this->escaper->escapeHtml($address['PostalCode']) : '',
-            AmazonAddressInterface::COUNTRY_CODE => $this->escaper->escapeHtml($address['CountryCode']),
-            AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $this->escaper->escapeHtml($address['Phone']) : '',
-            AmazonAddressInterface::STATE_OR_REGION => isset($address['StateOrRegion']) ? $this->escaper->escapeHtml($address['StateOrRegion']) : '',
-            AmazonAddressInterface::FIRST_NAME => $this->escaper->escapeHtml($amazonName->getFirstName()),
-            AmazonAddressInterface::LAST_NAME => $this->escaper->escapeHtml($amazonName->getLastName()),
+            AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $address['PostalCode'] : '',
+            AmazonAddressInterface::COUNTRY_CODE => $address['CountryCode'],
+            AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $address['Phone'] : '',
+            AmazonAddressInterface::STATE_OR_REGION => isset($address['StateOrRegion']) ? $address['StateOrRegion'] : '',
+            AmazonAddressInterface::FIRST_NAME => $amazonName->getFirstName(),
+            AmazonAddressInterface::LAST_NAME => $amazonName->getLastName(),
             AmazonAddressInterface::LINES => $this->getLines($address)
         ];
 
+        if (isset($address['City'])) {
+            $data[AmazonAddressInterface::CITY] = $address['City'];
+        }
+
         $amazonAddress = $this->objectManager->create(AmazonAddress::class, ['data' => $data]);
 
         $countryCode = strtoupper($address['CountryCode']);
@@ -128,7 +124,7 @@ class AmazonAddressFactory
         $lines = [];
         for ($i = 1; $i <= 3; $i++) {
             if (isset($responseData['AddressLine' . $i]) && $responseData['AddressLine' . $i]) {
-                $lines[$i] = $this->escaper->escapeHtml($responseData['AddressLine' . $i]);
+                $lines[$i] = $responseData['AddressLine' . $i];
             }
         }
 

--- a/Exception/AmazonServiceUnavailableException.php
+++ b/Exception/AmazonServiceUnavailableException.php
@@ -15,9 +15,9 @@
  */
 namespace Amazon\Core\Exception;
 
-use Magento\Framework\Exception\RemoteServiceUnavailableException;
+use Magento\Framework\Exception\LocalizedException;
 
-class AmazonServiceUnavailableException extends RemoteServiceUnavailableException
+class AmazonServiceUnavailableException extends LocalizedException
 {
     const ERROR_MESSAGE = 'Amazon could not process your request.';
 

--- a/Helper/Data.php
+++ b/Helper/Data.php
@@ -23,6 +23,8 @@ use Magento\Store\Model\ScopeInterface;
 use Magento\Store\Model\StoreManagerInterface;
 use Magento\Framework\Module\ModuleListInterface;
 use Magento\Framework\Module\StatusFactory;
+use Magento\Framework\App\Cache\TypeListInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * @SuppressWarnings(PHPMD.ExcessivePublicCount)
@@ -57,6 +59,11 @@ class Data extends AbstractHelper
      */
     private $moduleStatusFactory;
 
+    /**
+     * @var TypeListInterface
+     */
+    private $cacheTypeList;
+
     /**
      * Data constructor.
      *
@@ -66,6 +73,7 @@ class Data extends AbstractHelper
      * @param StoreManagerInterface $storeManager
      * @param ClientIp $clientIpHelper
      * @param StatusFactory $moduleStatusFactory
+     * @param TypeListInterface $cacheTypeList
      */
     public function __construct(
         ModuleListInterface $moduleList,
@@ -73,7 +81,8 @@ class Data extends AbstractHelper
         EncryptorInterface $encryptor,
         StoreManagerInterface $storeManager,
         ClientIp $clientIpHelper,
-        StatusFactory $moduleStatusFactory
+        StatusFactory $moduleStatusFactory,
+        TypeListInterface $cacheTypeList = null
     )
     {
         parent::__construct($context);
@@ -82,6 +91,7 @@ class Data extends AbstractHelper
         $this->storeManager = $storeManager;
         $this->clientIpHelper = $clientIpHelper;
         $this->moduleStatusFactory = $moduleStatusFactory;
+        $this->cacheTypeList = $cacheTypeList ?: ObjectManager::getInstance()->get(TypeListInterface::class);
     }
 
     /*
@@ -316,6 +326,14 @@ class Data extends AbstractHelper
         );
     }
 
+    /*
+     * @return bool
+     */
+    public function isLwaDisabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return !$this->isLwaEnabled();
+    }
+
     /*
      * @return bool
      */
@@ -777,6 +795,7 @@ class Data extends AbstractHelper
         // Make sure all of them are disabled if any one of them is disabled.
         if ($isDisabled > 0 && $isDisabled != 3) {
             $this->moduleStatusFactory->create()->setIsEnabled(false, ['Amazon_Payment', 'Amazon_Login', 'Amazon_Core']);
+            $this->cacheTypeList->cleanType('config');
         }
     }
 }

--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,202 @@
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "{}"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright {yyyy} {name of copyright owner}
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+

--- /dev/null
+++ b/Logger/ExceptionLogger.php
@@ -0,0 +1,31 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Core\Logger;
+
+use Psr\Log\LoggerInterface;
+
+class ExceptionLogger
+{
+    private $logger;
+
+    public function __construct(LoggerInterface $logger) {
+        $this->logger = $logger;
+    }
+    public function logException(\Exception $e) {
+        $message = (string) $e;
+        $this->logger->addError($message);
+    }
+}

--- a/Model/Config/SimplePath.php
+++ b/Model/Config/SimplePath.php
@@ -166,6 +166,19 @@ class SimplePath
         return $this->getEndpointDomain() . 'register/getpublickey';
     }
 
+    /**
+     * Return listener origins
+     */
+    public function getListenerOrigins()
+    {
+        return [
+            'payments.amazon.com',
+            'payments-eu.amazon.com',
+            'sellercentral.amazon.com',
+            'sellercentral-europe.amazon.com'
+        ];
+    }
+
     /**
      * Generate and save RSA keys
      */

--- a/Observer/PaymentConfigSaveAfter.php
+++ b/Observer/PaymentConfigSaveAfter.php
@@ -60,11 +60,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      */
     private $request;
 
-    /**
-     * @var WriterInterface
-     */
-    private $configWriter;
-
     /**
      * PaymentConfigSaveAfter constructor.
      *
@@ -74,7 +69,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      * @param Data $amazonCoreHelper
      * @param ReinitableConfigInterface $config
      * @param RequestInterface $request
-     * @param WriterInterface $configWriter
      */
     public function __construct(
         ApiCredentialsValidatorFactory $apiCredentialsValidatorFactory,
@@ -82,8 +76,7 @@ class PaymentConfigSaveAfter implements ObserverInterface
         Json $jsonCredentials,
         Data $amazonCoreHelper,
         ReinitableConfigInterface $config,
-        RequestInterface $request,
-        WriterInterface $configWriter
+        RequestInterface $request
     ) {
         $this->apiCredentialsValidatorFactory = $apiCredentialsValidatorFactory;
         $this->messageManager                 = $messageManager;
@@ -91,7 +84,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
         $this->jsonCredentials                = $jsonCredentials;
         $this->appConfig                      = $config;
         $this->request                        = $request;
-        $this->configWriter                   = $configWriter;
     }
 
     /**
@@ -99,9 +91,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      */
     public function execute(Observer $observer)
     {
-        // Make sure address captures 3 lines to be compatible with AP
-        $this->configWriter->save('customer/address/street_lines', 3);
-
         if (!$this->request->getParam('amazon_test_creds')) {
             return;
         }

--- a/composer.json
+++ b/composer.json
@@ -2,23 +2,23 @@
   "name": "amzn/amazon-pay-and-login-with-amazon-core-module",
   "description": "Shared functionality for Amazon Pay and Login with Amazon modules",
   "type": "magento2-module",
-  "version": "2.1.1",
+  "version": "2.2.16",
   "license": [
     "Apache-2.0"
   ],
   "require": {
-    "php": "~7.1.3||~7.2.0",
-    "magento/framework": "101.0.*",
-    "magento/module-config": "101.0.*",
-    "magento/module-store": "^100.1",
-    "magento/module-developer": "100.2.*",
-    "magento/module-quote": "101.0.*",
-    "magento/module-catalog": "102.0.*",
-    "magento/module-customer": "^101.0",
-    "magento/module-checkout": "100.2.*",
-    "magento/module-backend": "100.2.*",
-    "magento/module-payment": "100.2.*",
-    "magento/module-paypal": "100.2.*",
+    "php": "~7.0.13|~7.1.0|~7.2.0",
+    "magento/framework": "*",
+    "magento/module-config": "*",
+    "magento/module-store": "*",
+    "magento/module-developer": "*",
+    "magento/module-quote": "*",
+    "magento/module-catalog": "*",
+    "magento/module-customer": "*",
+    "magento/module-checkout": "*",
+    "magento/module-backend": "*",
+    "magento/module-payment": "*",
+    "magento/module-paypal": "*",
     "amzn/amazon-pay-sdk-php": "^3.2.0"
   },
   "autoload": {

--- a/etc/config.xml
+++ b/etc/config.xml
@@ -33,5 +33,10 @@
                 <jp>https://static-fe.payments-amazon.com/OffAmazonPayments/jp/sandbox/lpa/js/Widgets.js?nomin</jp>
             </sandbox>
         </widget>
+        <customer>
+            <address>
+                <street_lines>3</street_lines>
+            </address>
+        </customer>
     </default>
 </config>

--- /dev/null
+++ b/etc/db_schema_whitelist.json
@@ -0,0 +1,32 @@
+{
+    "amazon_quote": {
+        "column": {
+            "entity_id": true,
+            "quote_id": true,
+            "amazon_order_reference_id": true,
+            "sandbox_simulation_reference": true,
+            "confirmed": true
+        },
+        "index": {
+            "AMAZON_QUOTE_QUOTE_ID": true
+        },
+        "constraint": {
+            "PRIMARY": true,
+            "AMAZON_QUOTE_QUOTE_ID_QUOTE_ENTITY_ID": true
+        }
+    },
+    "amazon_sales_order": {
+        "column": {
+            "entity_id": true,
+            "order_id": true,
+            "amazon_order_reference_id": true
+        },
+        "index": {
+            "AMAZON_SALES_ORDER_ORDER_ID": true
+        },
+        "constraint": {
+            "PRIMARY": true,
+            "AMAZON_SALES_ORDER_ORDER_ID_SALES_ORDER_ENTITY_ID": true
+        }
+    }
+}

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Core" setup_version="2.1.1">
+    <module name="Amazon_Core" setup_version="2.2.16">
         <sequence>
             <module name="Magento_Store"/>
             <module name="Magento_Customer"/>

--- a/view/adminhtml/templates/system/config/simplepath_admin.phtml
+++ b/view/adminhtml/templates/system/config/simplepath_admin.phtml
@@ -17,7 +17,7 @@
 -->
 <br/>
 <div data-mage-init='{
-        "Amazon_Core/js/simplepath": <?php echo /* @noEscape */ $block->getJsonConfig() ?> }'
+        "Amazon_Core/js/simplepath": <?php echo $block->escapeHtml($block->getJsonConfig()) ?> }'
     id="amazon_simplepath">
 
     <?php if (!$block->getCurrency()) : // SimplePath not supported ?>

--- a/view/adminhtml/web/js/simplepath.js
+++ b/view/adminhtml/web/js/simplepath.js
@@ -14,362 +14,366 @@
  */
 /*browser:true*/
 /*global define*/
-define([
-    'jquery',
-    'uiComponent',
-    'mage/translate',
-    'jquery/ui',
-    'jquery/validate'
-], function ($, Class, $t) {
-    'use strict';
-    var pollTimer, windowOpen = false;
-
-    return Class.extend({
-
-        defaults: {
-            $amazonFields: null,
-            $amazonCredentialJson: null,
-            $amazonSpBack: null,
-            $amazonMerchantId: null,
-            selector: 'amazon_payment',
-            $container: null,
-            pollInterval: 1500,
-            $form: null,
-        },
-
-        /**
-         * Set list of observable attributes
-         * @returns {exports.initObservable}
-         */
-        initObservable: function () {
-            var self = this;
-            self.$amazonSimplepath = $('#amazon_simplepath');
-            self.$amazonFields = $('#payment_' + self.getCountry() + '_' + self.selector + ' .form-list');
-            self.$amazonCredentialsHeader = $('#payment_' + self.getCountry() + '_' + self.selector
-                + '_credentials-head');
-            self.$amazonCredentialJson = $('#payment_' + self.getCountry() + '_' + self.selector
-                + '_credentials_credentials_json');
-            self.$amazonMerchantId = $('#payment_' + self.getCountry() + '_' + self.selector
-                + '_credentials_merchant_id').val();
-            self.$amazonSpBack = $('#amazon_simplepath_back');
-            self.$container = $('#amazon_simplepath');
-
-            if (self.$amazonMerchantId) {
-                self.hideAmazonConfig();
-            }
-            else {
-                self.showAmazonConfig();
-            }
-
-            if (!self.$form) {
-                self.generateSimplePathForm();
-            }
-
-            self._super();
-
-            self.initEventHandlers();
-
-            return self;
-        },
-
-        /**
-         * Init event handlers
-         */
-        initEventHandlers: function () {
-            var self = this;
-            self.$amazonSpBack.click(function () {
-                self.showAmazonConfig();
-                return false;
-            });
-
-            $('#simplepath-skip').click(function () {
-                self.hideAmazonConfig();
-                return false;
-            });
-
-            $('#simplepath_form').on('submit', function () {
-                self.setupWindowLaunch();
-            });
-
-            self.$amazonCredentialJson.on('input', function (e) {
-                self.updateCredentials(self);
-            });
-        },
-
-        /**
-         * Detects when a properly formatted JSON block is pasted into the Credentials JSON field and auto populates
-         * specified fields.
-         *
-         * @param self
-         */
-        updateCredentials: function (self) {
-            var elJson = self.$amazonCredentialJson.val();
-            var obj = null;
-            try {
-                obj = $.parseJSON($.trim(elJson));
-            }
-            catch (err) {
-                obj = null;
-                self.$amazonCredentialJson.val('').attr(
-                    'placeholder',
-                    $t('Invalid JSON credentials entered, please try again.')
-                ).focus();
-            }
-
-            if (obj && typeof obj === 'object') {
-                var success = true;
-                for (var prop in obj) {
-                    var item = $('#payment_' + self.getCountry() + '_amazon_payment_credentials_' + $.trim(prop));
-                    if (item && item.length) {
-                        $('#payment_' + self.getCountry() + '_amazon_payment_credentials_'
-                            + $.trim(prop)).val($.trim(obj[prop]));
+define(
+    [
+        'jquery',
+        'uiComponent',
+        'mage/translate',
+        'jquery/ui',
+        'jquery/validate'
+    ],
+    function ($, Class, $t) {
+        'use strict';
+        var pollTimer, windowOpen = false;
+
+        return Class.extend({
+
+                defaults: {
+                    $amazonFields: null,
+                    $amazonCredentialJson: null,
+                    $amazonSpBack: null,
+                    $amazonMerchantId: null,
+                    selector: 'amazon_payment',
+                    $container: null,
+                    pollInterval: 1500,
+                    $form: null,
+                },
+
+                /**
+                 * Set list of observable attributes
+                 * @returns {exports.initObservable}
+                 */
+                initObservable: function () {
+                    var self = this;
+                    self.$amazonSimplepath = $('#amazon_simplepath');
+                    self.$amazonFields = $('#payment_' + self.getCountry() + '_' + self.selector + ' .form-list');
+                    self.$amazonCredentialsHeader = $('#payment_' + self.getCountry() + '_' + self.selector
+                        + '_credentials-head');
+                    self.$amazonCredentialJson = $('#payment_' + self.getCountry() + '_' + self.selector
+                        + '_credentials_credentials_json');
+                    self.$amazonMerchantId = $('#payment_' + self.getCountry() + '_' + self.selector
+                        + '_credentials_merchant_id').val();
+                    self.$amazonSpBack = $('#amazon_simplepath_back');
+                    self.$container = $('#amazon_simplepath');
+
+                    if (self.$amazonMerchantId) {
+                        self.hideAmazonConfig();
                     }
                     else {
-                        success = false;
+                        self.showAmazonConfig();
                     }
-                }
 
-                if (success) {
-                    self.$amazonCredentialJson.val('').attr(
-                        'placeholder',
-                        $t('Credential fields successfully updated and being saved.')
-                    ).focus();
-                    $('#save').click();
-                }
-                else {
-                    self.$amazonCredentialJson.val('').attr(
-                        'placeholder',
-                        $t('One or more of your credential fields did not parse correctly. Please review your entry and try again.')
-                    ).focus();
-                }
-            }
-        },
-
-        /**
-         * Sets up Amazon merchant key popup and polls for data update upon user completion.
-         */
-        setupWindowLaunch: function () {
-            var self = this;
-            var heights = [660, 720, 810, 900];
-            var popupWidth = this.getCountry() !== 'us' ? 768 : 1050;
-            var popupHeight = heights[0];
-            for (var i in heights) {
-                popupHeight = (window.innerHeight >= heights[i]) ? heights[i] : popupHeight;
-            }
+                    if (!self.$form) {
+                        self.generateSimplePathForm();
+                    }
 
-            self.launchPopup(self.amazonUrl, popupWidth, popupHeight);
+                    self._super();
 
-            // flags that popup is open and poll timer can proceed
-            windowOpen = true;
+                    self.initEventHandlers();
 
-            // begin polling for feedback
-            pollTimer = setTimeout(self.pollForKeys(self), self.pollInterval);
+                    return self;
+                },
 
-            // Save JSON
-            $('#save-json').click(function (e) {
-                e.stop();
-                var json = $('#json-import').value;
-                if (!json || !json.isJSON()) {
-                    return;
-                }
-                elJson.value = json;
-                $('#save').click();
-            });
-
-            // Autoset payment region (for EU/UK)
-            var region = self.region;
-            if (self.region.indexOf('eu') != -1) {
-                region = 'de';
-            }
-            var elCheckDefault = $('#payment_' + self.getCountry()
-                + '_amazon_payment_credentials_payment_region_inherit:checked');
-            if (elCheckDefault && elCheckDefault.length) {
-                elCheckDefault[0].click();
-            }
-            var elRegion = $('payment_' + self.getCountry() + '_amazon_payment_credentials_payment_region');
-            if (elRegion) {
-                elRegion.value = region;
-            }
-        },
-
-        /**
-         * Perform Ajax request looking for new keys.
-         */
-        pollForKeys: function (self) {
-            clearTimeout(pollTimer);
-            if (windowOpen) {
-                $.ajax({
-                    url: self.pollUrl,
-                    data: {},
-                    type: 'GET',
-                    cache: true,
-                    dataType: 'json',
-                    context: this,
-
-                    /**
-                     * Response handler
-                     * @param {Object} response
-                     */
-                    success: function (response) {
-                        // poll controller returns a 0 if invalid and a 1 if valid
-                        if (response) {
-                            $('#amazon_reload').show();
-                            document.location.replace(document.location + '#payment_amazon_payments-head');
-                            location.reload();
+                /**
+                 * Init event handlers
+                 */
+                initEventHandlers: function () {
+                    var self = this;
+                    self.$amazonSpBack.click(function () {
+                        self.showAmazonConfig();
+                        return false;
+                    });
+
+                    $('#simplepath-skip').click(function () {
+                        self.hideAmazonConfig();
+                        return false;
+                    });
+
+                    $('#simplepath_form').on('submit', function () {
+                        self.setupWindowLaunch();
+                    });
+
+                    self.$amazonCredentialJson.on('input', function (e) {
+                        self.updateCredentials(self);
+                    });
+                },
+
+                /**
+                 * Detects when a properly formatted JSON block is pasted into the Credentials JSON field and auto populates
+                 * specified fields.
+                 *
+                 * @param self
+                 */
+                updateCredentials: function (self) {
+                    var elJson = self.$amazonCredentialJson.val();
+                    var obj = null;
+                    try {
+                        obj = $.parseJSON($.trim(elJson));
+                    }
+                    catch (err) {
+                        obj = null;
+                        self.$amazonCredentialJson.val('').attr(
+                            'placeholder',
+                            $t('Invalid JSON credentials entered, please try again.')
+                        ).focus();
+                    }
+
+                    if (obj && typeof obj === 'object') {
+                        var success = true;
+                        for (var prop in obj) {
+                            var item = $('#payment_' + self.getCountry() + '_amazon_payment_credentials_' + $.trim(prop));
+                            if (item && item.length) {
+                                $('#payment_' + self.getCountry() + '_amazon_payment_credentials_'
+                                    + $.trim(prop)).val($.trim(obj[prop]));
+                            }
+                            else {
+                                success = false;
+                            }
+                        }
+
+                        if (success) {
+                            self.$amazonCredentialJson.val('').attr(
+                                'placeholder',
+                                $t('Credential fields successfully updated and being saved.')
+                            ).focus();
+                            $('#save').click();
                         }
                         else {
-                            pollTimer = setTimeout(self.pollForKeys(self), self.pollInterval);
+                            self.$amazonCredentialJson.val('').attr(
+                                'placeholder',
+                                $t('One or more of your credential fields did not parse correctly. Please review your entry and try again.')
+                            ).focus();
                         }
                     }
-                });
-            }
-        },
-
-        /**
-         * Sets up dynamic form for capturing popup/form input for simple path setup.
-         */
-        generateSimplePathForm: function () {
-            this.$form = new Element('form', {
-                method: 'post',
-                action: this.amazonUrl,
-                id: 'simplepath_form',
-                target: 'simplepath',
-                novalidate: 'novalidate',
-            });
-
-            this.$container.wrap(this.$form);
-
-            // Convert formParams JSON to hidden inputs
-            for (var key in this.formParams) {
-                if (typeof this.formParams[key] === 'object' || typeof this.formParams[key] === 'array') {
-                    for (var i in this.formParams[key]) {
-                        if (typeof this.formParams[key][i] !== 'function') {
+                },
+
+                /**
+                 * Sets up Amazon merchant key popup and polls for data update upon user completion.
+                 */
+                setupWindowLaunch: function () {
+                    var self = this;
+                    var heights = [660, 720, 810, 900];
+                    var popupWidth = this.getCountry() !== 'us' ? 768 : 1050;
+                    var popupHeight = heights[0];
+                    for (var i in heights) {
+                        popupHeight = (window.innerHeight >= heights[i]) ? heights[i] : popupHeight;
+                    }
+
+                    self.launchPopup(self.amazonUrl, popupWidth, popupHeight);
+
+                    // flags that popup is open and poll timer can proceed
+                    windowOpen = true;
+
+                    // begin polling for feedback
+                    pollTimer = setTimeout(self.pollForKeys(self), self.pollInterval);
+
+                    // Save JSON
+                    $('#save-json').click(function (e) {
+                        e.stop();
+                        var json = $('#json-import').value;
+                        if (!json || !json.isJSON()) {
+                            return;
+                        }
+                        elJson.value = json;
+                        $('#save').click();
+                    });
+
+                    // Autoset payment region (for EU/UK)
+                    var region = self.region;
+                    if (self.region.indexOf('eu') != -1) {
+                        region = 'de';
+                    }
+                    var elCheckDefault = $('#payment_' + self.getCountry()
+                        + '_amazon_payment_credentials_payment_region_inherit:checked');
+                    if (elCheckDefault && elCheckDefault.length) {
+                        elCheckDefault[0].click();
+                    }
+                    var elRegion = $('payment_' + self.getCountry() + '_amazon_payment_credentials_payment_region');
+                    if (elRegion) {
+                        elRegion.value = region;
+                    }
+                },
+
+                /**
+                 * Perform Ajax request looking for new keys.
+                 */
+                pollForKeys: function (self) {
+                    clearTimeout(pollTimer);
+                    if (windowOpen) {
+                        $.ajax({
+                            url: self.pollUrl,
+                            data: {},
+                            type: 'GET',
+                            cache: true,
+                            dataType: 'json',
+                            context: this,
+
+                            /**
+                             * Response handler
+                             * @param {Object} response
+                             */
+                            success: function (response) {
+                                // poll controller returns a 0 if invalid and a 1 if valid
+                                if (response) {
+                                    $('#amazon_reload').show();
+                                    document.location.replace(document.location + '#payment_amazon_payments-head');
+                                    location.reload();
+                                }
+                                else {
+                                    pollTimer = setTimeout(self.pollForKeys(self), self.pollInterval);
+                                }
+                            }
+                        });
+                    }
+                },
+
+                /**
+                 * Sets up dynamic form for capturing popup/form input for simple path setup.
+                 */
+                generateSimplePathForm: function () {
+                    this.$form = new Element('form', {
+                        method: 'post',
+                        action: this.amazonUrl,
+                        id: 'simplepath_form',
+                        target: 'simplepath',
+                        novalidate: 'novalidate',
+                    });
+
+                    this.$container.wrap(this.$form);
+
+                    // Convert formParams JSON to hidden inputs
+                    for (var key in this.formParams) {
+                        if (typeof this.formParams[key] === 'object' || typeof this.formParams[key] === 'array') {
+                            for (var i in this.formParams[key]) {
+                                if (typeof this.formParams[key][i] !== 'function') {
+                                    var element = new Element('input', {
+                                        type: 'hidden',
+                                        name: key,
+                                        value: this.formParams[key][i],
+                                        novalidate: 'novalidate'
+                                    });
+                                    $(element).appendTo($("#simplepath_form"));
+                                }
+                            }
+                        } else {
                             var element = new Element('input', {
                                 type: 'hidden',
                                 name: key,
-                                value: this.formParams[key][i],
-                                novalidate: 'novalidate'
+                                novalidate: 'novalidate',
+                                value: this.formParams[key]
                             });
                             $(element).appendTo($("#simplepath_form"));
                         }
                     }
-                } else {
-                    var element = new Element('input', {
-                        type: 'hidden',
-                        name: key,
-                        novalidate: 'novalidate',
-                        value: this.formParams[key]
-                    });
-                    $(element).appendTo($("#simplepath_form"));
-                }
-            }
 
-            // unable to use this.form, had to resort to direct call
-            $('#simplepath_form').validate({});
-        },
-
-        /**
-         * display amazon simple path config section
-         */
-        showAmazonConfig: function () {
-            this.$amazonSimplepath.show();
-            this.$amazonSpBack.hide();
-            if (this.$amazonCredentialsHeader.hasClass('open')) {
-                this.$amazonCredentialsHeader.click();
-            }
-        },
-
-        /**
-         * hide amazon simple path config.
-         */
-        hideAmazonConfig: function () {
-            this.$amazonSimplepath.hide();
-            this.$amazonSpBack.show();
-            if (!this.$amazonCredentialsHeader.hasClass('open')) {
-                this.$amazonCredentialsHeader.click();
-            }
-        },
-
-        /**
-         * Get payment code
-         * @returns {String}
-         */
-        getCountry: function () {
-            return this.co.toLowerCase();
-        },
-
-        /**
-         * Generate popup window for simple path process
-         * @param url
-         * @param requestedWidth
-         * @param requestedHeight
-         */
-        launchPopup: function (url, requestedWidth, requestedHeight) {
-            var self = this;
-            var leftOffset = this.getLeftOffset(requestedWidth),
-                topOffset = this.getTopOffset(requestedHeight),
-                newWindow = window.open(url, 'simplepath', 'scrollbars=yes, width=' + requestedWidth + ', height=' +
-                    requestedHeight + ', top=' + topOffset + ', left=' + leftOffset);
-
-            if (window.focus) {
-                newWindow.focus();
-            }
+                    // unable to use this.form, had to resort to direct call
+                    $('#simplepath_form').validate({});
+                },
+
+                /**
+                 * display amazon simple path config section
+                 */
+                showAmazonConfig: function () {
+                    this.$amazonSimplepath.show();
+                    this.$amazonSpBack.hide();
+                    if (this.$amazonCredentialsHeader.hasClass('open')) {
+                        this.$amazonCredentialsHeader.click();
+                    }
+                },
+
+                /**
+                 * hide amazon simple path config.
+                 */
+                hideAmazonConfig: function () {
+                    this.$amazonSimplepath.hide();
+                    this.$amazonSpBack.show();
+                    if (!this.$amazonCredentialsHeader.hasClass('open')) {
+                        this.$amazonCredentialsHeader.click();
+                    }
+                },
+
+                /**
+                 * Get payment code
+                 * @returns {String}
+                 */
+                getCountry: function () {
+                    return this.co.toLowerCase();
+                },
+
+                /**
+                 * Generate popup window for simple path process
+                 * @param url
+                 * @param requestedWidth
+                 * @param requestedHeight
+                 */
+                launchPopup: function (url, requestedWidth, requestedHeight) {
+                    var self = this;
+                    var leftOffset = this.getLeftOffset(requestedWidth),
+                        topOffset = this.getTopOffset(requestedHeight),
+                        newWindow = window.open(url, 'simplepath', 'scrollbars=yes, width=' + requestedWidth + ', height=' +
+                            requestedHeight + ', top=' + topOffset + ', left=' + leftOffset);
+
+                    if (window.focus) {
+                        newWindow.focus();
+                    }
 
-            // Set interval to check when this popup window is closed so timeout can be suspended.
-            var winTimer = window.setInterval(function () {
-                if (newWindow.closed !== false) {
-                    window.clearInterval(winTimer);
-                    windowOpen = false;
+                    // Set interval to check when this popup window is closed so timeout can be suspended.
+                    var winTimer = window.setInterval(function () {
+                        if (newWindow.closed !== false) {
+                            window.clearInterval(winTimer);
+                            windowOpen = false;
+                        }
+                    });
+                },
+
+                /**
+                 * Determine left offset for popup window
+                 * @param requestedWidth
+                 * @returns {number}
+                 */
+                getLeftOffset: function (requestedWidth) {
+                    var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;
+                    return ((this.windowWidth() / 2) - (requestedWidth / 2)) + dualScreenLeft;
+                },
+
+                /**
+                 * Determine top offset for popup window
+                 * @param requestedHeight
+                 * @returns {number}
+                 */
+                getTopOffset: function (requestedHeight) {
+                    var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;
+                    return ((this.windowHeight() / 2) - (requestedHeight / 2)) + dualScreenTop;
+                },
+
+                /**
+                 * Determine width of popup window
+                 * @returns {number}
+                 */
+                windowWidth: function () {
+                    if (window.innerWidth) {
+                        return window.innerWidth;
+                    } else if (document.documentElement.clientWidth) {
+                        return document.documentElement.clientWidth;
+                    } else {
+                        return screen.width;
+                    }
+                },
+
+                /**
+                 * Determine window height of popup
+                 * @returns {number}
+                 */
+                windowHeight: function () {
+                    if (window.innerHeight) {
+                        return window.innerHeight;
+                    } else if (document.documentElement.clientHeight) {
+                        return document.documentElement.clientHeight;
+                    } else {
+                        return screen.height;
+                    }
                 }
-            });
-        },
-
-        /**
-         * Determine left offset for popup window
-         * @param requestedWidth
-         * @returns {number}
-         */
-        getLeftOffset: function (requestedWidth) {
-            var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;
-            return ((this.windowWidth() / 2) - (requestedWidth / 2)) + dualScreenLeft;
-        },
-
-        /**
-         * Determine top offset for popup window
-         * @param requestedHeight
-         * @returns {number}
-         */
-        getTopOffset: function (requestedHeight) {
-            var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;
-            return ((this.windowHeight() / 2) - (requestedHeight / 2)) + dualScreenTop;
-        },
-
-        /**
-         * Determine width of popup window
-         * @returns {number}
-         */
-        windowWidth: function () {
-            if (window.innerWidth) {
-                return window.innerWidth;
-            } else if (document.documentElement.clientWidth) {
-                return document.documentElement.clientWidth;
-            } else {
-                return screen.width;
-            }
-        },
-
-        /**
-         * Determine window height of popup
-         * @returns {number}
-         */
-        windowHeight: function () {
-            if (window.innerHeight) {
-                return window.innerHeight;
-            } else if (document.documentElement.clientHeight) {
-                return document.documentElement.clientHeight;
-            } else {
-                return screen.height;
             }
-        }
-    });
-});
\ No newline at end of file
+        );
+    }
+);

