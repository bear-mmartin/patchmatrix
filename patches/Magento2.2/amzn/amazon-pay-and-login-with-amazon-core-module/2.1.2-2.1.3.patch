--- a/Domain/AmazonAddressDecoratorDe.php
+++ b/Domain/AmazonAddressDecoratorDe.php
@@ -178,6 +178,6 @@ class AmazonAddressDecoratorDe implements AmazonAddressInterface
      */
     public function getLine($lineNumber)
     {
-        $this->amazonAddress->getLine($lineNumber);
+        return $this->amazonAddress->getLine($lineNumber);
     }
 }

--- a/Domain/AmazonAddressDecoratorJp.php
+++ b/Domain/AmazonAddressDecoratorJp.php
@@ -37,20 +37,13 @@ class AmazonAddressDecoratorJp implements AmazonAddressInterface
      */
     public function getLines()
     {
-        $line1 = (string) $this->amazonAddress->getLine(1);
-        $line2 = (string) $this->amazonAddress->getLine(2);
-        $line3 = (string) $this->amazonAddress->getLine(3);
-        $city = (string) $this->amazonAddress->getCity();
+        $city = $this->amazonAddress->getCity();
 
-        $lines = [];
-        if (empty($city)) {
-            $lines[] = trim($line1 . ' ' . $line2);
-        } else {
-            $lines[] = $line2;
-        }
-        $lines[] = $line3;
-
-        return $lines;
+        /*
+         * AmazonAddressDecoratorJp->getCity() returns address line 1 when city is empty.
+         * Omit line 1 from the street address in this case.
+         */
+        return array_slice($this->amazonAddress->getLines(), empty($city) ? 1 : 0);
     }
 
     /**
@@ -122,6 +115,10 @@ class AmazonAddressDecoratorJp implements AmazonAddressInterface
      */
     public function getLine($lineNumber)
     {
-        $this->amazonAddress->getLine($lineNumber);
+        $lines = $this->getLines();
+        if (isset($lines[$lineNumber-1])) {
+            return $lines[$lineNumber-1];
+        }
+        return null;
     }
 }

--- a/Domain/AmazonAddressFactory.php
+++ b/Domain/AmazonAddressFactory.php
@@ -81,7 +81,6 @@ class AmazonAddressFactory
         );
 
         $data = [
-            AmazonAddressInterface::CITY => isset($address['City']) ? $this->escaper->escapeHtml($address['City']) : '',
             AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $this->escaper->escapeHtml($address['PostalCode']) : '',
             AmazonAddressInterface::COUNTRY_CODE => $this->escaper->escapeHtml($address['CountryCode']),
             AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $this->escaper->escapeHtml($address['Phone']) : '',
@@ -91,6 +90,10 @@ class AmazonAddressFactory
             AmazonAddressInterface::LINES => $this->getLines($address)
         ];
 
+        if (isset($address['City'])) {
+            $data[AmazonAddressInterface::CITY] = $this->escaper->escapeHtml($address['City']);
+        }
+
         $amazonAddress = $this->objectManager->create(AmazonAddress::class, ['data' => $data]);
 
         $countryCode = strtoupper($address['CountryCode']);

--- a/Observer/PaymentConfigSaveAfter.php
+++ b/Observer/PaymentConfigSaveAfter.php
@@ -60,11 +60,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      */
     private $request;
 
-    /**
-     * @var WriterInterface
-     */
-    private $configWriter;
-
     /**
      * PaymentConfigSaveAfter constructor.
      *
@@ -74,7 +69,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      * @param Data $amazonCoreHelper
      * @param ReinitableConfigInterface $config
      * @param RequestInterface $request
-     * @param WriterInterface $configWriter
      */
     public function __construct(
         ApiCredentialsValidatorFactory $apiCredentialsValidatorFactory,
@@ -82,8 +76,7 @@ class PaymentConfigSaveAfter implements ObserverInterface
         Json $jsonCredentials,
         Data $amazonCoreHelper,
         ReinitableConfigInterface $config,
-        RequestInterface $request,
-        WriterInterface $configWriter
+        RequestInterface $request
     ) {
         $this->apiCredentialsValidatorFactory = $apiCredentialsValidatorFactory;
         $this->messageManager                 = $messageManager;
@@ -91,7 +84,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
         $this->jsonCredentials                = $jsonCredentials;
         $this->appConfig                      = $config;
         $this->request                        = $request;
-        $this->configWriter                   = $configWriter;
     }
 
     /**
@@ -99,9 +91,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      */
     public function execute(Observer $observer)
     {
-        // Make sure address captures 3 lines to be compatible with AP
-        $this->configWriter->save('customer/address/street_lines', 3);
-
         if (!$this->request->getParam('amazon_test_creds')) {
             return;
         }

--- a/composer.json
+++ b/composer.json
@@ -2,7 +2,7 @@
   "name": "amzn/amazon-pay-and-login-with-amazon-core-module",
   "description": "Shared functionality for Amazon Pay and Login with Amazon modules",
   "type": "magento2-module",
-  "version": "2.1.2",
+  "version": "2.1.4",
   "license": [
     "Apache-2.0"
   ],

--- a/etc/config.xml
+++ b/etc/config.xml
@@ -33,5 +33,10 @@
                 <jp>https://static-fe.payments-amazon.com/OffAmazonPayments/jp/sandbox/lpa/js/Widgets.js?nomin</jp>
             </sandbox>
         </widget>
+        <customer>
+            <address>
+                <street_lines>3</street_lines>
+            </address>
+        </customer>
     </default>
 </config>

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Core" setup_version="2.1.2">
+    <module name="Amazon_Core" setup_version="2.1.4">
         <sequence>
             <module name="Magento_Store"/>
             <module name="Magento_Customer"/>

