--- a/Controller/Login/Guest.php
+++ b/Controller/Login/Guest.php
@@ -77,8 +77,7 @@ class Guest extends Action
         Session $session,
         ClientFactoryInterface $clientFactory,
         LoggerInterface $logger
-    )
-    {
+    ) {
         $this->amazonCoreHelper = $amazonCoreHelper;
         $this->customerUrl = $customerUrl;
         $this->accessTokenRequestValidator = $accessTokenRequestValidator;

--- /dev/null
+++ b/Controller/Logout/Index.php
@@ -0,0 +1,51 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Login\Controller\Logout;
+
+use Magento\Framework\App\Action\Context;
+use Magento\Framework\Controller\Result\JsonFactory;
+use Amazon\Login\Helper\Session;
+
+class Index extends \Magento\Framework\App\Action\Action
+{
+    /**
+     * @var JsonFactory
+     */
+    private $jsonFactory;
+
+    /**
+     * @var Session
+     */
+    private $sessionHelper;
+
+    /**
+     * @param Context     $context
+     * @param JsonFactory $jsonFactory
+     * @param Session     $sessionHelper
+     */
+    public function __construct(Context $context, JsonFactory $jsonFactory, Session $sessionHelper)
+    {
+        parent::__construct($context);
+        $this->jsonFactory   = $jsonFactory;
+        $this->sessionHelper = $sessionHelper;
+    }
+
+    public function execute()
+    {
+        $this->sessionHelper->setIsAmazonLoggedIn(false);
+        return $this->jsonFactory->create();
+    }
+}

--- a/Helper/Session.php
+++ b/Helper/Session.php
@@ -62,8 +62,9 @@ class Session
      */
     public function login(CustomerInterface $customerData)
     {
+        $this->dispatchAuthenticationEvent();
+
         if ($customerData->getId() != $this->session->getId() || !$this->session->isLoggedIn()) {
-            $this->dispatchAuthenticationEvent();
             $this->session->setCustomerDataAsLoggedIn($customerData);
             $this->session->regenerateId();
             $this->checkoutSession->loadCustomerQuote();
@@ -123,6 +124,28 @@ class Session
         return $this->session->isLoggedIn();
     }
 
+    /**
+     * Check if user is logged in to Amazon
+     *
+     * @return bool
+     */
+    public function isAmazonLoggedIn()
+    {
+        return $this->session->getIsAmazonLoggedIn();
+    }
+
+    /**
+     * @return void
+     */
+    public function setIsAmazonLoggedIn($isLoggedIn)
+    {
+        if ($isLoggedIn) {
+            $this->session->setIsAmazonLoggedIn(true);
+        } else {
+            $this->session->unsIsAmazonLoggedIn();
+        }
+    }
+
     /**
      * @param AmazonCustomerInterface $amazonCustomer
      * @return void

--- a/Observer/ClearAmazonCustomer.php
+++ b/Observer/AmazonCustomerAuthenticated.php
@@ -19,7 +19,7 @@ use Amazon\Login\Helper\Session as SessionHelper;
 use Magento\Framework\Event\Observer;
 use Magento\Framework\Event\ObserverInterface;
 
-class ClearAmazonCustomer implements ObserverInterface
+class AmazonCustomerAuthenticated implements ObserverInterface
 {
     /**
      * @var SessionHelper
@@ -39,6 +39,7 @@ class ClearAmazonCustomer implements ObserverInterface
      */
     public function execute(Observer $observer)
     {
+        $this->sessionHelper->setIsAmazonLoggedIn(true);
         $this->sessionHelper->clearAmazonCustomer();
     }
 }

--- a/composer.json
+++ b/composer.json
@@ -2,17 +2,18 @@
   "name": "amzn/login-with-amazon-module",
   "description": "Login with Amazon module",
   "type": "magento2-module",
-  "version": "3.0.0",
+  "version": "3.2.6",
   "license": [
     "Apache-2.0"
   ],
   "require": {
     "php": "~7.1.3||~7.2.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.0.0",
-    "magento/module-customer": "*",
-    "magento/module-store": "*",
-    "magento/module-eav": "*",
-    "magento/module-checkout": "*",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.2.6",
+    "magento/framework": "^102",
+    "magento/module-customer": "^102",
+    "magento/module-store": "^101",
+    "magento/module-eav": "^102",
+    "magento/module-checkout": "^100.3",
     "magento/module-checkout-agreements": "*"
 
   },

--- a/etc/events.xml
+++ b/etc/events.xml
@@ -17,7 +17,7 @@
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Event/etc/events.xsd">
     <event name="amazon_customer_authenticated">
-        <observer name="clear_amazon_customer" instance="Amazon\Login\Observer\ClearAmazonCustomer" />
+        <observer name="amazon_login_customer_authenticated" instance="Amazon\Login\Observer\AmazonCustomerAuthenticated" />
     </event>
     <event name="amazon_login_authorize_error">
         <observer name="amazon_login_set_cookie_on_authorize_error" instance="Amazon\Login\Observer\SetAuthorizeErrorCookie" />

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Login" setup_version="3.0.0">
+    <module name="Amazon_Login" setup_version="3.2.6">
         <sequence>
             <module name="Amazon_Core"/>
         </sequence>

--- a/view/frontend/web/js/amazon-redirect.js
+++ b/view/frontend/web/js/amazon-redirect.js
@@ -18,10 +18,11 @@ define([
     'amazonCore',
     'amazonPaymentConfig',
     'amazonCsrf',
+    'Magento_Customer/js/customer-data',
     'mage/loader',
     'jquery/ui',
     'mage/cookies'
-], function ($, amazonCore, amazonPaymentConfig, amazonCsrf) {
+], function ($, amazonCore, amazonPaymentConfig, amazonCsrf, customerData) {
     'use strict';
 
     var self;
@@ -49,8 +50,18 @@ define([
                 amazonCore.verifyAmazonLoggedIn().then(function (loggedIn) {
                     if (loggedIn) {
                         self.redirect();
+                    } else {
+                        window.location = amazonPaymentConfig.getValue('customerLoginPageUrl');
                     }
-                }, 0);
+                }, function(error) {
+                    $('body').trigger('processStop');
+                    customerData.set('messages', {
+                        messages: [{
+                            type: 'error',
+                            text: error
+                        }]
+                    });
+                });
             }, this);
         },
 

--- a/view/frontend/web/js/view/login-button-wrapper.js
+++ b/view/frontend/web/js/view/login-button-wrapper.js
@@ -13,20 +13,12 @@
  * permissions and limitations under the License.
  */
 
-var registry = require('uiRegistry'),
-    amazonPayment = registry.get('amazonPayment');
-
-if (amazonPayment !== undefined && amazonPayment.allowAmLoginLoading === true) {
-    define(['require', 'Amazon_Login/js/view/login-button'], function (require) {
-        'use strict';
-
-        return require('Amazon_Login/js/view/login-button');
-    });
-} else {
-    define(['require', 'uiComponent'], function (require) {
-        'use strict';
-
-        return require('uiComponent');
-    });
-}
+define(['uiRegistry', 'Amazon_Login/js/view/login-button', 'uiComponent'], function(registry, login, component) {
+    'use strict';
+    var amazonPayment = registry.get('amazonPayment');
 
+    if (amazonPayment !== undefined && amazonPayment.allowAmLoginLoading === true) {
+        return login;
+    }
+    return component;
+});

