--- a/Block/Minicart/Button.php
+++ b/Block/Minicart/Button.php
@@ -15,7 +15,6 @@
  */
 namespace Amazon\Payment\Block\Minicart;
 
-
 use Magento\Checkout\Model\Session;
 use Amazon\Payment\Helper\Data;
 use Amazon\Core\Helper\Data as AmazonCoreHelper;

--- a/Block/Widget/ResetPassword.php
+++ b/Block/Widget/ResetPassword.php
@@ -48,7 +48,8 @@ class ResetPassword extends Template
         return $this;
     }
 
-    public function displayAmazonInfo() {
+    public function displayAmazonInfo()
+    {
         $id = $this->session->getCustomer()->getId();
 
         $amazon = $this->customerLink->get($id);
@@ -60,10 +61,10 @@ class ResetPassword extends Template
         return false;
     }
 
-    public function getLink() {
+    public function getLink()
+    {
         $url = $this->urlModel->getUrl('customer/account/forgotpassword');
 
         return $url;
     }
-
-}
\ No newline at end of file
+}

--- /dev/null
+++ b/Controller/Payment/CompleteCheckout.php
@@ -0,0 +1,120 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Controller\Payment;
+
+use Amazon\Core\Model\AmazonConfig;
+use Amazon\Core\Exception\AmazonWebapiException;
+use Magento\Framework\App\Action\Action;
+use Magento\Framework\App\Action\Context;
+use Magento\Quote\Api\CartManagementInterface;
+use Magento\Quote\Api\GuestCartManagementInterface;
+use Magento\Checkout\Model\Session as CheckoutSession;
+use Magento\Customer\Model\Session;
+use Magento\Framework\View\Result\PageFactory;
+use \Magento\Framework\Message\ManagerInterface as MessageManager;
+
+/**
+ * Class CompleteCheckout
+ *
+ * @package Amazon\Payment\Controller\Payment
+ */
+class CompleteCheckout extends Action
+{
+
+    /**
+     * @var AmazonConfig
+     */
+    private $amazonConfig;
+
+    /**
+     * @var CheckoutSession
+     */
+    private $checkoutSession;
+
+    /**
+     * @var CartManagementInterface
+     */
+    private $cartManagement;
+
+    /**
+     * @var PageFactory
+     */
+    private $pageFactory;
+
+    /**
+     * CompleteCheckout constructor.
+     *
+     * @param Context $context
+     * @param AmazonConfig $amazonConfig
+     * @param CartManagementInterface $cartManagement
+     * @param GuestCartManagementInterface $guestCartManagement
+     * @param CheckoutSession $checkoutSession
+     * @param Session $session
+     * @param PageFactory $pageFactory
+     */
+    public function __construct(
+        Context $context,
+        AmazonConfig $amazonConfig,
+        CartManagementInterface $cartManagement,
+        GuestCartManagementInterface $guestCartManagement,
+        CheckoutSession $checkoutSession,
+        Session $session,
+        PageFactory $pageFactory,
+        MessageManager $messageManager
+    ) {
+        parent::__construct($context);
+        $this->amazonConfig = $amazonConfig;
+        $this->cartManagement = $cartManagement;
+        $this->checkoutSession = $checkoutSession;
+        $this->session = $session;
+        $this->pageFactory = $pageFactory;
+        $this->messageManager = $messageManager;
+    }
+
+    /*
+     * @inheritdoc
+     */
+    public function execute()
+    {
+        $authenticationStatus = $this->getRequest()->getParam('AuthenticationStatus');
+        switch ($authenticationStatus) {
+            case 'Success':
+                try {
+                    if (!$this->session->isLoggedIn()) {
+                        $this->checkoutSession->getQuote()->setCheckoutMethod(CartManagementInterface::METHOD_GUEST);
+                    }
+                    $this->cartManagement->placeOrder($this->checkoutSession->getQuoteId());
+                    return $this->_redirect('checkout/onepage/success');
+                } catch (AmazonWebapiException $e) {
+                    $this->messageManager->addErrorMessage($e->getMessage());
+                }
+                break;
+            case 'Failure':
+                $this->messageManager->addErrorMessage(__(
+                    'Amazon Pay was unable to authenticate the payment instrument.  '
+                    . 'Please try again, or use a different payment method.'
+                ));
+                break;
+            case 'Abandoned':
+            default:
+                $this->messageManager->addErrorMessage(__(
+                    'The SCA challenge was not completed successfully.  '
+                    . 'Please try again, or use a different payment method.'
+                ));
+        }
+        return $this->_redirect('checkout/cart');
+    }
+}

--- a/Cron/GetAmazonAuthorizationUpdates.php
+++ b/Cron/GetAmazonAuthorizationUpdates.php
@@ -120,7 +120,8 @@ class GetAmazonAuthorizationUpdates
      * amazon_pending_authorization table have these IDs if they are not set by matching them to a transaction that
      * has matching transaction or parent transaction IDs.
      */
-    private function updateIds() {
+    private function updateIds()
+    {
         // only get items that have no order ID set since we don't want to have to keep repeating this
         $collection = $this->collectionFactory
             ->create()
@@ -188,8 +189,7 @@ class GetAmazonAuthorizationUpdates
         foreach ($pendingAuthorizationIds as $pendingAuthorizationId) {
             try {
                 $this->authorization->updateAuthorization($pendingAuthorizationId);
-            }
-            catch (\Exception $e) {
+            } catch (\Exception $e) {
                 $this->logger->error($e);
             }
         }

--- a/Cron/GetAmazonCaptureUpdates.php
+++ b/Cron/GetAmazonCaptureUpdates.php
@@ -120,7 +120,8 @@ class GetAmazonCaptureUpdates
      * amazon_pending_capture table have these IDs if they are not set by matching them to a transaction that
      * has matching transaction or parent transaction IDs.
      */
-    private function updateIds() {
+    private function updateIds()
+    {
         // only get items that have no order ID set since we don't want to have to keep repeating this
         $collection = $this->collectionFactory
             ->create()
@@ -188,8 +189,7 @@ class GetAmazonCaptureUpdates
         foreach ($pendingCaptureIds as $pendingCaptureId) {
             try {
                 $this->capture->updateCapture($pendingCaptureId);
-            }
-            catch (\Exception $e) {
+            } catch (\Exception $e) {
                 $this->logger->error($e);
             }
         }

--- a/Gateway/Command/AmazonAuthCommand.php
+++ b/Gateway/Command/AmazonAuthCommand.php
@@ -87,8 +87,7 @@ class AmazonAuthCommand implements CommandInterface
         ValidatorInterface $validator = null,
         ErrorMessageMapperInterface $errorMessageMapper = null,
         Config $config
-    )
-    {
+    ) {
         $this->requestBuilder = $requestBuilder;
         $this->transferFactory = $transferFactory;
         $this->client = $client;
@@ -184,10 +183,6 @@ class AmazonAuthCommand implements CommandInterface
             }
         }
 
-        if ($isDecline) {
-            $messages[] = __("You will be redirected to the cart shortly.");
-        }
-
         if ($isTimeout) {
             return true;
         }

--- a/Gateway/Command/CaptureStrategyCommand.php
+++ b/Gateway/Command/CaptureStrategyCommand.php
@@ -25,6 +25,7 @@ use Magento\Framework\Api\SearchCriteriaBuilder;
 use Magento\Framework\Api\FilterBuilder;
 use Magento\Sales\Api\Data\TransactionInterface;
 use Amazon\Core\Helper\Data;
+use Amazon\Payment\Gateway\Data\Order\OrderAdapterFactory;
 
 class CaptureStrategyCommand implements CommandInterface
 {
@@ -33,7 +34,7 @@ class CaptureStrategyCommand implements CommandInterface
 
     const CAPTURE = 'settlement';
 
-    const AUTHORIZE_CAPTURE = 'capture';
+    const PARTIAL_CAPTURE = 'partial_capture';
 
     /**
      * @var CommandPoolInterface
@@ -55,23 +56,40 @@ class CaptureStrategyCommand implements CommandInterface
      */
     private $filterBuilder;
 
+    /**
+     * @var OrderAdapterFactory
+     */
+    private $orderAdapterFactory;
+
     /**
      * @var Data
      */
     private $coreHelper;
 
+    /**
+     * CaptureStrategyCommand constructor.
+     *
+     * @param CommandPoolInterface $commandPool
+     * @param TransactionRepositoryInterface $transactionRepository
+     * @param SearchCriteriaBuilder $searchCriteriaBuilder
+     * @param FilterBuilder $filterBuilder
+     * @param Data $coreHelper
+     * @param OrderAdapterFactory $orderAdapterFactory
+     */
     public function __construct(
         CommandPoolInterface $commandPool,
         TransactionRepositoryInterface $transactionRepository,
         SearchCriteriaBuilder $searchCriteriaBuilder,
         FilterBuilder $filterBuilder,
-        Data $coreHelper
+        Data $coreHelper,
+        OrderAdapterFactory $orderAdapterFactory
     ) {
         $this->commandPool = $commandPool;
         $this->transactionRepository = $transactionRepository;
         $this->searchCriteriaBuilder = $searchCriteriaBuilder;
         $this->filterBuilder = $filterBuilder;
         $this->coreHelper = $coreHelper;
+        $this->orderAdapterFactory = $orderAdapterFactory;
     }
 
     /**
@@ -82,17 +100,33 @@ class CaptureStrategyCommand implements CommandInterface
         if (isset($commandSubject['payment'])) {
             $paymentDO = $commandSubject['payment'];
             $paymentInfo = $paymentDO->getPayment();
+
+            // The magento order adapter doesn't expose everything we need to send a request to the AP API so we
+            // need to use our own version with the details we need exposed in custom methods.
+            $orderAdapter = $this->orderAdapterFactory->create(
+                ['order' => $paymentInfo->getOrder()]
+            );
+
+            $commandSubject['partial_capture'] = false;
+            $commandSubject['amazon_order_id'] = $orderAdapter->getAmazonOrderID();
+            $commandSubject['multicurrency'] = $orderAdapter->getMulticurrencyDetails($commandSubject['amount']);
+
             ContextHelper::assertOrderPayment($paymentInfo);
 
             $command = $this->getCommand($paymentInfo);
             if ($command) {
+                if ($command == self::PARTIAL_CAPTURE) {
+                    $commandSubject['partial_capture'] = true;
+                    $command = self::SALE;
+                }
                 $this->commandPool->get($command)->execute($commandSubject);
             }
         }
     }
 
     /**
-     * Get execution command name
+     * Get execution command name - if there's an authorization, this is just a settlement, if not, could be
+     * a partial capture situation where we need to completely auth and capture again against the same order
      *
      * @param  OrderPaymentInterface $payment
      * @return string
@@ -101,30 +135,18 @@ class CaptureStrategyCommand implements CommandInterface
     {
         $isCaptured = $this->captureTransactionExists($payment);
 
-        // check if a transaction has happened and is captured
-        if (!$payment->getAuthorizationTransaction() && !$isCaptured) {
-
-            if ($this->coreHelper->getPaymentAction() == 'authorize_capture') {
-                // charge on order
-                return self::SALE;
-            }
-            else {
-                // charge on invoice/shipment
-                return self::AUTHORIZE_CAPTURE;
-            }
-        }
-
-        // capture on settlement/invoice
+        // If an authorization exists, we're going to settle it with a capture
         if (!$isCaptured && $payment->getAuthorizationTransaction()) {
             return self::CAPTURE;
         }
 
-        // failed to determine action from prior tests, so use module settings
-        if ($this->coreHelper->getPaymentAction() == 'authorize_capture') {
-            self::SALE;
+        // Item has already been captured - need to reauthorize and capture (partial capture)
+        if ($isCaptured) {
+            return self::PARTIAL_CAPTURE;
         }
 
-        return self::AUTHORIZE_CAPTURE;
+        // We're in a situation where we need a reauth and capture.
+        return self::SALE;
     }
 
     /**
@@ -156,6 +178,6 @@ class CaptureStrategyCommand implements CommandInterface
         $searchCriteria = $this->searchCriteriaBuilder->create();
 
         $count = $this->transactionRepository->getList($searchCriteria)->getTotalCount();
-        return (boolean) $count;
+        return (boolean)$count;
     }
 }

--- /dev/null
+++ b/Gateway/Data/Order/OrderAdapter.php
@@ -0,0 +1,231 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+namespace Amazon\Payment\Gateway\Data\Order;
+
+use Magento\Payment\Gateway\Data\Order\AddressAdapterFactory;
+use Magento\Payment\Gateway\Data\AddressAdapterInterface;
+use Magento\Payment\Gateway\Data\OrderAdapterInterface;
+use Magento\Sales\Model\Order;
+use Amazon\Core\Model\AmazonConfig;
+use Amazon\Core\Helper\Data;
+
+/**
+ * Class OrderAdapter
+ */
+class OrderAdapter implements OrderAdapterInterface
+{
+    /**
+     * @var Order
+     */
+    private $order;
+
+    /**
+     * @var AddressAdapter
+     */
+    private $addressAdapterFactory;
+
+    /**
+     * @var Data
+     */
+    private $coreHelper;
+
+    /**
+     * @var AmazonConfig
+     */
+    private $config;
+
+    /**
+     * OrderAdapter constructor.
+     *
+     * @param Order $order
+     * @param AddressAdapterFactory $addressAdapterFactory
+     * @param Data $coreHelper
+     * @param \Amazon\Core\Model\AmazonConfig $config
+     */
+    public function __construct(
+        Order $order,
+        \Magento\Payment\Gateway\Data\Order\AddressAdapterFactory $addressAdapterFactory,
+        Data $coreHelper,
+        AmazonConfig $config
+    ) {
+        $this->order = $order;
+        $this->addressAdapterFactory = $addressAdapterFactory;
+        $this->coreHelper = $coreHelper;
+        $this->config = $config;
+    }
+
+    /**
+     * Returns currency code
+     *
+     * @return string
+     */
+    public function getCurrencyCode()
+    {
+        return $this->order->getBaseCurrencyCode();
+    }
+
+    /**
+     * Returns order increment id
+     *
+     * @return string
+     */
+    public function getOrderIncrementId()
+    {
+        return $this->order->getIncrementId();
+    }
+
+    /**
+     * Returns customer ID
+     *
+     * @return int|null
+     */
+    public function getCustomerId()
+    {
+        return $this->order->getCustomerId();
+    }
+
+    /**
+     * Returns billing address
+     *
+     * @return AddressAdapterInterface|null
+     */
+    public function getBillingAddress()
+    {
+        if ($this->order->getBillingAddress()) {
+            return $this->addressAdapterFactory->create(
+                ['address' => $this->order->getBillingAddress()]
+            );
+        }
+
+        return null;
+    }
+
+    /**
+     * Returns shipping address
+     *
+     * @return AddressAdapterInterface|null
+     */
+    public function getShippingAddress()
+    {
+        if ($this->order->getShippingAddress()) {
+            return $this->addressAdapterFactory->create(
+                ['address' => $this->order->getShippingAddress()]
+            );
+        }
+
+        return null;
+    }
+
+    /**
+     * Returns order store id
+     *
+     * @return int
+     */
+    public function getStoreId()
+    {
+        return $this->order->getStoreId();
+    }
+
+    /**
+     * Returns order id
+     *
+     * @return int
+     */
+    public function getId()
+    {
+        return $this->order->getEntityId();
+    }
+
+    /**
+     * Returns order grand total amount
+     *
+     * @return float|null
+     */
+    public function getGrandTotalAmount()
+    {
+        return $this->order->getBaseGrandTotal();
+    }
+
+    /**
+     * Returns list of line items in the cart
+     *
+     * @return \Magento\Sales\Api\Data\OrderItemInterface[]
+     */
+    public function getItems()
+    {
+        return $this->order->getItems();
+    }
+
+    /**
+     * Gets the remote IP address for the order.
+     *
+     * @return string|null Remote IP address.
+     */
+    public function getRemoteIp()
+    {
+        return $this->order->getRemoteIp();
+    }
+
+    /**
+     * Gets order currency code and amount if Amazon multi-currency was used.
+     * @param $amount
+     * @return array
+     */
+    public function getMulticurrencyDetails($amount)
+    {
+        $values = ['multicurrency' => false];
+
+        if ($this->config->useMultiCurrency()) {
+            $invoices = $this->order->getInvoiceCollection();
+
+            foreach ($invoices->getItems() as $key => $invoice) {
+                $baseTotal = $invoice->getBaseGrandTotal();
+
+                // compare numeric values to make sure we have the right invoice
+                // (could have an invoice for each item during partial capture).
+                if (bccomp($baseTotal, (float)$amount) == 0) {
+                    $values = [
+                        'multicurrency' => true,
+                        'order_currency' => $invoice->getOrderCurrencyCode(),
+                        'total' => $invoice->getGrandTotal()
+                    ];
+                    break;
+                }
+            }
+        }
+
+        $values['store_name'] = $this->order->getStoreName();
+        $values['store_id'] = $this->order->getStoreId();
+
+        return $values;
+    }
+
+
+    /**
+     * Returns current Amazon Order Reference ID
+     * @return string
+     */
+    public function getAmazonOrderID()
+    {
+        $orderID = '';
+        if (!empty($this->order->getExtensionAttributes()->getAmazonOrderReferenceId())) {
+            $orderID = $this->order->getExtensionAttributes()->getAmazonOrderReferenceId()->getAmazonOrderReferenceId();
+        }
+
+        return $orderID;
+    }
+}

--- a/Gateway/Helper/SubjectReader.php
+++ b/Gateway/Helper/SubjectReader.php
@@ -126,8 +126,7 @@ class SubjectReader
         if (!$quote_id) {
             $quote = $this->getQuote();
             $quoteLink->load($quote->getId(), 'quote_id');
-        }
-        else {
+        } else {
             $quoteLink->load($quote_id, 'quote_id');
         }
         return $quoteLink;
@@ -136,7 +135,7 @@ class SubjectReader
     /**
      * @return \Magento\Sales\Model\Order
      */
-    public function getOrder() 
+    public function getOrder()
     {
         return $this->checkoutSession->getLastRealOrder();
     }

--- a/Gateway/Http/Client/AuthorizeClient.php
+++ b/Gateway/Http/Client/AuthorizeClient.php
@@ -16,7 +16,6 @@
 
 namespace Amazon\Payment\Gateway\Http\Client;
 
-
 /**
  * Class Client
  * Amazon Pay authorization gateway client

--- a/Gateway/Http/Client/CaptureClient.php
+++ b/Gateway/Http/Client/CaptureClient.php
@@ -16,7 +16,6 @@
 
 namespace Amazon\Payment\Gateway\Http\Client;
 
-
 /**
  * Class Client
  * Amazon Pay gateway capture client

--- a/Gateway/Http/Client/SettlementClient.php
+++ b/Gateway/Http/Client/SettlementClient.php
@@ -16,8 +16,6 @@
 
 namespace Amazon\Payment\Gateway\Http\Client;
 
-use Amazon\Core\Exception\AmazonServiceUnavailableException;
-
 /**
  * Class SettlementClient
  * Amazon Pay capture client
@@ -47,7 +45,6 @@ class SettlementClient extends AbstractClient
                 'amazon_order_reference_id' => $data['amazon_order_reference_id'],
                 'amount' => $data['capture_amount'],
                 'currency_code' => $data['currency_code'],
-                'seller_order_id' => $data['seller_order_id'],
                 'store_name' => $data['store_name'],
                 'custom_information' => $data['custom_information'],
                 'platform_id' => $data['platform_id']

--- a/Gateway/Http/Client/VoidClient.php
+++ b/Gateway/Http/Client/VoidClient.php
@@ -16,7 +16,6 @@
 
 namespace Amazon\Payment\Gateway\Http\Client;
 
-
 /**
  * Class VoidClient
  * Amazon Pay client for gateway cancel and void
@@ -49,5 +48,4 @@ class VoidClient extends AbstractClient
 
         return $response;
     }
-
 }

--- a/Gateway/Http/TransferFactory.php
+++ b/Gateway/Http/TransferFactory.php
@@ -19,7 +19,6 @@ use Magento\Payment\Gateway\Http\TransferBuilder;
 use Magento\Payment\Gateway\Http\TransferFactoryInterface;
 use Magento\Payment\Gateway\Http\TransferInterface;
 
-
 class TransferFactory implements TransferFactoryInterface
 {
     /**

--- a/Gateway/Request/AuthorizationRequestBuilder.php
+++ b/Gateway/Request/AuthorizationRequestBuilder.php
@@ -21,6 +21,7 @@ use Magento\Payment\Gateway\Request\BuilderInterface;
 use Magento\Framework\App\ProductMetadata;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
+use Amazon\Core\Model\AmazonConfig;
 use Magento\Framework\Event\ManagerInterface;
 use Magento\Framework\DataObject;
 use Amazon\Payment\Plugin\AdditionalInformation;
@@ -48,6 +49,11 @@ class AuthorizationRequestBuilder implements BuilderInterface
      */
     private $coreHelper;
 
+    /**
+     * @var AmazonConfig
+     */
+    private $amazonConfig;
+
     /**
      * @var ManagerInterface
      */
@@ -65,6 +71,7 @@ class AuthorizationRequestBuilder implements BuilderInterface
      * @param ProductMetadata $productMetadata
      * @param SubjectReader $subjectReader
      * @param Data $coreHelper
+     * @param AmazonConfig $amazonConfig
      * @param ManagerInterface $eventManager
      * @param CategoryExclusion $categoryExclusion
      */
@@ -73,12 +80,13 @@ class AuthorizationRequestBuilder implements BuilderInterface
         ProductMetaData $productMetadata,
         SubjectReader $subjectReader,
         Data $coreHelper,
+        AmazonConfig $amazonConfig,
         ManagerInterface $eventManager,
         CategoryExclusion $categoryExclusion
-    )
-    {
+    ) {
         $this->config = $config;
         $this->coreHelper = $coreHelper;
+        $this->amazonConfig = $amazonConfig;
         $this->productMetaData = $productMetadata;
         $this->subjectReader = $subjectReader;
         $this->eventManager = $eventManager;
@@ -96,14 +104,35 @@ class AuthorizationRequestBuilder implements BuilderInterface
         $data = [];
 
         $paymentDO = $this->subjectReader->readPayment($buildSubject);
-
         $payment = $paymentDO->getPayment();
+        $orderDO = $paymentDO->getOrder();
+        $storeId = $orderDO->getStoreId();
+        $storeName = '';
+
+        $currencyCode = $orderDO->getCurrencyCode();
+        $total = $buildSubject['amount'];
+
+        // capture sale or new auth/capture for partial capture
+        if (isset($buildSubject['multicurrency']) && $buildSubject['multicurrency']['multicurrency']) {
+            $currencyCode = $buildSubject['multicurrency']['order_currency'];
+            $total = $buildSubject['multicurrency']['total'];
+            $storeName = $buildSubject['multicurrency']['store_name'];
+            $storeId = $buildSubject['multicurrency']['store_id'];
+        } else {
+            // auth has not happened for this order yet
+            if ($this->amazonConfig->useMultiCurrency($storeId)) {
+                $quote = $this->subjectReader->getQuote();
+                $total = $quote->getGrandTotal();
+                $currencyCode = $quote->getQuoteCurrencyCode();
+            }
+        }
 
-        $order = $paymentDO->getOrder();
 
-        $quote = $this->subjectReader->getQuote();
+        if (isset($buildSubject['amazon_order_id']) && $buildSubject['amazon_order_id']) {
+            $amazonId = $buildSubject['amazon_order_id'];
+        } else {
+            $quote = $this->subjectReader->getQuote();
 
-        if (!$this->categoryExclusion->isQuoteDirty()) {
             if (!$quote->getReservedOrderId()) {
                 try {
                     $quote->reserveOrderId()->save();
@@ -112,47 +141,45 @@ class AuthorizationRequestBuilder implements BuilderInterface
                 }
             }
 
+            $storeName = $quote->getStore()->getName();
             $amazonId = $this->subjectReader->getAmazonId();
+        }
 
-            if ($order && $amazonId) {
-
+        if ($amazonId) {
                 $data = [
                     'amazon_order_reference_id' => $amazonId,
-                    'amount' => $buildSubject['amount'],
-                    'currency_code' => $order->getCurrencyCode(),
-                    'seller_order_id' => $order->getOrderIncrementId(),
-                    'store_name' => $quote->getStore()->getName(),
+                    'amount' => $total,
+                    'currency_code' => $currencyCode,
+                    'store_name' => $storeName,
                     'custom_information' =>
                         'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
                         'Plugin Version : ' . $this->coreHelper->getVersion(),
                     'platform_id' => $this->config->getValue('platform_id'),
                     'request_payment_authorization' => true
                 ];
-            }
-
-            if ($this->coreHelper->isSandboxEnabled('store', $quote->getStoreId())) {
-
-                $data['additional_information'] =
-                    $payment->getAdditionalInformation(AdditionalInformation::KEY_SANDBOX_SIMULATION_REFERENCE);
-
-                $eventData = [
-                    'amazon_order_reference_id' => $amazonId,
-                    'authorization_amount' => $buildSubject['amount'],
-                    'currency_code' => $order->getCurrencyCode(),
-                    'authorization_reference_id' => $amazonId . '-A' . time(),
-                    'capture_now' => false,
-                ];
+        }
 
-                $transport = new DataObject($eventData);
-                $this->eventManager->dispatch(
-                    'amazon_payment_authorize_before',
-                    [
-                        'context' => 'authorization',
-                        'payment' => $paymentDO->getPayment(),
-                        'transport' => $transport
-                    ]
-                );
-            }
+        if ($this->coreHelper->isSandboxEnabled('store', $storeId)) {
+            $data['additional_information'] =
+                $payment->getAdditionalInformation(AdditionalInformation::KEY_SANDBOX_SIMULATION_REFERENCE);
+
+            $eventData = [
+                'amazon_order_reference_id' => $amazonId,
+                'authorization_amount' => $total,
+                'currency_code' => $currencyCode,
+                'authorization_reference_id' => $amazonId . '-A' . time(),
+                'capture_now' => false,
+            ];
+
+            $transport = new DataObject($eventData);
+            $this->eventManager->dispatch(
+                'amazon_payment_authorize_before',
+                [
+                    'context' => 'authorization',
+                    'payment' => $paymentDO->getPayment(),
+                    'transport' => $transport
+                ]
+            );
         }
 
         return $data;

--- a/Gateway/Request/CaptureRequestBuilder.php
+++ /dev/null
@@ -1,147 +0,0 @@
-<?php
-/**
- * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-namespace Amazon\Payment\Gateway\Request;
-
-use Amazon\Payment\Gateway\Config\Config;
-use Amazon\Payment\Plugin\AdditionalInformation;
-use Magento\Payment\Gateway\Request\BuilderInterface;
-use Magento\Framework\App\ProductMetadata;
-use Amazon\Payment\Gateway\Helper\SubjectReader;
-use Amazon\Core\Helper\Data;
-use Magento\Framework\Exception\LocalizedException;
-use Magento\Payment\Model\Method\Logger;
-
-class CaptureRequestBuilder implements BuilderInterface
-{
-    /**
-     * @var Config
-     */
-    private $config;
-
-    /**
-     * @var Logger
-     */
-    private $logger;
-
-    /**
-     * @var ProductMetadata
-     */
-    private $productMetaData;
-
-    /**
-     * @var SubjectReader
-     */
-    private $subjectReader;
-
-    /**
-     * @var Data
-     */
-    private $coreHelper;
-
-    /**
-     * CaptureRequestBuilder constructor.
-     *
-     * @param Config          $config
-     * @param ProductMetadata $productMetadata
-     * @param SubjectReader   $subjectReader
-     * @param Data            $coreHelper
-     * @param Logger          $logger
-     */
-    public function __construct(
-        Config $config,
-        ProductMetaData $productMetadata,
-        SubjectReader $subjectReader,
-        Data $coreHelper,
-        Logger $logger
-    ) {
-        $this->config = $config;
-        $this->coreHelper = $coreHelper;
-        $this->productMetaData = $productMetadata;
-        $this->subjectReader = $subjectReader;
-        $this->logger = $logger;
-    }
-
-
-    /**
-     * @param array $buildSubject
-     * @return array
-     * @throws LocalizedException
-     */
-    public function build(array $buildSubject)
-    {
-        $data = [];
-
-        $paymentDO = $this->subjectReader->readPayment($buildSubject);
-
-        $order = $paymentDO->getOrder();
-
-        $quote = $this->subjectReader->getQuote();
-
-        if (!$quote->getReservedOrderId()) {
-            try {
-                $quote->reserveOrderId()->save();
-            }
-            catch(\Exception $e) {
-                $this->logger->debug($e->getMessage());
-            }
-        }
-
-        $amazonId = $this->subjectReader->getAmazonId();
-
-        if ($order && $amazonId) {
-
-            $data = [
-                'amazon_order_reference_id' => $amazonId,
-                'amount' => $order->getGrandTotalAmount(),
-                'currency_code' => $order->getCurrencyCode(),
-                'seller_order_id' => $order->getOrderIncrementId(),
-                'store_name' => $quote->getStore()->getName(),
-                'custom_information' =>
-                    'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
-                    'Plugin Version : ' . $this->coreHelper->getVersion(),
-                'platform_id' => $this->config->getValue('platform_id')
-            ];
-        }
-
-        if ($this->coreHelper->isSandboxEnabled('store', $quote->getStoreId())) {
-
-            $payment = $paymentDO->getPayment();
-
-            $data['additional_information'] =
-                $payment->getAdditionalInformation(AdditionalInformation::KEY_SANDBOX_SIMULATION_REFERENCE);
-
-            $eventData = [
-                'amazon_order_reference_id'  => $amazonId,
-                'authorization_amount'       => $buildSubject['amount'],
-                'currency_code'              => $order->getCurrencyCode(),
-                'authorization_reference_id' => $amazonId . '-C' . time(),
-                'capture_now'                => true,
-            ];
-
-            $transport = new DataObject($eventData);
-            $this->eventManager->dispatch(
-                'amazon_payment_authorize_before',
-                [
-                    'context'   => 'capture',
-                    'payment'   => $paymentDO->getPayment(),
-                    'transport' => $transport
-                ]
-            );
-        }
-
-        return $data;
-    }
-}

--- a/Gateway/Request/RefundRequestBuilder.php
+++ b/Gateway/Request/RefundRequestBuilder.php
@@ -21,6 +21,7 @@ use Magento\Framework\App\ProductMetadata;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
 use Magento\Sales\Api\OrderRepositoryInterface;
+use Amazon\Payment\Gateway\Data\Order\OrderAdapterFactory;
 
 /**
  * Class RefundRequestBuilder
@@ -49,24 +50,32 @@ class RefundRequestBuilder implements BuilderInterface
      */
     private $orderRepository;
 
+    /**
+     * @var OrderAdapterFactory
+     */
+    private $orderAdapterFactory;
+
     /**
      * RefundRequestBuilder constructor.
      *
-     * @param ProductMetadata          $productMetadata
-     * @param SubjectReader            $subjectReader
-     * @param Data                     $coreHelper
+     * @param ProductMetadata $productMetadata
+     * @param SubjectReader $subjectReader
+     * @param Data $coreHelper
      * @param OrderRepositoryInterface $orderRepository
+     * @param OrderAdapterFactory $orderAdapterFactory
      */
     public function __construct(
         ProductMetaData $productMetadata,
         SubjectReader $subjectReader,
         Data $coreHelper,
-        OrderRepositoryInterface $orderRepository
+        OrderRepositoryInterface $orderRepository,
+        OrderAdapterFactory $orderAdapterFactory
     ) {
         $this->coreHelper = $coreHelper;
         $this->productMetaData = $productMetadata;
         $this->subjectReader = $subjectReader;
         $this->orderRepository = $orderRepository;
+        $this->orderAdapterFactory = $orderAdapterFactory;
     }
 
     /**
@@ -78,22 +87,36 @@ class RefundRequestBuilder implements BuilderInterface
         $data = [];
 
         $paymentDO = $this->subjectReader->readPayment($buildSubject);
-
         $payment = $paymentDO->getPayment();
 
         $orderDO = $paymentDO->getOrder();
 
-        $order = $this->orderRepository->get($orderDO->getId());
+        $currencyCode = $orderDO->getCurrencyCode();
+        $total = $buildSubject['amount'];
+        $storeId = $orderDO->getStoreId();
 
-        $quoteLink = $this->subjectReader->getQuoteLink($order->getQuoteId());
+        // The magento order adapter doesn't expose everything we need to send a request to the AP API so we
+        // need to use our own version with the details we need exposed in custom methods.
+        $orderAdapter = $this->orderAdapterFactory->create(
+            ['order' => $payment->getOrder()]
+        );
+
+        $amazonId = $orderAdapter->getAmazonOrderID();
+        $multicurrency = $orderAdapter->getMulticurrencyDetails($total);
+
+        if ($multicurrency['multicurrency']) {
+            $currencyCode = $multicurrency['order_currency'];
+            $total = $multicurrency['total'];
+            $storeId = $multicurrency['store_id'];
+        }
 
-        if ($quoteLink) {
+        if ($amazonId) {
             $data = [
                 'amazon_capture_id' => $payment->getParentTransactionId(),
-                'refund_reference_id' => $quoteLink->getAmazonOrderReferenceId() . '-R' . time(),
-                'refund_amount' => $this->subjectReader->readAmount($buildSubject),
-                'currency_code' => $order->getOrderCurrencyCode(),
-                'store_id' => $order->getStoreId()
+                'refund_reference_id' => $amazonId . '-R' . time(),
+                'refund_amount' => $total,
+                'currency_code' => $currencyCode,
+                'store_id' => $storeId
             ];
         }
 

--- a/Gateway/Request/SettlementRequestBuilder.php
+++ b/Gateway/Request/SettlementRequestBuilder.php
@@ -13,6 +13,7 @@
  * express or implied. See the License for the specific language governing
  * permissions and limitations under the License.
  */
+
 namespace Amazon\Payment\Gateway\Request;
 
 use Amazon\Payment\Gateway\Config\Config;
@@ -64,13 +65,13 @@ class SettlementRequestBuilder implements BuilderInterface
     /**
      * SettlementRequestBuilder constructor.
      *
-     * @param Config                   $config
-     * @param ProductMetadata          $productMetadata
+     * @param Config $config
+     * @param ProductMetadata $productMetadata
      * @param OrderRepositoryInterface $orderRepository
-     * @param CartRepositoryInterface  $quoteRepository
-     * @param SubjectReader            $subjectReader
-     * @param Data                     $coreHelper
-     * @param Logger                   $logger
+     * @param CartRepositoryInterface $quoteRepository
+     * @param SubjectReader $subjectReader
+     * @param Data $coreHelper
+     * @param Logger $logger
      */
     public function __construct(
         Config $config,
@@ -104,30 +105,35 @@ class SettlementRequestBuilder implements BuilderInterface
 
         $orderDO = $paymentDO->getOrder();
 
-        $order = $this->orderRepository->get($orderDO->getId());
-
-        $quote = $this->quoteRepository->get($order->getQuoteId());
+        $currencyCode = $orderDO->getCurrencyCode();
+        $total = $buildSubject['amount'];
 
-        $quoteLink = $this->subjectReader->getQuoteLink($quote->getId());
+        if ($buildSubject['multicurrency']['multicurrency']) {
+            $currencyCode = $buildSubject['multicurrency']['order_currency'];
+            $total = $buildSubject['multicurrency']['total'];
+        }
 
-        if ($quoteLink) {
 
-            $data = [
-                'amazon_authorization_id' => $paymentDO->getPayment()->getParentTransactionId(),
-                'capture_amount' => $buildSubject['amount'],
-                'currency_code' => $order->getBaseCurrencyCode(),
-                'amazon_order_reference_id' => $quoteLink->getAmazonOrderReferenceId(),
-                'store_id' => $quote->getStoreId(),
-                'store_name' => $quote->getStore()->getName(),
-                'seller_order_id' => $order->getIncrementId(),
-                'custom_information' =>
-                    'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
-                    'Plugin Version : ' . $this->coreHelper->getVersion(),
-                'platform_id' => $this->config->getValue('platform_id'),
-            ];
+        if (isset($buildSubject['amazon_order_id']) && $buildSubject['amazon_order_id']) {
+                $data = [
+                    'amazon_authorization_id' => $paymentDO->getPayment()->getParentTransactionId(),
+                    'capture_amount' => $total,
+                    'currency_code' => $currencyCode,
+                    'amazon_order_reference_id' => $buildSubject['amazon_order_id'],
+                    'store_id' => $buildSubject['multicurrency']['store_id'],
+                    'store_name' => $buildSubject['multicurrency']['store_name'],
+                    'custom_information' =>
+                        'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
+                        'Plugin Version : ' . $this->coreHelper->getVersion(),
+                    'platform_id' => $this->config->getValue('platform_id'),
+                    'request_payment_authorization' => false
+                ];
+
+                if (isset($buildSubject['request_payment_authorization']) && $buildSubject['request_payment_authorization']) {
+                    $data['request_payment_authorization'] = true;
+                }
         }
 
         return $data;
     }
-
 }

--- a/Gateway/Response/CompleteAuthHandler.php
+++ b/Gateway/Response/CompleteAuthHandler.php
@@ -20,7 +20,6 @@ use Magento\Payment\Gateway\Response\HandlerInterface;
 use Magento\Payment\Model\Method\Logger;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
-use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
 
 class CompleteAuthHandler implements HandlerInterface
@@ -59,8 +58,7 @@ class CompleteAuthHandler implements HandlerInterface
         SubjectReader $subjectReader,
         PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory,
         Data $coreHelper
-    )
-    {
+    ) {
         $this->logger = $logger;
         $this->subjectReader = $subjectReader;
         $this->coreHelper = $coreHelper;
@@ -76,12 +74,10 @@ class CompleteAuthHandler implements HandlerInterface
     {
 
         $paymentDO = $this->subjectReader->readPayment($handlingSubject);
-        $amazonId = $this->subjectReader->getAmazonId();
         $payment = $paymentDO->getPayment();
         $order = $this->subjectReader->getOrder();
 
         if ($response['status']) {
-
             $payment->setTransactionId($response['authorize_transaction_id']);
 
 

--- a/Gateway/Response/CompleteSaleHandler.php
+++ b/Gateway/Response/CompleteSaleHandler.php
@@ -20,7 +20,6 @@ use Magento\Payment\Gateway\Response\HandlerInterface;
 use Magento\Payment\Model\Method\Logger;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
-use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
 
 class CompleteSaleHandler implements HandlerInterface
@@ -75,20 +74,17 @@ class CompleteSaleHandler implements HandlerInterface
     {
 
         $paymentDO = $this->subjectReader->readPayment($handlingSubject);
-
-        $amazonId = $this->subjectReader->getAmazonId();
-
         $payment = $paymentDO->getPayment();
 
-        $order = $this->subjectReader->getOrder();
-
         if ($response['status']) {
             $payment->setTransactionId($response['capture_transaction_id']);
             $payment->setParentTransactionId($response['authorize_transaction_id']);
 
 
             if ($response['timeout']) {
-                $pendingAuthorization = $this->pendingAuthorizationFactory->create()
+                $order = $this->subjectReader->getOrder();
+
+                $this->pendingAuthorizationFactory->create()
                     ->setAuthorizationId($response['authorize_transaction_id'])
                     ->setCaptureId($response['capture_transaction_id'])
                     ->setCapture(true)
@@ -97,14 +93,14 @@ class CompleteSaleHandler implements HandlerInterface
                 $payment->setIsTransactionPending(true);
                 $order->setState($order::STATE_PAYMENT_REVIEW)->setStatus($order::STATE_PAYMENT_REVIEW);
                 $payment->setIsTransactionClosed(false);
-            }
-            else {
+            } else {
                 $payment->setIsTransactionClosed(true);
             }
 
-            $quoteLink = $this->subjectReader->getQuoteLink();
-            $quoteLink->setConfirmed(true)->save();
+            if (!isset($handlingSubject['partial_capture']) || !$handlingSubject['partial_capture']) {
+                $quoteLink = $this->subjectReader->getQuoteLink();
+                $quoteLink->setConfirmed(true)->save();
+            }
         }
     }
-
 }

--- a/Gateway/Response/RefundHandler.php
+++ b/Gateway/Response/RefundHandler.php
@@ -51,7 +51,7 @@ class RefundHandler implements HandlerInterface
     private $coreHelper;
 
     /**
-     * @var PendingRefundInterfaceFactory 
+     * @var PendingRefundInterfaceFactory
      */
     private $pendingRefundFactory;
 

--- a/Gateway/Response/SettlementHandler.php
+++ b/Gateway/Response/SettlementHandler.php
@@ -20,7 +20,6 @@ use Magento\Payment\Gateway\Response\HandlerInterface;
 use Magento\Payment\Model\Method\Logger;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
-use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
 use Magento\Sales\Api\OrderRepositoryInterface;
 use Magento\Quote\Api\CartRepositoryInterface;
 
@@ -82,14 +81,11 @@ class SettlementHandler implements HandlerInterface
     public function handle(array $handlingSubject, array $response)
     {
         $paymentDO = $this->subjectReader->readPayment($handlingSubject);
-
         $payment = $paymentDO->getPayment();
 
         // if reauthorized, treat as end of auth + capture process
         if ($response['reauthorized']) {
-
             if ($response['status']) {
-
                 $orderDO = $paymentDO->getOrder();
                 $order = $this->orderRepository->get($orderDO->getId());
 
@@ -101,11 +97,9 @@ class SettlementHandler implements HandlerInterface
                 $quoteLink = $this->subjectReader->getQuoteLink($quote->getId());
                 $quoteLink->setConfirmed(true)->save();
             }
-        }
-        else {
+        } else {
             // finish capture
             $payment->setTransactionId($response['transaction_id']);
         }
     }
-
 }

--- a/Gateway/Response/VoidHandler.php
+++ b/Gateway/Response/VoidHandler.php
@@ -76,10 +76,8 @@ class VoidHandler implements HandlerInterface
             $this->messageManager->addErrorMessage(
                 __('Unable to cancel the order or the Amazon Order ID is incorrect.')
             );
-        }
-        else {
+        } else {
             $this->messageManager->addSuccessMessage(__('Successfully cancelled Amazon Pay.'));
         }
     }
-
 }

--- a/Gateway/Validator/AuthorizationValidator.php
+++ b/Gateway/Validator/AuthorizationValidator.php
@@ -59,7 +59,6 @@ class AuthorizationValidator extends AbstractValidator
         }
 
         return $this->createResult(false, $messages);
-
     }
 
     /**
@@ -70,5 +69,4 @@ class AuthorizationValidator extends AbstractValidator
     {
         return $constraint->getId();
     }
-
 }

--- a/Gateway/Validator/ConstraintValidator.php
+++ b/Gateway/Validator/ConstraintValidator.php
@@ -53,7 +53,8 @@ class ConstraintValidator extends AbstractValidator
      * @param AmazonConstraint $constraint
      * @return string
      */
-    private function getConstraint(AmazonConstraint $constraint) {
+    private function getConstraint(AmazonConstraint $constraint)
+    {
         return $constraint->getId();
     }
 }

--- a/Helper/Address.php
+++ b/Helper/Address.php
@@ -21,6 +21,7 @@ use Magento\Customer\Api\Data\AddressInterface;
 use Magento\Customer\Api\Data\AddressInterfaceFactory;
 use Magento\Customer\Api\Data\RegionInterfaceFactory;
 use Magento\Directory\Model\RegionFactory;
+use Magento\Framework\App\Config\ScopeConfigInterface;
 
 class Address
 {
@@ -39,14 +40,21 @@ class Address
      */
     private $regionDataFactory;
 
+    /**
+     * @var ScopeConfigInterface
+     */
+    private $scopeConfig;
+
     public function __construct(
         AddressInterfaceFactory $addressFactory,
         RegionFactory $regionFactory,
-        RegionInterfaceFactory $regionDataFactory
+        RegionInterfaceFactory $regionDataFactory,
+        ScopeConfigInterface $config
     ) {
         $this->addressFactory    = $addressFactory;
         $this->regionFactory     = $regionFactory;
         $this->regionDataFactory = $regionDataFactory;
+        $this->scopeConfig = $config;
     }
 
     /**
@@ -58,15 +66,35 @@ class Address
      */
     public function convertToMagentoEntity(AmazonAddressInterface $amazonAddress)
     {
+        $addressLinesAllowed = (int)$this->scopeConfig->getValue(
+            'customer/address/street_lines',
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
+        );
+
         $address = $this->addressFactory->create();
         $address->setFirstname($amazonAddress->getFirstName());
         $address->setLastname($amazonAddress->getLastName());
         $address->setCity($amazonAddress->getCity());
-        $address->setStreet(array_values($amazonAddress->getLines()));
         $address->setPostcode($amazonAddress->getPostCode());
         $address->setTelephone($amazonAddress->getTelephone());
         $address->setCountryId($this->getCountryId($amazonAddress));
 
+        /*
+         * The number of lines in a street address is configurable via 'customer/address/street_lines'.
+         * To avoid discarding information, we'll concatenate additional lines so that they fit within the configured
+         *  address length.
+         */
+        $lines = [];
+        for ($i = 1; $i <= 4; $i++) {
+            $line = (string) $amazonAddress->getLine($i);
+            if ($i <= $addressLinesAllowed) {
+                $lines[] = $line;
+            } else {
+                $lines[count($lines)-1] = trim($lines[count($lines)-1] . ' ' . $line);
+            }
+        }
+        $address->setStreet(array_values($lines));
+
         $company = !empty($amazonAddress->getCompany()) ? $amazonAddress->getCompany() : '';
         $address->setCompany($company);
 

--- a/Helper/Email.php
+++ b/Helper/Email.php
@@ -41,9 +41,9 @@ class Email extends AbstractHelper
      * @param AmazonCoreHelper        $amazonCoreHelper
      */
     public function __construct(
-        Context                 $context,
+        Context $context,
         TransportBuilderFactory $emailTransportBuilderFactory,
-        AmazonCoreHelper        $amazonCoreHelper
+        AmazonCoreHelper $amazonCoreHelper
     ) {
         parent::__construct($context);
         $this->emailTransportBuilderFactory = $emailTransportBuilderFactory;

--- a/Helper/Shortcut/Validator.php
+++ b/Helper/Shortcut/Validator.php
@@ -22,7 +22,7 @@ namespace Amazon\Payment\Helper\Shortcut;
 class Validator implements ValidatorInterface
 {
     /**
-     * @var \Amazon\Payment\Gateway\Config\Config 
+     * @var \Amazon\Payment\Gateway\Config\Config
      */
     private $amazonConfig;
 

--- a/Model/Adapter/AmazonPaymentAdapter.php
+++ b/Model/Adapter/AmazonPaymentAdapter.php
@@ -25,6 +25,8 @@ use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
 use Amazon\Payment\Api\Data\PendingCaptureInterfaceFactory;
+use Magento\Framework\UrlInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * Class AmazonPaymentAdapter
@@ -80,6 +82,11 @@ class AmazonPaymentAdapter
      */
     private $pendingAuthorizationFactory;
 
+    /**
+     * @var UrlInterface
+     */
+    private $urlBuilder;
+
     /**
      * AmazonPaymentAdapter constructor.
      * @param ClientFactoryInterface $clientFactory
@@ -91,6 +98,7 @@ class AmazonPaymentAdapter
      * @param SubjectReader $subjectReader
      * @param Data $coreHelper
      * @param Logger $logger
+     * @param UrlInterface $urlBuilder
      */
     public function __construct(
         ClientFactoryInterface $clientFactory,
@@ -101,9 +109,9 @@ class AmazonPaymentAdapter
         PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory,
         SubjectReader $subjectReader,
         Data $coreHelper,
-        Logger $logger
-    )
-    {
+        Logger $logger,
+        UrlInterface $urlBuilder = null
+    ) {
         $this->clientFactory = $clientFactory;
         $this->amazonSetOrderDetailsResponseFactory = $amazonSetOrderDetailsResponseFactory;
         $this->logger = $logger;
@@ -113,6 +121,7 @@ class AmazonPaymentAdapter
         $this->coreHelper = $coreHelper;
         $this->pendingCaptureFactory = $pendingCaptureFactory;
         $this->pendingAuthorizationFactory = $pendingAuthorizationFactory;
+        $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
     }
 
     /**
@@ -159,7 +168,9 @@ class AmazonPaymentAdapter
 
         $response = $this->clientFactory->create($storeId)->confirmOrderReference(
             [
-                'amazon_order_reference_id' => $amazonOrderReferenceId
+                'amazon_order_reference_id' => $amazonOrderReferenceId,
+                'success_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout'),
+                'failure_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout')
             ]
         );
 
@@ -230,19 +241,9 @@ class AmazonPaymentAdapter
         $response['constraints'] = [];
         $response['amazon_order_reference_id'] = $data['amazon_order_reference_id'];
 
-        if (!$attempts) {
-            $detailResponse = $this->setOrderReferenceDetails($storeId, $data);
-
-            if (isset($detailResponse['constraints']) && !empty($detailResponse['constraints'])) {
-                $response['constraints'] = $detailResponse['constraints'];
-                return $response;
-            }
-        }
-
         $confirmResponse = $this->confirmOrderReference($storeId, $data['amazon_order_reference_id']);
 
         if ($confirmResponse->response['Status'] == 200) {
-
             $authorizeResponse = $this->getAuthorization($storeId, $authorizeData);
 
             if ($authorizeResponse) {
@@ -345,6 +346,21 @@ class AmazonPaymentAdapter
         return $response;
     }
 
+    /**
+     * @param $storeId
+     * @param $amazonId
+     * @param $orderId
+     */
+    public function setOrderAttributes($storeId, $amazonId, $orderId)
+    {
+        $orderAttributes = [
+            'amazon_order_reference_id' => $amazonId,
+            'seller_order_id' => $orderId
+        ];
+
+        $this->clientFactory->create($storeId)->setOrderAttributes($orderAttributes);
+    }
+
     /**
      * @param $data
      * @return bool

--- a/Model/Ipn/AuthorizationProcessor.php
+++ b/Model/Ipn/AuthorizationProcessor.php
@@ -79,7 +79,8 @@ class AuthorizationProcessor implements ProcessorInterface
         $collection = $this->collectionFactory
             ->create()
             ->addFieldToFilter(
-                PendingAuthorizationInterface::AUTHORIZATION_ID, [
+                PendingAuthorizationInterface::AUTHORIZATION_ID,
+                [
                 'eq' => $details->getAuthorizeTransactionId()
                 ]
             )

--- a/Model/Method/AmazonLoginMethod.php
+++ b/Model/Method/AmazonLoginMethod.php
@@ -51,4 +51,18 @@ class AmazonLoginMethod extends \Magento\Payment\Model\Method\AbstractMethod
      */
     protected $_isOffline = true;
 
+    /**
+     * Is active
+     *
+     * @param int|null $storeId
+     * @return bool
+     */
+    public function isActive($storeId = null)
+    {
+        return (bool)(int)$this->_scopeConfig->getValue(
+            AmazonCoreHelper::AMAZON_ACTIVE,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            $storeId
+        ) && (bool)(int)$this->getConfigData('active', $storeId);
+    }
 }

--- a/Model/OrderInformationManagement.php
+++ b/Model/OrderInformationManagement.php
@@ -32,6 +32,8 @@ use Magento\Quote\Model\Quote;
 use Magento\Store\Model\ScopeInterface;
 use AmazonPay\ResponseInterface;
 use Psr\Log\LoggerInterface;
+use Magento\Framework\UrlInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
@@ -97,7 +99,8 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory,
         QuoteLinkInterfaceFactory $quoteLinkFactory,
         LoggerInterface $logger,
-        ProductMetadata $productMetadata
+        ProductMetadata $productMetadata,
+        UrlInterface $urlBuilder = null
     ) {
         $this->session                              = $session;
         $this->clientFactory                        = $clientFactory;
@@ -107,6 +110,7 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         $this->quoteLinkFactory                     = $quoteLinkFactory;
         $this->logger                               = $logger;
         $this->productMetadata                      = $productMetadata;
+        $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
     }
 
     /**
@@ -131,7 +135,6 @@ class OrderInformationManagement implements OrderInformationManagementInterface
                 'amazon_order_reference_id' => $amazonOrderReferenceId,
                 'amount'                    => $quote->getGrandTotal(),
                 'currency_code'             => $quote->getQuoteCurrencyCode(),
-                'seller_order_id'           => $quote->getReservedOrderId(),
                 'store_name'                => $storeName,
                 'custom_information'        =>
                     'Magento Version : ' . $this->productMetadata->getVersion() . ' ' .
@@ -189,7 +192,9 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         try {
             $response = $this->clientFactory->create($storeId)->confirmOrderReference(
                 [
-                    'amazon_order_reference_id' => $amazonOrderReferenceId
+                    'amazon_order_reference_id' => $amazonOrderReferenceId,
+                    'success_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout'),
+                    'failure_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout')
                 ]
             );
 

--- a/Model/PaymentManagement/Authorization.php
+++ b/Model/PaymentManagement/Authorization.php
@@ -144,8 +144,7 @@ class Authorization extends AbstractOperation
         StoreManagerInterface $storeManager,
         PaymentManagement $paymentManagement,
         LoggerInterface $logger
-    )
-    {
+    ) {
         $this->clientFactory = $clientFactory;
         $this->pendingAuthorizationFactory = $pendingAuthorizationFactory;
         $this->amazonAuthorizationDetailsResponseFactory = $amazonAuthorizationDetailsResponseFactory;
@@ -178,8 +177,7 @@ class Authorization extends AbstractOperation
         $pendingAuthorizationId,
         AmazonAuthorizationDetails $authorizationDetails = null,
         AmazonOrderDetails $orderDetails = null
-    )
-    {
+    ) {
         try {
             $pendingAuthorization = $this->pendingAuthorizationFactory->create();
             $pendingAuthorization->getResource()->beginTransaction();
@@ -216,8 +214,7 @@ class Authorization extends AbstractOperation
     protected function processUpdateAuthorization(
         PendingAuthorizationInterface $pendingAuthorization,
         AmazonAuthorizationDetails $authorizationDetails = null
-    )
-    {
+    ) {
         $order = $this->orderRepository->get($pendingAuthorization->getOrderId());
         $payment = $this->orderPaymentRepository->get($pendingAuthorization->getPaymentId());
         $order->setPayment($payment);
@@ -283,8 +280,7 @@ class Authorization extends AbstractOperation
         PendingAuthorizationInterface $pendingAuthorization,
         $capture,
         TransactionInterface $newTransaction = null
-    )
-    {
+    ) {
         $transactionId = ($capture) ? $pendingAuthorization->getCaptureId()
             : $pendingAuthorization->getAuthorizationId();
 
@@ -332,8 +328,7 @@ class Authorization extends AbstractOperation
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization,
         $capture
-    )
-    {
+    ) {
         $transactionId = ($capture) ? $pendingAuthorization->getCaptureId()
             : $pendingAuthorization->getAuthorizationId();
 
@@ -377,8 +372,7 @@ class Authorization extends AbstractOperation
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization,
         $capture
-    )
-    {
+    ) {
         $transactionId = ($capture) ? $pendingAuthorization->getCaptureId()
             : $pendingAuthorization->getAuthorizationId();
 
@@ -418,8 +412,7 @@ class Authorization extends AbstractOperation
     protected function processNewAuthorization(
         PendingAuthorizationInterface $pendingAuthorization,
         AmazonOrderDetails $orderDetails = null
-    )
-    {
+    ) {
         $order = $this->orderRepository->get($pendingAuthorization->getOrderId());
         $payment = $this->orderPaymentRepository->get($pendingAuthorization->getPaymentId());
         $order->setPayment($payment);
@@ -462,8 +455,7 @@ class Authorization extends AbstractOperation
         OrderInterface $order,
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization
-    )
-    {
+    ) {
         $capture = false;
 
         try {
@@ -502,8 +494,7 @@ class Authorization extends AbstractOperation
         OrderInterface $order,
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization
-    )
-    {
+    ) {
         $capture = true;
 
         try {

--- a/Observer/DataAssignObserver.php
+++ b/Observer/DataAssignObserver.php
@@ -54,5 +54,4 @@ class DataAssignObserver extends AbstractDataAssignObserver
             }
         }
     }
-
 }

--- /dev/null
+++ b/Observer/KlarnaKcoOverride.php
@@ -0,0 +1,54 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Observer;
+
+use Magento\Framework\Event\ObserverInterface;
+use Magento\Framework\Event\Observer;
+use Amazon\Core\Helper\Data;
+use Amazon\Login\Helper\Session;
+
+class KlarnaKcoOverride implements ObserverInterface
+{
+    /**
+     * @var Data
+     */
+    private $coreHelper;
+
+    /**
+     * @var Session
+     */
+    private $sessionHelper;
+
+    /**
+     * @param Data $coreHelper
+     * @param Session $sessionHelper
+     */
+    public function __construct(
+        Data $coreHelper,
+        Session $sessionHelper
+    ) {
+        $this->coreHelper    = $coreHelper;
+        $this->sessionHelper = $sessionHelper;
+    }
+
+    public function execute(Observer $observer)
+    {
+        if ($this->coreHelper->isPwaEnabled() && $this->sessionHelper->isAmazonLoggedIn()) {
+            // Force customer to use default (Amazon) checkout
+            $observer->getOverrideObject()->setForceDisabled(true);
+        }
+    }
+}

--- a/Observer/LoadOrder.php
+++ b/Observer/LoadOrder.php
@@ -21,6 +21,8 @@ use Magento\Framework\Event\Observer;
 use Magento\Framework\Event\ObserverInterface;
 use Magento\Sales\Api\Data\OrderExtensionFactory;
 use Magento\Sales\Api\Data\OrderInterface;
+use Amazon\Payment\Api\Data\QuoteLinkInterfaceFactory;
+use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
 
 class LoadOrder implements ObserverInterface
 {
@@ -39,14 +41,22 @@ class LoadOrder implements ObserverInterface
      */
     private $coreHelper;
 
+    private $quoteLinkFactory;
+
+    private $adapter;
+
     public function __construct(
         OrderExtensionFactory $orderExtensionFactory,
         OrderLinkInterfaceFactory $orderLinkFactory,
-        Data $coreHelper
+        Data $coreHelper,
+        QuoteLinkInterfaceFactory $quoteLinkFactory,
+        AmazonPaymentAdapter $adapter
     ) {
         $this->orderExtensionFactory = $orderExtensionFactory;
         $this->orderLinkFactory      = $orderLinkFactory;
         $this->coreHelper            = $coreHelper;
+        $this->quoteLinkFactory = $quoteLinkFactory;
+        $this->adapter = $adapter;
     }
 
     public function execute(Observer $observer)
@@ -67,6 +77,19 @@ class LoadOrder implements ObserverInterface
 
             if ($amazonOrder->getId()) {
                 $orderExtension->setAmazonOrderReferenceId($amazonOrder);
+            } else {
+                if ($order->getQuoteId()) {
+                    $quoteLink = $this->quoteLinkFactory->create();
+                    $quoteLink->load($order->getQuoteId(), 'quote_id');
+
+                    if ($quoteLink->getAmazonOrderReferenceId()) {
+                        $amazonOrder->setAmazonOrderReferenceId($quoteLink->getAmazonOrderReferenceId())
+                            ->setOrderId($order->getId())
+                            ->save();
+
+                        $this->adapter->setOrderAttributes($order->getStoreId(), $quoteLink->getAmazonOrderReferenceId(), $order->getIncrementId());
+                    }
+                }
             }
         }
 

--- /dev/null
+++ b/Plugin/ConfirmOrderReference.php
@@ -0,0 +1,104 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+namespace Amazon\Payment\Plugin;
+
+use Amazon\Core\Exception\AmazonWebapiException;
+use Amazon\Payment\Api\Data\QuoteLinkInterface;
+use Magento\Checkout\Model\Session;
+use Magento\Checkout\Api\PaymentInformationManagementInterface;
+use Magento\Quote\Api\PaymentMethodManagementInterface;
+use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
+use Amazon\Payment\Model\OrderInformationManagement;
+use Magento\Quote\Api\Data\PaymentInterface;
+use Magento\Quote\Api\Data\AddressInterface;
+use Magento\Framework\Exception\LocalizedException;
+use Amazon\Payment\Gateway\Config\Config as GatewayConfig;
+use Magento\Quote\Api\CartRepositoryInterface;
+
+
+/**
+ * Class ConfirmOrderReference
+ *
+ * Confirm the OrderReference when payment details are saved
+ */
+class ConfirmOrderReference
+{
+    /**
+     * @var Session
+     */
+    private $checkoutSession;
+
+    /**
+     * @var OrderInformationManagement
+     */
+    private $orderInformationManagement;
+
+    /**
+     * @var CartRepositoryInterface
+     */
+    private $quoteRepository;
+
+    /**
+     * ConfirmOrderReference constructor.
+     * @param Session $checkoutSession
+     * @param OrderInformationManagement $orderInformationManagement
+     * @param CartRepositoryInterface $quoteRepository
+     */
+    public function __construct(
+        Session $checkoutSession,
+        OrderInformationManagement $orderInformationManagement,
+        CartRepositoryInterface $quoteRepository
+    ) {
+        $this->checkoutSession = $checkoutSession;
+        $this->orderInformationManagement = $orderInformationManagement;
+        $this->quoteRepository = $quoteRepository;
+    }
+
+    /**
+     * @param PaymentMethodManagementInterface $subject
+     * @param $result
+     * @param $cartId
+     * @param PaymentInterface $paymentMethod
+     * @param AddressInterface|null $billingAddress
+     * @return mixed
+     * @throws \Magento\Framework\Exception\LocalizedException
+     */
+    public function afterSet(
+        PaymentMethodManagementInterface $subject,
+        $result,
+        $cartId,
+        PaymentInterface $paymentMethod
+    ) {
+        if($paymentMethod->getMethod() == GatewayConfig::CODE) {
+            $quote = $this->quoteRepository->get($cartId);
+            $quoteExtensionAttributes = $quote->getExtensionAttributes();
+            if ($quoteExtensionAttributes) {
+                $amazonOrderReferenceId = $quoteExtensionAttributes
+                    ->getAmazonOrderReferenceId()
+                    ->getAmazonOrderReferenceId();
+
+                $this->orderInformationManagement->saveOrderInformation($amazonOrderReferenceId);
+                $this->orderInformationManagement->confirmOrderReference(
+                    $amazonOrderReferenceId,
+                    $quote->getStoreId()
+                );
+            }
+        }
+
+        return $result;
+    }
+}

--- a/Plugin/DisableAmazonPaymentMethod.php
+++ b/Plugin/DisableAmazonPaymentMethod.php
@@ -27,7 +27,7 @@ class DisableAmazonPaymentMethod
      */
     public function __construct(
         Session $checkoutSession
-    ){
+    ) {
         $this->checkoutSession = $checkoutSession;
     }
 
@@ -39,7 +39,7 @@ class DisableAmazonPaymentMethod
     public function afterIsAvailable(
         \Amazon\Payment\Model\Method\AmazonLoginMethod $subject,
         $result
-    ){
+    ) {
         /** @var \Magento\Quote\Model\Quote $quote */
         $quote = $this->checkoutSession->getQuote();
 

--- a/Plugin/ShippingInformationManagement.php
+++ b/Plugin/ShippingInformationManagement.php
@@ -80,7 +80,9 @@ class ShippingInformationManagement
             return $return;
         }
 
-        $amazonOrderReferenceId = $quote->getExtensionAttributes()->getAmazonOrderReferenceId();
+        $amazonOrderReferenceId = $quote->getExtensionAttributes()
+            ->getAmazonOrderReferenceId()
+            ->getAmazonOrderReferenceId();
 
         if ($amazonOrderReferenceId) {
             $this->orderInformationManagement->saveOrderInformation(
@@ -92,6 +94,16 @@ class ShippingInformationManagement
             );
         }
 
+        /*
+         * Magento\Quote\Model\Quote::setShippingAddress merges into the existing shipping address,
+         *  rather than replacing it.  Because not all addresses have a region_id, make sure that
+         *  the region_id is explicitly emptied, to prevent the old one being used.
+         */
+        $shippingAddress = $shippingInformation->getShippingAddress();
+        if(!$shippingAddress->hasData('region_id')) {
+            $shippingAddress->setRegionId("");
+        }
+
         return $return;
     }
 }

--- /dev/null
+++ b/Test/Mftf/ActionGroup/AmazonCheckoutActionGroup.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
+    <!--Begin checkout and proceed to final step-->
+    <actionGroup name="AmazonCheckoutBeginActionGroup">
+        <waitForElement selector="{{CheckoutShippingMethodsSection.shippingMethodRow}}" time="20" stepKey="apWaitForShipping"/>
+        <waitForPageLoad stepKey="apWaitPageLoadShipping" />
+
+        <click selector="{{CheckoutShippingMethodsSection.firstShippingMethod}}" stepKey="clickShippingMethod"/>
+        <waitForPageLoad stepKey="waitForPageLoadPayment1" />
+        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear1"/>
+
+        <click selector="{{CheckoutShippingMethodsSection.next}}" stepKey="clickContinueButton"/>
+        <waitForPageLoad stepKey="waitForPageLoadPayment2" />
+        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear2"/>
+    </actionGroup>
+    <!--Place order-->
+    <actionGroup name="AmazonCheckoutSubmitActionGroup" extends="AmazonCheckoutBeginActionGroup">
+        <!--Click Place Order button-->
+        <click selector="{{CheckoutPaymentSection.placeOrder}}" stepKey="clickPlaceOrder"/>
+
+        <!--See success messages-->
+        <see selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
+    </actionGroup>
+    <!--Select credit card number and submit-->
+    <actionGroup name="AmazonCheckoutCcActionGroup">
+        <arguments>
+            <argument name="cc" defaultValue="1111" type="string"/>
+        </arguments>
+        <executeJS function="return window.name;" stepKey="topName"/>
+        <!--Get wallet iframe name (dynamic)-->
+        <executeJS function="return jQuery('#walletWidgetDiv iframe').attr('name');" stepKey="iframeName"/>
+        <!--Expand Wallet Widget to expose all CC# (and avoid JS paging)-->
+        <executeJS function="jQuery('#walletWidgetDiv').css('height', '450px');" stepKey="executeJsHeight"/>
+        <!--Select CC#-->
+        <switchToIFrame userInput="{$iframeName}" stepKey="switchToIFrameWidget"/>
+        <executeJS function="$('.card-number:contains({{cc}})').closest('a').click();" stepKey="executeJsCc"/>
+        <!--Place order-->
+        <switchToWindow userInput="{$topName}" stepKey="switchToWindowTop" />
+        <waitForPageLoad stepKey="waitForPageLoadPayment1" />
+        <click selector="{{CheckoutPaymentSection.placeOrder}}" stepKey="clickPlaceOrder"/>
+        <waitForPageLoad stepKey="waitForPageLoadPayment2"/>
+    </actionGroup>
+</actionGroups>
\ No newline at end of file

--- /dev/null
+++ b/Test/Mftf/ActionGroup/AmazonLoginActionGroup.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
+    <!--Open login popup and complete form-->
+    <actionGroup name="AmazonLoginPopupActionGroup">
+        <!--Save opener window name since popup auto-closes-->
+        <executeJS function="return window.name;" stepKey="openerName"/>
+
+        <waitForPageLoad stepKey="waitForPageLoadPopup"/>
+        <switchToWindow userInput="amazonloginpopup" stepKey="switchToWindowLoginpopup"/>
+
+        <!-- Fill in login form -->
+        <waitForElement selector="{{AmazonLoginSection.apEmail}}" time="10" stepKey="apWaitForLogin"/>
+        <fillField selector="{{AmazonLoginSection.apEmail}}" userInput="{{AmazonLogin.email}}" stepKey="apEnterEmail"/>
+        <fillField selector="{{AmazonLoginSection.apPassword}}" userInput="{{AmazonLogin.password}}" stepKey="apEnterPassword"/>
+        <click selector="{{AmazonLoginSection.apSignin}}" stepKey="clickSigninButton"/>
+
+        <!--Prevent "NoSuchWindowException: window was already closed"-->
+        <switchToWindow userInput="{$openerName}" stepKey="switchToWindowOpener" />
+    </actionGroup>
+
+    <!--Fill in login from redirect form and submit-->
+    <actionGroup name="AmazonLoginRedirectActionGroup">
+        <waitForElement selector="{{AmazonLoginSection.apEmail}}" time="10" stepKey="apWaitForLogin"/>
+        <fillField selector="{{AmazonLoginSection.apEmail}}" userInput="{{AmazonLogin.email}}" stepKey="apEnterEmail"/>
+        <fillField selector="{{AmazonLoginSection.apPassword}}" userInput="{{AmazonLogin.password}}" stepKey="apEnterPassword"/>
+        <click selector="{{AmazonLoginSection.apSignin}}" stepKey="clickSigninButton"/>
+        <waitForPageLoad stepKey="waitForPageLoadLogin"/>
+        <conditionalClick selector="{{AmazonLoginSection.apConsent}}" dependentSelector="{{AmazonLoginSection.apConsent}}" visible="true" stepKey="clickLoginConsent"/>
+    </actionGroup>
+</actionGroups>
\ No newline at end of file

--- /dev/null
+++ b/Test/Mftf/Data/AmazonLoginData.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+          xsi:noNamespaceSchemaLocation="../../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataProfileSchema.xsd">
+    <entity name="AmazonLogin" type="amazon_login">
+        <data key="email">payment-test@amazon.com</data>
+        <data key="password">test123</data>
+    </entity>
+</entities>

--- a/Test/Mftf/Data/AmazonPaymentData.xml
+++ b/Test/Mftf/Data/AmazonPaymentData.xml
@@ -1,81 +1,81 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-          xsi:noNamespaceSchemaLocation="../../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataProfileSchema.xsd">
+          xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataProfileSchema.xsd">
     <entity name="SampleAmazonPaymentConfig" type="amazon_payment_config_state">
-        <requiredEntity type="merchant_id">SampleMerchantId</requiredEntity>
-        <requiredEntity type="access_key">SampleAccessKey</requiredEntity>
-        <requiredEntity type="secret_key">SampleSecretKey</requiredEntity>
-        <requiredEntity type="client_id">SampleClientId</requiredEntity>
-        <requiredEntity type="client_secret">SampleClientSecret</requiredEntity>
-        <requiredEntity type="payment_region">SamplePaymentRegion</requiredEntity>
-        <requiredEntity type="sandbox">SampleSandbox</requiredEntity>
-        <requiredEntity type="payment_action">SamplePaymentAction</requiredEntity>
-        <requiredEntity type="authorization_mode">SampleAuthorizationMode</requiredEntity>
-    </entity>
-    <entity name="SampleMerchantId" type="merchant_id">
+        <requiredEntity type="merchant_id">SampleAmazonMerchantId</requiredEntity>
+        <requiredEntity type="access_key">SampleAmazonAccessKey</requiredEntity>
+        <requiredEntity type="secret_key">SampleAmazonSecretKey</requiredEntity>
+        <requiredEntity type="client_id">SampleAmazonClientId</requiredEntity>
+        <requiredEntity type="client_secret">SampleAmazonClientSecret</requiredEntity>
+        <requiredEntity type="payment_region">SampleAmazonPaymentRegion</requiredEntity>
+        <requiredEntity type="sandbox">SampleAmazonSandbox</requiredEntity>
+        <requiredEntity type="payment_action">SampleAmazonPaymentAction</requiredEntity>
+        <requiredEntity type="authorization_mode">SampleAmazonAuthorizationMode</requiredEntity>
+    </entity>
+    <entity name="SampleAmazonMerchantId" type="merchant_id">
         <data key="value">someMerchantId</data>
     </entity>
-    <entity name="SampleAccessKey" type="access_key">
+    <entity name="SampleAmazonAccessKey" type="access_key">
         <data key="value">someAccessKey</data>
     </entity>
-    <entity name="SampleSecretKey" type="secret_key">
-        <data key="value">somePrivateKey</data>
+    <entity name="SampleAmazonSecretKey" type="secret_key">
+        <data key="value">someSecretKey</data>
     </entity>
-    <entity name="SampleClientId" type="client_id">
+    <entity name="SampleAmazonClientId" type="client_id">
         <data key="value">someClientId</data>
     </entity>
-    <entity name="SampleClientSecret" type="client_secret">
-        <data key="value">someClientSecret</data>
+    <entity name="SampleAmazonClientSecret" type="client_secret">
+        <data key="value">someClientSecretKey</data>
     </entity>
-    <entity name="SamplePaymentRegion" type="payment_region">
+    <entity name="SampleAmazonPaymentRegion" type="payment_region">
         <data key="value">us</data>
     </entity>
-    <entity name="SampleSandbox" type="sandbox">
+    <entity name="SampleAmazonSandbox" type="sandbox">
         <data key="value">1</data>
     </entity>
-    <entity name="SamplePaymentAction" type="payment_action">
+    <entity name="SampleAmazonPaymentAction" type="payment_action">
         <data key="value">authorize</data>
     </entity>
-    <entity name="SampleAuthorizationMode" type="authorization_mode">
+    <entity name="SampleAmazonAuthorizationMode" type="authorization_mode">
         <data key="value">synchronous</data>
     </entity>
     <!-- default configuration used to restore Magento config -->
     <entity name="DefaultAmazonPaymentConfig" type="amazon_payment_config_state">
-        <requiredEntity type="merchant_id">DefaultMerchantId</requiredEntity>
-        <requiredEntity type="access_key">DefaultAccessKey</requiredEntity>
-        <requiredEntity type="secret_key">DefaultSecretKey</requiredEntity>
-        <requiredEntity type="client_id">DefaultClientId</requiredEntity>
-        <requiredEntity type="client_secret">DefaultClientSecret</requiredEntity>
-        <requiredEntity type="payment_region">DefaultPaymentRegion</requiredEntity>
-        <requiredEntity type="sandbox">DefaultSandbox</requiredEntity>
-        <requiredEntity type="payment_action">DefaultPaymentAction</requiredEntity>
-        <requiredEntity type="authorization_mode">DefaultAuthorizationMode</requiredEntity>
-    </entity>
-    <entity name="DefaultMerchantId" type="merchant_id">
+        <requiredEntity type="merchant_id">DefaultAmazonMerchantId</requiredEntity>
+        <requiredEntity type="access_key">DefaultAmazonAccessKey</requiredEntity>
+        <requiredEntity type="secret_key">DefaultAmazonSecretKey</requiredEntity>
+        <requiredEntity type="client_id">DefaultAmazonClientId</requiredEntity>
+        <requiredEntity type="client_secret">DefaultAmazonClientSecret</requiredEntity>
+        <requiredEntity type="payment_region">DefaultAmazonPaymentRegion</requiredEntity>
+        <requiredEntity type="sandbox">DefaultAmazonSandbox</requiredEntity>
+        <requiredEntity type="payment_action">DefaultAmazonPaymentAction</requiredEntity>
+        <requiredEntity type="authorization_mode">DefaultAmazonAuthorizationMode</requiredEntity>
+    </entity>
+    <entity name="DefaultAmazonMerchantId" type="merchant_id">
         <data key="value"/>
     </entity>
-    <entity name="DefaultAccessKey" type="access_key">
+    <entity name="DefaultAmazonAccessKey" type="access_key">
         <data key="value"/>
     </entity>
-    <entity name="DefaultSecretKey" type="secret_key">
+    <entity name="DefaultAmazonSecretKey" type="secret_key">
         <data key="value"/>
     </entity>
-    <entity name="DefaultClientId" type="client_id">
+    <entity name="DefaultAmazonClientId" type="client_id">
         <data key="value"/>
     </entity>
-    <entity name="DefaultClientSecret" type="client_secret">
+    <entity name="DefaultAmazonClientSecret" type="client_secret">
         <data key="value"/>
     </entity>
-    <entity name="DefaultPaymentRegion" type="payment_region">
+    <entity name="DefaultAmazonPaymentRegion" type="payment_region">
         <data key="value"/>
     </entity>
-    <entity name="DefaultSandbox" type="sandbox">
+    <entity name="DefaultAmazonSandbox" type="sandbox">
         <data key="value"/>
     </entity>
-    <entity name="DefaultPaymentAction" type="payment_action">
+    <entity name="DefaultAmazonPaymentAction" type="payment_action">
         <data key="value">authorize</data>
     </entity>
-    <entity name="DefaultAuthorizationMode" type="authorization_mode">
+    <entity name="DefaultAmazonAuthorizationMode" type="authorization_mode">
         <data key="value">synchronous</data>
     </entity>
 </entities>

--- a/Test/Mftf/Metadata/amazon_payment_config-meta.xml
+++ b/Test/Mftf/Metadata/amazon_payment_config-meta.xml
@@ -1,42 +1,38 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <operations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-            xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataOperation.xsd">
+            xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataOperation.xsd">
     <operation name="CreateAmazonPaymentConfigState" dataType="amazon_payment_config_state" type="create" auth="adminFormKey" url="/admin/system_config/save/section/payment/" method="POST">
         <object key="groups" dataType="amazon_payment_config_state">
             <object key="amazon_payment" dataType="amazon_payment_config_state">
                 <object key="groups" dataType="amazon_payment_config_state">
-                    <object key="amazon_payment" dataType="amazon_payment_config_state">
-                        <object key="groups" dataType="amazon_payment_config_state">
-                            <object key="amazon_payment_required" dataType="amazon_payment_config_state">
-                                <object key="fields" dataType="amazon_payment_config_state">
-                                    <object key="merchant_id" dataType="merchant_id">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="access_key" dataType="access_key">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="secret_key" dataType="secret_key">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="client_id" dataType="client_id">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="client_secret" dataType="client_secret">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="payment_region" dataType="payment_region">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="sandbox" dataType="sandbox">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="payment_action" dataType="payment_action">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="authorization_mode" dataType="authorization_mode">
-                                        <field key="value">string</field>
-                                    </object>
-                                </object>
+                    <object key="credentials" dataType="amazon_payment_config_state">
+                        <object key="fields" dataType="amazon_payment_config_state">
+                            <object key="merchant_id" dataType="merchant_id">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="access_key" dataType="access_key">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="secret_key" dataType="secret_key">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="client_id" dataType="client_id">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="client_secret" dataType="client_secret">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="payment_region" dataType="payment_region">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="sandbox" dataType="sandbox">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="payment_action" dataType="payment_action">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="authorization_mode" dataType="authorization_mode">
+                                <field key="value">string</field>
                             </object>
                         </object>
                     </object>
@@ -44,4 +40,4 @@
             </object>
         </object>
     </operation>
-</operations>
+</operations>
\ No newline at end of file

--- a/Test/Mftf/Metadata/amazon_payment_config_meta.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<operations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-            xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataOperation.xsd">
-    <operation name="CreateAmazonPaymentConfigState" dataType="amazon_payment_config_state" type="create" auth="adminFormKey" url="/admin/system_config/save/section/payment/" method="POST">
-        <object key="groups" dataType="amazon_payment_config_state">
-            <object key="amazon_payment" dataType="amazon_payment_config_state">
-                <object key="groups" dataType="amazon_payment_config_state">
-                    <object key="amazon_payment" dataType="amazon_payment_config_state">
-                        <object key="groups" dataType="amazon_payment_config_state">
-                            <object key="amazon_payment_required" dataType="amazon_payment_config_state">
-                                <object key="fields" dataType="amazon_payment_config_state">
-                                    <object key="merchant_id" dataType="merchant_id">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="access_key" dataType="access_key">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="secret_key" dataType="secret_key">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="client_id" dataType="client_id">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="client_secret" dataType="client_secret">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="payment_region" dataType="payment_region">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="sandbox" dataType="sandbox">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="payment_action" dataType="payment_action">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="authorization_mode" dataType="authorization_mode">
-                                        <field key="value">string</field>
-                                    </object>
-                                </object>
-                            </object>
-                        </object>
-                    </object>
-                </object>
-            </object>
-        </object>
-    </operation>
-</operations>

--- /dev/null
+++ b/Test/Mftf/Section/AmazonCheckoutSection.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<sections xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/sectionObjectSchema.xsd">
+    <section name="AmazonCheckoutSection">
+        <element name="cartPayButton" type="img" selector="#PayWithAmazon-checkout-cart-shortcut-buttons img"/>
+        <element name="miniCartPayButton" type="img" selector="#minicart-amazon-pay-button img"/>
+        <element name="productPayButton" type="div" selector="#amazon-addtoCart-amazon-pay-button-product"/>
+        <element name="checkoutPayButton" type="img" selector=".amazon-button-container img"/>
+        <element name="loginButton" type="img" selector="#LoginWithAmazon-amazon-login img"/>
+    </section>
+</sections>

--- /dev/null
+++ b/Test/Mftf/Section/AmazonLoginSection.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<sections xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/sectionObjectSchema.xsd">
+    <section name="AmazonLoginSection">
+        <element name="apEmail" type="input" selector="#ap_email"/>
+        <element name="apPassword" type="input" selector="#ap_password"/>
+        <element name="apSignin" type="button" selector="#signInSubmit button"/>
+        <element name="apConsent" type="button" selector="[name=consentApproved]"/>
+    </section>
+</sections>

--- /dev/null
+++ b/Test/Mftf/Test/AmazonCheckoutDeclineTest.xml
@@ -0,0 +1,204 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
+    <test name="AmazonCheckoutDeclinePaymentMethod" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline PaymentMethodNotAllowed"/>
+            <description value="Test CC decline message and then success page elements for placed order with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="4545" />
+        </actionGroup>
+        <!--Decline Error Message-->
+        <waitForText userInput="Invalid payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+        <!--Use default CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupGood"/>
+        <!--See success message-->
+        <see selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
+    </test>
+    <test name="AmazonCheckoutDeclineInvalidPaymentMethod" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline InvalidPaymentMethod"/>
+            <description value="Test CC decline message and then success page elements for placed order with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="3434" />
+        </actionGroup>
+        <!--Decline Error Message-->
+        <waitForText userInput="There has been a problem with the selected payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+        <!--Verify iframe wallet message-->
+        <executeJS function="return window.name;" stepKey="topName"/>
+        <executeJS function="return jQuery('#walletWidgetDiv iframe').attr('name');" stepKey="iframeName"/>
+        <switchToIFrame userInput="{$iframeName}" stepKey="switchToIFramePaymentWidget"/>
+        <see selector=".action a" userInput="Verify card info or use another card" stepKey="seeVerify"/>
+        <switchToWindow userInput="{$topName}" stepKey="switchToWindowTop" />
+        <!--Use default CC# using reloaded iframe-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupGood"/>
+        <!--See success message-->
+        <see selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
+    </test>
+    <test name="AmazonCheckoutDeclineAmazonRejected" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline AmazonRejected"/>
+            <description value="Test CC decline message, logout, and redirect to cart with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="2323" />
+        </actionGroup>
+        <!--Decline Error Message-->
+        <waitForText userInput="please choose another payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>        <!--Verify iframe wallet message-->
+        <!--Wait for redirect to cart-->
+        <wait time="5" stepKey="waitRedirect"/>
+        <seeInCurrentUrl url="{{CheckoutCartPage.url}}" stepKey="assertUrl"/>
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+        <!--Confirm logged out from Amazon by logging in (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+    </test>
+    <test name="AmazonCheckoutDeclineTransactionTimedOutInstant" extends="AmazonCheckoutAddProductDetail">
+        <before>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode synchronous" />
+        </before>
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline TransactionTimedOut with Instant Authorization"/>
+            <description value="Test CC timeout message with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="5656" />
+        </actionGroup>
+        <!--Timeout Error Message-->
+        <waitForText userInput="please choose another payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+        <!--Wait for redirect to cart-->
+        <wait time="5" stepKey="waitRedirect"/>
+        <seeInCurrentUrl url="{{CheckoutCartPage.url}}" stepKey="assertUrl"/>
+    </test>
+    <test name="AmazonCheckoutDeclineTransactionTimedOutAutomatic" extends="AmazonCheckoutAddProductDetail">
+        <before>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode asynchronous" />
+        </before>
+        <after>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode synchronous" />
+        </after>
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline TransactionTimedOut with Automatic Authorization)"/>
+            <description value="Test CC timeout message with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="5656" />
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="Transaction has been declined" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+    </test>
+    <test name="AmazonCheckoutSCAAbandoned" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Amazon SCA Abandoned"/>
+            <title value="(SCA) Amazon SCA Abandoned"/>
+            <description value="Perform checkout from cart page and ensure SCA Abandoned page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with SCA Abandoned CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="4440" />
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="The SCA challenge was not completed successfully." selector="#checkoutError" stepKey="waitForText"/>
+    </test>
+    <test name="AmazonCheckoutSCAFailure" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Amazon SCA Failed"/>
+            <title value="(SCA) Amazon SCA Failed"/>
+            <description value="Perform checkout from cart page and ensure SCA Failure page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with SCA Failure CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="8320" />
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="Amazon Pay was unable to authenticate the payment instrument." selector="#checkoutError" stepKey="waitForText"/>
+    </test>
+</tests>

--- /dev/null
+++ b/Test/Mftf/Test/AmazonCheckoutSuccessTest.xml
@@ -0,0 +1,214 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
+    <test name="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Prepares product to be checked out"/>
+            <title value="Amazon Pay Add Product to Cart from Detail Page"/>
+            <description value="Creates and loads simple product and adds it to cart using Amazon Pay button on product detail page."/>
+            <severity value="BLOCKER"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+        </after>
+
+        <!--Go to product page-->
+        <amOnPage url="$$createSimpleProduct.custom_attributes[url_key]$$.html" stepKey="navigateToSimpleProductPage"/>
+        <waitForPageLoad stepKey="waitForPageLoadCatalog"/>
+
+        <!--Add to cart via Amazon Pay button on product page-->
+        <waitForElement selector="{{AmazonCheckoutSection.productPayButton}}" time="5" stepKey="apWaitForPayButton"/>
+        <click selector="{{AmazonCheckoutSection.productPayButton}}" stepKey="clickProductPayButton"/>
+
+        <!--Login (redirect)-->
+        <actionGroup ref="AmazonLoginRedirectActionGroup" stepKey="AmazonLoginRedirectActionGroup" />
+    </test>
+    <test name="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Prepares product to be checked out"/>
+            <title value="Amazon Pay Add Product to Cart"/>
+            <description value="Adds product to cart."/>
+            <severity value="BLOCKER"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+        </after>
+
+        <!--Go to product page-->
+        <amOnPage url="$$createSimpleProduct.custom_attributes[url_key]$$.html" stepKey="navigateToSimpleProductPage"/>
+        <waitForPageLoad stepKey="waitForPageLoadCatalog"/>
+
+        <!--Add Product to Shopping Cart-->
+        <actionGroup ref="addToCartFromStorefrontProductPage" stepKey="addToCartFromStorefrontProductPage">
+            <argument name="productName" value="$$createSimpleProduct.name$$"/>
+        </actionGroup>
+    </test>
+    <test name="AmazonCheckoutProductDetail" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Product Details"/>
+            <description value="Perform checkout from product details page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutCart" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Cart"/>
+            <description value="Perform checkout from cart page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutMiniCart" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Minicart"/>
+            <description value="Perform checkout from minicart and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Open minicart-->
+        <waitForElement selector="{{StorefrontMinicartSection.showCart}}" stepKey="waitForShowMinicart" />
+        <waitForElement selector="{{StorefrontMinicartSection.viewAndEditCart}}" stepKey="waitForCartLink" />
+        <click selector="{{StorefrontMinicartSection.showCart}}" stepKey="clickShowMinicart" />
+
+        <!--Login (redirect)-->
+        <click selector="{{AmazonCheckoutSection.miniCartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginRedirectActionGroup" stepKey="AmazonLoginRedirectActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutPage" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Checkout page"/>
+            <description value="Perform checkout from checkout page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Checkout-->
+        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="goToCheckoutFromMinicart"/>
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.checkoutPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutCustomer" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Customer Account page"/>
+            <description value="Perform checkout after logging in from customer account page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Customer page-->
+        <amOnPage url="/customer/account/" stepKey="goToMyAccountPage" />
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.loginButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutSCASuccess" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="(SCA) Amazon Pay Checkout from Cart"/>
+            <description value="Perform checkout from cart page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+</tests>

--- a/Test/Unit/Gateway/Command/CaptureStrategyCommandTest.php
+++ b/Test/Unit/Gateway/Command/CaptureStrategyCommandTest.php
@@ -17,6 +17,7 @@ namespace Amazon\Payment\Test\Unit\Gateway\Command;
 
 use Amazon\Payment\Gateway\Command\CaptureStrategyCommand;
 use Amazon\Core\Helper\Data;
+use Amazon\Payment\Gateway\Data\Order\OrderAdapterFactory;
 use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
 use Magento\Framework\Api\SearchCriteriaBuilder;
 use Magento\Framework\Api\FilterBuilder;
@@ -77,6 +78,11 @@ class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
      */
     private $coreHelper;
 
+    /**
+     * @var OrderAdapterFactory|MockObject
+     */
+    private $orderAdapterFactory;
+
     /**
      * Sets up base classes needed to mock the command strategy class
      */
@@ -91,6 +97,7 @@ class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
         $this->initTransactionRepositoryMock();
         $this->initFilterBuilderMock();
         $this->initSearchCriteriaBuilderMock();
+        $this->initOrderAdapterFactoryMock();
 
         $this->coreHelper = $this->getMockBuilder(\Amazon\Core\Helper\Data::class)
             ->disableOriginalConstructor()
@@ -101,7 +108,8 @@ class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
             $this->transactionRepository,
             $this->searchCriteriaBuilder,
             $this->filterBuilder,
-            $this->coreHelper
+            $this->coreHelper,
+            $this->orderAdapterFactory
         );
     }
 
@@ -264,4 +272,26 @@ class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
             ->setMethods(['getList', 'getTotalCount', 'delete', 'get', 'save', 'create', '__wakeup'])
             ->getMock();
     }
+
+    /**
+     * Create mock for Order Adapter Factory
+     */
+    public function initOrderAdapterFactoryMock()
+    {
+        $this->orderAdapterFactory = $this->getMockBuilder(OrderAdapterFactory::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['create'])
+            ->getMock();
+
+        $orderMock = $this->getMockBuilder(OrderAdapterInterface::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['getAmazonOrderID'])
+            ->getMock();
+
+        $orderMock->method('getAmazonOrderID')
+            ->willReturn('123456');
+
+        $this->orderAdapterFactory->method('create')
+            ->willReturn($orderMock);
+    }
 }

--- a/composer.json
+++ b/composer.json
@@ -2,25 +2,26 @@
   "name": "amzn/amazon-pay-module",
   "description": "Amazon Pay module",
   "type": "magento2-module",
-  "version": "3.0.0",
+  "version": "3.2.7",
   "license": [
     "Apache-2.0"
   ],
   "require": {
     "php": "~7.1.3||~7.2.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.0.0",
-    "amzn/login-with-amazon-module": "^3.0.0",
-    "magento/module-customer": "*",
-    "magento/module-eav": "*",
-    "magento/module-sales": "*",
-    "magento/module-quote": "*",
-    "magento/module-payment": "*",
-    "magento/module-backend": "*",
-    "magento/module-store": "*",
-    "magento/module-checkout": "*",
-    "magento/module-catalog": "*",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.2.7",
+    "amzn/login-with-amazon-module": "^3.2.7",
+    "magento/framework": "^102",
+    "magento/module-customer": "^102",
+    "magento/module-eav": "^102",
+    "magento/module-sales": "^102",
+    "magento/module-quote": "^101.1",
+    "magento/module-payment": "^100.3",
+    "magento/module-backend": "^101",
+    "magento/module-store": "^101",
+    "magento/module-checkout": "^100.3",
+    "magento/module-catalog": "^103",
     "magento/module-paypal": "*",
-    "magento/module-directory": "*"
+    "magento/module-directory": "^100.3"
   },
   "suggest": {
     "magento/module-customer": "*",

--- a/etc/di.xml
+++ b/etc/di.xml
@@ -165,15 +165,6 @@
         </arguments>
     </virtualType>
 
-    <!-- Capture Request -->
-    <type name="Amazon\Payment\Gateway\Request\CaptureRequestBuilder">
-        <arguments>
-            <argument name="config" xsi:type="object">AmazonGatewayConfig</argument>
-            <argument name="coreHelper" xsi:type="object">Amazon\Core\Helper\Data</argument>
-            <argument name="productMetadata" xsi:type="object">Magento\Framework\App\ProductMetadata</argument>
-        </arguments>
-    </type>
-
     <!-- Refund Command -->
     <virtualType name="AmazonRefundCommand" type="Magento\Payment\Gateway\Command\GatewayCommand">
         <arguments>
@@ -251,6 +242,9 @@
     <type name="Amazon\Payment\Model\Method\AmazonLoginMethod">
         <plugin name="disable_amazon_payment_method" type="Amazon\Payment\Plugin\DisableAmazonPaymentMethod" sortOrder="10" disabled="false"/>
     </type>
+    <type name="Magento\Quote\Model\PaymentMethodManagement">
+        <plugin name="confirm_order_reference_on_payment_details_save" type="Amazon\Payment\Plugin\ConfirmOrderReference" sortOrder="10" disabled="false"/>
+    </type>
 
     <type name="Amazon\Payment\Cron\ProcessAmazonRefunds">
         <arguments>

--- a/etc/frontend/events.xml
+++ b/etc/frontend/events.xml
@@ -19,4 +19,7 @@
     <event name="shortcut_buttons_container">
         <observer name="amazon_buttons" instance="Amazon\Payment\Observer\AddAmazonButton"/>
     </event>
+    <event name="kco_override_load_checkout">
+        <observer name="amazon_core_klarna_kco_override" instance="Amazon\Payment\Observer\KlarnaKcoOverride" />
+    </event>
 </config>

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Payment" setup_version="3.0.0" >
+    <module name="Amazon_Payment" setup_version="3.2.7" >
         <sequence>
             <module name="Amazon_Core"/>
             <module name="Amazon_Login"/>

--- a/view/frontend/web/css/source/_module.less
+++ b/view/frontend/web/css/source/_module.less
@@ -120,6 +120,11 @@
         }
     }
 
+    /** hide alt currency - if multicurrency is enabled this will be unhidden dynamically **/
+    tr.totals.charge {
+        display: none;
+    }
+
     .amazon-widget {
         max-width: 400px;
         height: 228px;

--- a/view/frontend/web/js/action/place-order.js
+++ b/view/frontend/web/js/action/place-order.js
@@ -22,19 +22,20 @@ define(
         'Magento_Checkout/js/model/error-processor',
         'Magento_Customer/js/model/customer',
         'Magento_Checkout/js/model/full-screen-loader',
-        'Amazon_Payment/js/model/storage'
+        'Amazon_Payment/js/model/storage',
+        'Amazon_Payment/js/model/amazonPaymentConfig'
     ],
-    function (quote, urlBuilder, storage, url, errorProcessor, customer, fullScreenLoader, amazonStorage) {
+    function (quote, urlBuilder, storage, url, errorProcessor, customer, fullScreenLoader, amazonStorage, amazonPaymentConfig) {
         'use strict';
 
         return function (paymentData, redirectOnSuccess) {
-            var serviceUrl, payload;
+            var serviceUrl, payload, intervalId;
 
             redirectOnSuccess = redirectOnSuccess !== false;
 
             /** Checkout for guest and registered customer. */
             if (!customer.isLoggedIn()) {
-                serviceUrl = urlBuilder.createUrl('/guest-carts/:quoteId/payment-information', {
+                serviceUrl = urlBuilder.createUrl('/guest-carts/:quoteId/set-payment-information', {
                     quoteId: quote.getQuoteId()
                 });
                 payload = {
@@ -44,7 +45,7 @@ define(
                     billingAddress: quote.billingAddress()
                 };
             } else {
-                serviceUrl = urlBuilder.createUrl('/carts/mine/payment-information', {});
+                serviceUrl = urlBuilder.createUrl('/carts/mine/set-payment-information', {});
                 payload = {
                     cartId: quote.getQuoteId(),
                     paymentMethod: paymentData,
@@ -53,30 +54,55 @@ define(
             }
 
             fullScreenLoader.startLoader();
-
-            return storage.post(
-                serviceUrl,
-                JSON.stringify(payload)
-            ).done(
-                function () {
-                    if (redirectOnSuccess) {
-                        window.location.replace(url.build('checkout/onepage/success/'));
+            if(['de', 'uk'].indexOf(amazonPaymentConfig.getValue('region')) !== -1) {
+                console.log('SCA enabled for region: ' + amazonPaymentConfig.getValue('region'));
+                return OffAmazonPayments.initConfirmationFlow(amazonPaymentConfig.getValue('merchantId'), amazonStorage.getOrderReference(), function(confirmationFlow) {
+                    return storage.post(
+                        serviceUrl,
+                        JSON.stringify(payload)
+                    ).done(
+                        function () {
+                            confirmationFlow.success();
+                        }
+                    ).fail(
+                        function (response) {
+                            confirmationFlow.error();
+                            errorProcessor.process(response);
+                            amazonStorage.amazonDeclineCode(response.responseJSON.code);
+                            fullScreenLoader.stopLoader(true);
+                            if (response.responseJSON.code === 4273) {
+                                setTimeout(function () {
+                                    window.location.replace(url.build('checkout/cart/'));
+                                }, 5000);
+                            }
+                        }
+                    );
+                });
+            } else {
+                console.log('SCA disabled for region: ' + amazonPaymentConfig.getValue('region'));
+                return storage.post(
+                    serviceUrl,
+                    JSON.stringify(payload)
+                ).done(
+                    function () {
+                        if(redirectOnSuccess) {
+                            window.location.replace(url.build('amazonpayments/payment/completecheckout/?AuthenticationStatus=Success'));
+                        }
                     }
-                }
-            ).fail(
-                function (response) {
-                    errorProcessor.process(response);
-                    amazonStorage.amazonDeclineCode(response.responseJSON.code);
-                    fullScreenLoader.stopLoader(true);
-                    if (response.responseJSON.code === 4273) {
-                        var intervalId = setInterval(function () {
-                            clearInterval(intervalId);
-                            window.location.replace(url.build('checkout/cart/'));
-                        }, 5000);
-
+                ).fail(
+                    function (response) {
+                        errorProcessor.process(response);
+                        amazonStorage.amazonDeclineCode(response.responseJSON.code);
+                        fullScreenLoader.stopLoader(true);
+                        if (response.responseJSON.code === 4273) {
+                            intervalId = setInterval(function () {
+                                clearInterval(intervalId);
+                                window.location.replace(url.build('checkout/cart/'));
+                            }, 5000);
+                        }
                     }
-                }
-            );
+                );
+            }
         };
     }
 );

--- a/view/frontend/web/js/amazon-button.js
+++ b/view/frontend/web/js/amazon-button.js
@@ -24,9 +24,10 @@ define([
     'uiRegistry'
 ], function ($, customerData, sectionConfig, amazonPaymentConfig, amazonCsrf) {
     'use strict';
-    var _this, $button;
+    var _this;
 
     if (amazonPaymentConfig.isDefined()) {
+
         $.widget('amazon.AmazonButton', {
             options: {
                 merchantId: null,
@@ -42,9 +43,17 @@ define([
              */
             _create: function () {
                 _this = this;
-                $button = this.element;
+
                 this._verifyAmazonConfig();
-                _this._renderAmazonButton();
+
+                if (typeof OffAmazonPayments === 'undefined') {
+                    // async render
+                    $(window).on('OffAmazonPayments', $.proxy(function () {
+                        this._renderAmazonButton();
+                    }, this));
+                } else {
+                    this._renderAmazonButton();
+                }
             },
 
             /**
@@ -53,15 +62,15 @@ define([
              */
             _verifyAmazonConfig: function () {
                 if (amazonPaymentConfig.isDefined()) {
-                    _this.options.merchantId = amazonPaymentConfig.getValue('merchantId');
-                    _this.options.buttonType = _this.options.buttonType === 'LwA' ?
+                    this.options.merchantId = amazonPaymentConfig.getValue('merchantId');
+                    this.options.buttonType = this.options.buttonType === 'LwA' ?
                         amazonPaymentConfig.getValue('buttonTypeLwa') : amazonPaymentConfig.getValue('buttonTypePwa');
-                    _this.options.buttonColor = amazonPaymentConfig.getValue('buttonColor');
-                    _this.options.buttonSize = amazonPaymentConfig.getValue('buttonSize');
-                    _this.options.redirectUrl = amazonPaymentConfig.getValue('redirectUrl');
-                    _this.options.loginPostUrl = amazonPaymentConfig.getValue('loginPostUrl');
-                    _this.options.loginScope = amazonPaymentConfig.getValue('loginScope');
-                    _this.options.buttonLanguage = amazonPaymentConfig.getValue('displayLanguage');
+                    this.options.buttonColor = amazonPaymentConfig.getValue('buttonColor');
+                    this.options.buttonSize = amazonPaymentConfig.getValue('buttonSize');
+                    this.options.redirectUrl = amazonPaymentConfig.getValue('redirectUrl');
+                    this.options.loginPostUrl = amazonPaymentConfig.getValue('loginPostUrl');
+                    this.options.loginScope = amazonPaymentConfig.getValue('loginScope');
+                    this.options.buttonLanguage = amazonPaymentConfig.getValue('displayLanguage');
                 }
             },
 
@@ -123,7 +132,7 @@ define([
              */
             usePopUp: function () {
                 return window.location.protocol === 'https:' && !$('body').hasClass('catalog-product-view') &&
-                    !_this._touchSupported();
+                    !this._touchSupported();
             },
 
             /**
@@ -131,11 +140,11 @@ define([
              * @private
              */
             _renderAmazonButton: function () {
-                OffAmazonPayments.Button($button.attr('id'), _this.options.merchantId, { //eslint-disable-line no-undef
-                    type: _this.options.buttonType,
-                    color: _this.options.buttonColor,
-                    size: _this.options.buttonSize,
-                    language: _this.options.buttonLanguage,
+                OffAmazonPayments.Button(this.element[0].id, this.options.merchantId, { //eslint-disable-line no-undef
+                    type: this.options.buttonType,
+                    color: this.options.buttonColor,
+                    size: this.options.buttonSize,
+                    language: this.options.buttonLanguage,
 
                     /**
                      * Authorization callback
@@ -155,8 +164,8 @@ define([
              */
             _getLoginOptions: function () {
                 return {
-                    scope: _this.options.loginScope,
-                    popup: _this.usePopUp(),
+                    scope: this.options.loginScope,
+                    popup: this.usePopUp(),
                     state: amazonCsrf.generateNewValue()
                 };
             }

--- a/view/frontend/web/js/amazon-core.js
+++ b/view/frontend/web/js/amazon-core.js
@@ -16,17 +16,22 @@
 define([
     'jquery',
     'ko',
+    'mage/url',
     'amazonPaymentConfig',
     'amazonWidgetsLoader',
     'bluebird',
     'jquery/jquery-storageapi'
-], function ($, ko, amazonPaymentConfig) {
+], function ($, ko, url, amazonPaymentConfig) {
     'use strict';
 
     var clientId = amazonPaymentConfig.getValue('clientId'),
         amazonDefined = ko.observable(false),
         amazonLoginError = ko.observable(false),
-        accessToken = ko.observable(null);
+        accessToken = ko.observable(null),
+        // Match region config to amazon.Login.Region
+        regions = {'us': 'NA', 'de': 'EU', 'uk': 'EU', 'jp': 'APAC'},
+        sandboxMode,
+        region;
 
     if (typeof amazon === 'undefined') {
         /**
@@ -35,12 +40,23 @@ define([
         window.onAmazonLoginReady = function () {
             setClientId(clientId);  //eslint-disable-line no-use-before-define
             doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
+
+            sandboxMode = amazonPaymentConfig.getValue('isSandboxEnabled', false);
+            amazon.Login.setSandboxMode(sandboxMode); //eslint-disable-line no-undef
+
+            region = regions[amazonPaymentConfig.getValue('region')];
+            amazon.Login.setRegion(region); //eslint-disable-line no-undef
         };
     } else {
         setClientId(clientId);  //eslint-disable-line no-use-before-define
         doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
     }
 
+    // Widgets.js ready callback
+    window.onAmazonPaymentsReady = function() {
+        $(window).trigger('OffAmazonPayments');
+    };
+
     /**
      * Set Client ID
      * @param {String} cid
@@ -54,16 +70,21 @@ define([
      * Log user out of amazon
      */
     function amazonLogout() {
-        if (amazonDefined()) {
-            amazon.Login.logout(); //eslint-disable-line no-undef
-        } else {
-            var logout = amazonDefined.subscribe(function (defined) { //eslint-disable-line vars-on-top
-                if (defined) {
-                    amazon.Login.logout(); // eslint-disable-line no-undef
-                    logout.dispose(); //remove subscribe
-                }
-            });
-        }
+        $.ajax({
+            url: url.build('amazon/logout'),
+            context: this
+        }).always(function () {
+            if (amazonDefined()) {
+                amazon.Login.logout(); //eslint-disable-line no-undef
+            } else {
+                var logout = amazonDefined.subscribe(function (defined) { //eslint-disable-line vars-on-top
+                    if (defined) {
+                        amazon.Login.logout(); // eslint-disable-line no-undef
+                        logout.dispose(); //remove subscribe
+                    }
+                });
+            }
+        });
     }
 
     /**

--- a/view/frontend/web/js/amazon-widgets-loader.js
+++ b/view/frontend/web/js/amazon-widgets-loader.js
@@ -13,15 +13,10 @@
  * permissions and limitations under the License.
  */
 
-var registry = require('uiRegistry');
-
-if (registry.get('amazonPayment') !== undefined) {
-    var amazonPayment = registry.get('amazonPayment');
-
-    define([amazonPayment.widgetUrl], function () {
-        'use strict';
-
-        //after amazon widgets file as loaded
-
+define(['uiRegistry'], function(registry) {
+    'use strict';
+    registry.get('amazonPayment', function (amazonPayment) {
+        // Load external Widgets.js
+        require([amazonPayment.widgetUrl]);
     });
-}
+});

--- a/view/frontend/web/js/model/storage.js
+++ b/view/frontend/web/js/model/storage.js
@@ -67,7 +67,7 @@ define(
          */
         function amazonLogOut() {
             if (amazonCore.amazonDefined()) {
-                amazon.Login.logout(); // eslint-disable-line no-undef
+                amazonCore.AmazonLogout();
             }
             this.isAmazonAccountLoggedIn(false);
         }

--- a/view/frontend/web/js/view/checkout-widget-address.js
+++ b/view/frontend/web/js/view/checkout-widget-address.js
@@ -105,7 +105,7 @@ define(
                      * Error callback
                      */
                     onError: function (error) {
-                        console.log(error);
+                        console.log('OffAmazonPayments.Widgets.AddressBook', error.getErrorCode(), error.getErrorMessage());
                     }
                 }).bind(self.options.addressWidgetDOMId);
             },

--- a/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
+++ b/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
@@ -41,17 +41,16 @@ define(
     ) {
         'use strict';
 
-        var self,
+        var context,
             countryData = customerData.get('directory-data');
 
         return Component.extend({
             defaults: {
-                template: 'Amazon_Payment/payment/amazon-payment-widget'
-            },
-            options: {
-                sellerId: registry.get('amazonPayment').merchantId,
+                template: 'Amazon_Payment/payment/amazon-payment-widget',
                 paymentWidgetDOMId: 'walletWidgetDiv',
-                widgetScope: registry.get('amazonPayment').loginScope
+                presentmentDOMId: 'tr.totals.charge',
+                apInputDOMId: '#amazon_payment',
+                customerEmail: '#customer-email'
             },
             isCustomerLoggedIn: customer.isLoggedIn,
             isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
@@ -64,7 +63,7 @@ define(
              * Inits
              */
             initialize: function () {
-                self = this;
+                context = this;
                 this._super();
             },
 
@@ -72,20 +71,33 @@ define(
              * Init payment widget
              */
             initPaymentWidget: function () {
-                var $amazonPayment = $('#amazon_payment');
+                var $amazonPayment = $(context.apInputDOMId);
 
-                self.renderPaymentWidget();
+                context.initDefaultValues();
+                context.renderPaymentWidget();
                 $amazonPayment.trigger('click'); //activate Amazon Pay method on render
                 $amazonPayment.trigger('rendered');
             },
 
+            /**
+             * Init potentially asynchronous values
+             */
+            initDefaultValues: function () {
+                registry.get('amazonPayment', function (amazonPayment) {
+                    context.widgetScope = amazonPayment.loginScope;
+                    context.sellerId = amazonPayment.merchantId;
+                    context.presentmentCurrency = amazonPayment.presentmentCurrency;
+                    context.useMultiCurrency = amazonPayment.useMultiCurrency;
+                });
+            },
+
             /**
              * render Amazon Pay Widget
              */
             renderPaymentWidget: function () {
-                new OffAmazonPayments.Widgets.Wallet({ // eslint-disable-line no-undef
-                    sellerId: self.options.sellerId,
-                    scope: self.options.widgetScope,
+                var widget = new OffAmazonPayments.Widgets.Wallet({ // eslint-disable-line no-undef
+                    sellerId: context.sellerId,
+                    scope: context.widgetScope,
                     amazonOrderReferenceId: amazonStorage.getOrderReference(),
 
                     /**
@@ -93,7 +105,7 @@ define(
                      */
                     onPaymentSelect: function () { // orderReference
                         amazonStorage.isPlaceOrderDisabled(true);
-                        self.setBillingAddressFromAmazon();
+                        context.setBillingAddressFromAmazon();
                     },
                     design: {
                         designMode: 'responsive'
@@ -105,7 +117,15 @@ define(
                     onError: function (error) {
                         errorProcessor.process(error);
                     }
-                }).bind(self.options.paymentWidgetDOMId);
+                });
+                if (context.useMultiCurrency) {
+                    widget.setPresentmentCurrency(context.presentmentCurrency);
+                    $(context.presentmentDOMId).hide();
+                }
+                else {
+                    $(context.presentmentDOMId).show();
+                }
+                widget.bind(context.paymentWidgetDOMId);
             },
 
             /**
@@ -162,11 +182,11 @@ define(
                         selectBillingAddress(addressData);
                         amazonStorage.isPlaceOrderDisabled(false);
 
-                        if(window.checkoutConfig.amazonLogin.amazon_customer_email) {
-                            var customerField = $('#customer-email').val();
+                        if (window.checkoutConfig.amazonLogin.amazon_customer_email) {
+                            var customerField = $(context.customerEmail).val();
 
                             if (!customerField) {
-                                $('#customer-email').val(window.checkoutConfig.amazonLogin.amazon_customer_email);
+                                $(context.customerEmail).val(window.checkoutConfig.amazonLogin.amazon_customer_email);
                             }
                         }
                     }
@@ -199,8 +219,6 @@ define(
             placeOrder: function (data, event) {
                 var placeOrder;
 
-                self = this;
-
                 if (event) {
                     event.preventDefault();
                 }
@@ -210,7 +228,7 @@ define(
                     placeOrder = placeOrderAction(this.getData(), this.redirectAfterPlaceOrder);
 
                     $.when(placeOrder).fail(function () {
-                        self.isPlaceOrderActionAllowed(true);
+                        context.isPlaceOrderActionAllowed(true);
                     }).done(this.afterPlaceOrder.bind(this));
 
                     return true;

--- a/view/frontend/web/js/view/payment/method-renderer/amazonlogin.js
+++ b/view/frontend/web/js/view/payment/method-renderer/amazonlogin.js
@@ -1,28 +1,14 @@
 define(
     [
-        'jquery',
         'Magento_Checkout/js/view/payment/default',
-        'ko',
         'Amazon_Payment/js/model/storage',
-        'mage/storage',
-        'amazonPaymentConfig',
-        'uiRegistry',
-        'Amazon_Login/js/view/login-button'
     ],
     function (
-        $,
         Component,
-        ko,
-        amazonStorage,
-        storage,
-        amazonPaymentConfig,
-        registry,
-        loginButton
+        amazonStorage
     ) {
         'use strict';
 
-        var self;
-
         return Component.extend(
             {
                 defaults: {

