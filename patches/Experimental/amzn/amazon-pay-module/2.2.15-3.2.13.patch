--- a/Block/Minicart/Button.php
+++ b/Block/Minicart/Button.php
@@ -15,7 +15,6 @@
  */
 namespace Amazon\Payment\Block\Minicart;
 
-
 use Magento\Checkout\Model\Session;
 use Amazon\Payment\Helper\Data;
 use Amazon\Core\Helper\Data as AmazonCoreHelper;

--- a/Block/Widget/ResetPassword.php
+++ b/Block/Widget/ResetPassword.php
@@ -14,6 +14,9 @@ use Magento\Framework\UrlFactory;
 use Magento\Customer\Model\Session;
 use Amazon\Login\Api\CustomerLinkRepositoryInterface;
 
+/**
+ * @api
+ */
 class ResetPassword extends Template
 {
 
@@ -45,7 +48,8 @@ class ResetPassword extends Template
         return $this;
     }
 
-    public function displayAmazonInfo() {
+    public function displayAmazonInfo()
+    {
         $id = $this->session->getCustomer()->getId();
 
         $amazon = $this->customerLink->get($id);
@@ -57,10 +61,10 @@ class ResetPassword extends Template
         return false;
     }
 
-    public function getLink() {
+    public function getLink()
+    {
         $url = $this->urlModel->getUrl('customer/account/forgotpassword');
 
         return $url;
     }
-
-}
\ No newline at end of file
+}

--- a/Controller/Payment/CompleteCheckout.php
+++ b/Controller/Payment/CompleteCheckout.php
@@ -15,6 +15,7 @@
  */
 namespace Amazon\Payment\Controller\Payment;
 
+use Amazon\Core\Model\AmazonConfig;
 use Amazon\Core\Exception\AmazonWebapiException;
 use Amazon\Core\Logger\ExceptionLogger;
 use Magento\Framework\App\Action\Action;
@@ -35,6 +36,11 @@ use Magento\Framework\App\ObjectManager;
 class CompleteCheckout extends Action
 {
 
+    /**
+     * @var AmazonConfig
+     */
+    private $amazonConfig;
+
     /**
      * @var CheckoutSession
      */
@@ -59,6 +65,7 @@ class CompleteCheckout extends Action
      * CompleteCheckout constructor.
      *
      * @param Context $context
+     * @param AmazonConfig $amazonConfig
      * @param CartManagementInterface $cartManagement
      * @param GuestCartManagementInterface $guestCartManagement
      * @param CheckoutSession $checkoutSession
@@ -69,6 +76,7 @@ class CompleteCheckout extends Action
      */
     public function __construct(
         Context $context,
+        AmazonConfig $amazonConfig,
         CartManagementInterface $cartManagement,
         GuestCartManagementInterface $guestCartManagement,
         CheckoutSession $checkoutSession,
@@ -78,6 +86,7 @@ class CompleteCheckout extends Action
         ExceptionLogger $exceptionLogger = null
     ) {
         parent::__construct($context);
+        $this->amazonConfig = $amazonConfig;
         $this->cartManagement = $cartManagement;
         $this->checkoutSession = $checkoutSession;
         $this->session = $session;

--- a/Cron/GetAmazonAuthorizationUpdates.php
+++ b/Cron/GetAmazonAuthorizationUpdates.php
@@ -120,7 +120,8 @@ class GetAmazonAuthorizationUpdates
      * amazon_pending_authorization table have these IDs if they are not set by matching them to a transaction that
      * has matching transaction or parent transaction IDs.
      */
-    private function updateIds() {
+    private function updateIds()
+    {
         // only get items that have no order ID set since we don't want to have to keep repeating this
         $collection = $this->collectionFactory
             ->create()
@@ -188,8 +189,7 @@ class GetAmazonAuthorizationUpdates
         foreach ($pendingAuthorizationIds as $pendingAuthorizationId) {
             try {
                 $this->authorization->updateAuthorization($pendingAuthorizationId);
-            }
-            catch (\Exception $e) {
+            } catch (\Exception $e) {
                 $this->logger->error($e);
             }
         }

--- a/Cron/GetAmazonCaptureUpdates.php
+++ b/Cron/GetAmazonCaptureUpdates.php
@@ -120,7 +120,8 @@ class GetAmazonCaptureUpdates
      * amazon_pending_capture table have these IDs if they are not set by matching them to a transaction that
      * has matching transaction or parent transaction IDs.
      */
-    private function updateIds() {
+    private function updateIds()
+    {
         // only get items that have no order ID set since we don't want to have to keep repeating this
         $collection = $this->collectionFactory
             ->create()
@@ -188,8 +189,7 @@ class GetAmazonCaptureUpdates
         foreach ($pendingCaptureIds as $pendingCaptureId) {
             try {
                 $this->capture->updateCapture($pendingCaptureId);
-            }
-            catch (\Exception $e) {
+            } catch (\Exception $e) {
                 $this->logger->error($e);
             }
         }

--- a/Domain/AmazonAuthorizationStatus.php
+++ b/Domain/AmazonAuthorizationStatus.php
@@ -29,7 +29,4 @@ class AmazonAuthorizationStatus extends AbstractAmazonStatus
     const REASON_MAX_CAPTURES_PROCESSED = 'MaxCapturesProcessed';
     const REASON_SELLER_CLOSED = 'SellerClosed';
     const REASON_EXPIRED_UNUSED = 'ExpiredUnused';
-
-    const CODE_HARD_DECLINE = 4273;
-    const CODE_SOFT_DECLINE = 7638;
 }

--- a/Gateway/Command/CaptureStrategyCommand.php
+++ b/Gateway/Command/CaptureStrategyCommand.php
@@ -27,6 +27,7 @@ use Magento\Sales\Api\Data\TransactionInterface;
 use Magento\Framework\App\ObjectManager;
 use Amazon\Core\Helper\Data;
 use Amazon\Core\Logger\ExceptionLogger;
+use Amazon\Payment\Gateway\Data\Order\OrderAdapterFactory;
 
 class CaptureStrategyCommand implements CommandInterface
 {
@@ -35,7 +36,7 @@ class CaptureStrategyCommand implements CommandInterface
 
     const CAPTURE = 'settlement';
 
-    const AUTHORIZE_CAPTURE = 'capture';
+    const PARTIAL_CAPTURE = 'partial_capture';
 
     /**
      * @var CommandPoolInterface
@@ -57,6 +58,11 @@ class CaptureStrategyCommand implements CommandInterface
      */
     private $filterBuilder;
 
+    /**
+     * @var OrderAdapterFactory
+     */
+    private $orderAdapterFactory;
+
     /**
      * @var Data
      */
@@ -75,6 +81,7 @@ class CaptureStrategyCommand implements CommandInterface
      * @param SearchCriteriaBuilder $searchCriteriaBuilder
      * @param FilterBuilder $filterBuilder
      * @param Data $coreHelper
+     * @param OrderAdapterFactory $orderAdapterFactory
      * @param ExceptionLogger $exceptionLogger
      */
     public function __construct(
@@ -83,6 +90,7 @@ class CaptureStrategyCommand implements CommandInterface
         SearchCriteriaBuilder $searchCriteriaBuilder,
         FilterBuilder $filterBuilder,
         Data $coreHelper,
+        OrderAdapterFactory $orderAdapterFactory,
         ExceptionLogger $exceptionLogger = null
     ) {
         $this->commandPool = $commandPool;
@@ -90,6 +98,8 @@ class CaptureStrategyCommand implements CommandInterface
         $this->searchCriteriaBuilder = $searchCriteriaBuilder;
         $this->filterBuilder = $filterBuilder;
         $this->coreHelper = $coreHelper;
+        $this->orderAdapterFactory = $orderAdapterFactory;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
     }
 
     /**
@@ -101,10 +111,25 @@ class CaptureStrategyCommand implements CommandInterface
             if (isset($commandSubject['payment'])) {
                 $paymentDO = $commandSubject['payment'];
                 $paymentInfo = $paymentDO->getPayment();
+
+                // The magento order adapter doesn't expose everything we need to send a request to the AP API so we
+                // need to use our own version with the details we need exposed in custom methods.
+                $orderAdapter = $this->orderAdapterFactory->create(
+                    ['order' => $paymentInfo->getOrder()]
+                );
+
+                $commandSubject['partial_capture'] = false;
+                $commandSubject['amazon_order_id'] = $orderAdapter->getAmazonOrderID();
+                $commandSubject['multicurrency'] = $orderAdapter->getMulticurrencyDetails($commandSubject['amount']);
+
                 ContextHelper::assertOrderPayment($paymentInfo);
 
                 $command = $this->getCommand($paymentInfo);
                 if ($command) {
+                    if ($command == self::PARTIAL_CAPTURE) {
+                        $commandSubject['partial_capture'] = true;
+                        $command = self::SALE;
+                    }
                     $this->commandPool->get($command)->execute($commandSubject);
                 }
             }
@@ -115,7 +140,8 @@ class CaptureStrategyCommand implements CommandInterface
     }
 
     /**
-     * Get execution command name
+     * Get execution command name - if there's an authorization, this is just a settlement, if not, could be
+     * a partial capture situation where we need to completely auth and capture again against the same order
      *
      * @param  OrderPaymentInterface $payment
      * @return string
@@ -124,30 +150,18 @@ class CaptureStrategyCommand implements CommandInterface
     {
         $isCaptured = $this->captureTransactionExists($payment);
 
-        // check if a transaction has happened and is captured
-        if (!$payment->getAuthorizationTransaction() && !$isCaptured) {
-
-            if ($this->coreHelper->getPaymentAction() == 'authorize_capture') {
-                // charge on order
-                return self::SALE;
-            }
-            else {
-                // charge on invoice/shipment
-                return self::AUTHORIZE_CAPTURE;
-            }
-        }
-
-        // capture on settlement/invoice
+        // If an authorization exists, we're going to settle it with a capture
         if (!$isCaptured && $payment->getAuthorizationTransaction()) {
             return self::CAPTURE;
         }
 
-        // failed to determine action from prior tests, so use module settings
-        if ($this->coreHelper->getPaymentAction() == 'authorize_capture') {
-            self::SALE;
+        // Item has already been captured - need to reauthorize and capture (partial capture)
+        if ($isCaptured) {
+            return self::PARTIAL_CAPTURE;
         }
 
-        return self::AUTHORIZE_CAPTURE;
+        // We're in a situation where we need a reauth and capture.
+        return self::SALE;
     }
 
     /**
@@ -179,6 +193,6 @@ class CaptureStrategyCommand implements CommandInterface
         $searchCriteria = $this->searchCriteriaBuilder->create();
 
         $count = $this->transactionRepository->getList($searchCriteria)->getTotalCount();
-        return (boolean) $count;
+        return (boolean)$count;
     }
 }

--- /dev/null
+++ b/Gateway/Data/Order/OrderAdapter.php
@@ -0,0 +1,231 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+namespace Amazon\Payment\Gateway\Data\Order;
+
+use Magento\Payment\Gateway\Data\Order\AddressAdapterFactory;
+use Magento\Payment\Gateway\Data\AddressAdapterInterface;
+use Magento\Payment\Gateway\Data\OrderAdapterInterface;
+use Magento\Sales\Model\Order;
+use Amazon\Core\Model\AmazonConfig;
+use Amazon\Core\Helper\Data;
+
+/**
+ * Class OrderAdapter
+ */
+class OrderAdapter implements OrderAdapterInterface
+{
+    /**
+     * @var Order
+     */
+    private $order;
+
+    /**
+     * @var AddressAdapter
+     */
+    private $addressAdapterFactory;
+
+    /**
+     * @var Data
+     */
+    private $coreHelper;
+
+    /**
+     * @var AmazonConfig
+     */
+    private $config;
+
+    /**
+     * OrderAdapter constructor.
+     *
+     * @param Order $order
+     * @param AddressAdapterFactory $addressAdapterFactory
+     * @param Data $coreHelper
+     * @param \Amazon\Core\Model\AmazonConfig $config
+     */
+    public function __construct(
+        Order $order,
+        \Magento\Payment\Gateway\Data\Order\AddressAdapterFactory $addressAdapterFactory,
+        Data $coreHelper,
+        AmazonConfig $config
+    ) {
+        $this->order = $order;
+        $this->addressAdapterFactory = $addressAdapterFactory;
+        $this->coreHelper = $coreHelper;
+        $this->config = $config;
+    }
+
+    /**
+     * Returns currency code
+     *
+     * @return string
+     */
+    public function getCurrencyCode()
+    {
+        return $this->order->getBaseCurrencyCode();
+    }
+
+    /**
+     * Returns order increment id
+     *
+     * @return string
+     */
+    public function getOrderIncrementId()
+    {
+        return $this->order->getIncrementId();
+    }
+
+    /**
+     * Returns customer ID
+     *
+     * @return int|null
+     */
+    public function getCustomerId()
+    {
+        return $this->order->getCustomerId();
+    }
+
+    /**
+     * Returns billing address
+     *
+     * @return AddressAdapterInterface|null
+     */
+    public function getBillingAddress()
+    {
+        if ($this->order->getBillingAddress()) {
+            return $this->addressAdapterFactory->create(
+                ['address' => $this->order->getBillingAddress()]
+            );
+        }
+
+        return null;
+    }
+
+    /**
+     * Returns shipping address
+     *
+     * @return AddressAdapterInterface|null
+     */
+    public function getShippingAddress()
+    {
+        if ($this->order->getShippingAddress()) {
+            return $this->addressAdapterFactory->create(
+                ['address' => $this->order->getShippingAddress()]
+            );
+        }
+
+        return null;
+    }
+
+    /**
+     * Returns order store id
+     *
+     * @return int
+     */
+    public function getStoreId()
+    {
+        return $this->order->getStoreId();
+    }
+
+    /**
+     * Returns order id
+     *
+     * @return int
+     */
+    public function getId()
+    {
+        return $this->order->getEntityId();
+    }
+
+    /**
+     * Returns order grand total amount
+     *
+     * @return float|null
+     */
+    public function getGrandTotalAmount()
+    {
+        return $this->order->getBaseGrandTotal();
+    }
+
+    /**
+     * Returns list of line items in the cart
+     *
+     * @return \Magento\Sales\Api\Data\OrderItemInterface[]
+     */
+    public function getItems()
+    {
+        return $this->order->getItems();
+    }
+
+    /**
+     * Gets the remote IP address for the order.
+     *
+     * @return string|null Remote IP address.
+     */
+    public function getRemoteIp()
+    {
+        return $this->order->getRemoteIp();
+    }
+
+    /**
+     * Gets order currency code and amount if Amazon multi-currency was used.
+     * @param $amount
+     * @return array
+     */
+    public function getMulticurrencyDetails($amount)
+    {
+        $values = ['multicurrency' => false];
+
+        if ($this->config->useMultiCurrency()) {
+            $invoices = $this->order->getInvoiceCollection();
+
+            foreach ($invoices->getItems() as $key => $invoice) {
+                $baseTotal = $invoice->getBaseGrandTotal();
+
+                // compare numeric values to make sure we have the right invoice
+                // (could have an invoice for each item during partial capture).
+                if (bccomp($baseTotal, (float)$amount) == 0) {
+                    $values = [
+                        'multicurrency' => true,
+                        'order_currency' => $invoice->getOrderCurrencyCode(),
+                        'total' => $invoice->getGrandTotal()
+                    ];
+                    break;
+                }
+            }
+        }
+
+        $values['store_name'] = $this->order->getStoreName();
+        $values['store_id'] = $this->order->getStoreId();
+
+        return $values;
+    }
+
+
+    /**
+     * Returns current Amazon Order Reference ID
+     * @return string
+     */
+    public function getAmazonOrderID()
+    {
+        $orderID = '';
+        if (!empty($this->order->getExtensionAttributes()->getAmazonOrderReferenceId())) {
+            $orderID = $this->order->getExtensionAttributes()->getAmazonOrderReferenceId()->getAmazonOrderReferenceId();
+        }
+
+        return $orderID;
+    }
+}

--- a/Gateway/Helper/SubjectReader.php
+++ b/Gateway/Helper/SubjectReader.php
@@ -126,8 +126,7 @@ class SubjectReader
         if (!$quote_id) {
             $quote = $this->getQuote();
             $quoteLink->load($quote->getId(), 'quote_id');
-        }
-        else {
+        } else {
             $quoteLink->load($quote_id, 'quote_id');
         }
         return $quoteLink;
@@ -136,7 +135,7 @@ class SubjectReader
     /**
      * @return \Magento\Sales\Model\Order
      */
-    public function getOrder() 
+    public function getOrder()
     {
         return $this->checkoutSession->getLastRealOrder();
     }

--- a/Gateway/Http/Client/AuthorizeClient.php
+++ b/Gateway/Http/Client/AuthorizeClient.php
@@ -16,7 +16,6 @@
 
 namespace Amazon\Payment\Gateway\Http\Client;
 
-
 /**
  * Class Client
  * Amazon Pay authorization gateway client

--- a/Gateway/Http/Client/CaptureClient.php
+++ b/Gateway/Http/Client/CaptureClient.php
@@ -16,7 +16,6 @@
 
 namespace Amazon\Payment\Gateway\Http\Client;
 
-
 /**
  * Class Client
  * Amazon Pay gateway capture client

--- a/Gateway/Http/Client/SettlementClient.php
+++ b/Gateway/Http/Client/SettlementClient.php
@@ -16,8 +16,6 @@
 
 namespace Amazon\Payment\Gateway\Http\Client;
 
-use Amazon\Core\Exception\AmazonServiceUnavailableException;
-
 /**
  * Class SettlementClient
  * Amazon Pay capture client
@@ -47,7 +45,6 @@ class SettlementClient extends AbstractClient
                 'amazon_order_reference_id' => $data['amazon_order_reference_id'],
                 'amount' => $data['capture_amount'],
                 'currency_code' => $data['currency_code'],
-                'seller_order_id' => $data['seller_order_id'],
                 'store_name' => $data['store_name'],
                 'custom_information' => $data['custom_information'],
                 'platform_id' => $data['platform_id']

--- a/Gateway/Http/Client/VoidClient.php
+++ b/Gateway/Http/Client/VoidClient.php
@@ -16,7 +16,6 @@
 
 namespace Amazon\Payment\Gateway\Http\Client;
 
-
 /**
  * Class VoidClient
  * Amazon Pay client for gateway cancel and void
@@ -49,5 +48,4 @@ class VoidClient extends AbstractClient
 
         return $response;
     }
-
 }

--- a/Gateway/Http/TransferFactory.php
+++ b/Gateway/Http/TransferFactory.php
@@ -19,7 +19,6 @@ use Magento\Payment\Gateway\Http\TransferBuilder;
 use Magento\Payment\Gateway\Http\TransferFactoryInterface;
 use Magento\Payment\Gateway\Http\TransferInterface;
 
-
 class TransferFactory implements TransferFactoryInterface
 {
     /**

--- a/Gateway/Request/AuthorizationRequestBuilder.php
+++ b/Gateway/Request/AuthorizationRequestBuilder.php
@@ -21,6 +21,7 @@ use Magento\Payment\Gateway\Request\BuilderInterface;
 use Magento\Framework\App\ProductMetadata;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
+use Amazon\Core\Model\AmazonConfig;
 use Magento\Framework\Event\ManagerInterface;
 use Magento\Framework\DataObject;
 use Amazon\Payment\Plugin\AdditionalInformation;
@@ -48,6 +49,11 @@ class AuthorizationRequestBuilder implements BuilderInterface
      */
     private $coreHelper;
 
+    /**
+     * @var AmazonConfig
+     */
+    private $amazonConfig;
+
     /**
      * @var ManagerInterface
      */
@@ -65,6 +71,7 @@ class AuthorizationRequestBuilder implements BuilderInterface
      * @param ProductMetadata $productMetadata
      * @param SubjectReader $subjectReader
      * @param Data $coreHelper
+     * @param AmazonConfig $amazonConfig
      * @param ManagerInterface $eventManager
      * @param CategoryExclusion $categoryExclusion
      */
@@ -73,12 +80,13 @@ class AuthorizationRequestBuilder implements BuilderInterface
         ProductMetaData $productMetadata,
         SubjectReader $subjectReader,
         Data $coreHelper,
+        AmazonConfig $amazonConfig,
         ManagerInterface $eventManager,
         CategoryExclusion $categoryExclusion
-    )
-    {
+    ) {
         $this->config = $config;
         $this->coreHelper = $coreHelper;
+        $this->amazonConfig = $amazonConfig;
         $this->productMetaData = $productMetadata;
         $this->subjectReader = $subjectReader;
         $this->eventManager = $eventManager;
@@ -96,14 +104,35 @@ class AuthorizationRequestBuilder implements BuilderInterface
         $data = [];
 
         $paymentDO = $this->subjectReader->readPayment($buildSubject);
-
         $payment = $paymentDO->getPayment();
+        $orderDO = $paymentDO->getOrder();
+        $storeId = $orderDO->getStoreId();
+        $storeName = '';
+
+        $currencyCode = $orderDO->getCurrencyCode();
+        $total = $buildSubject['amount'];
+
+        // capture sale or new auth/capture for partial capture
+        if (isset($buildSubject['multicurrency']) && $buildSubject['multicurrency']['multicurrency']) {
+            $currencyCode = $buildSubject['multicurrency']['order_currency'];
+            $total = $buildSubject['multicurrency']['total'];
+            $storeName = $buildSubject['multicurrency']['store_name'];
+            $storeId = $buildSubject['multicurrency']['store_id'];
+        } else {
+            // auth has not happened for this order yet
+            if ($this->amazonConfig->useMultiCurrency($storeId)) {
+                $quote = $this->subjectReader->getQuote();
+                $total = $quote->getGrandTotal();
+                $currencyCode = $quote->getQuoteCurrencyCode();
+            }
+        }
 
-        $order = $paymentDO->getOrder();
 
-        $quote = $this->subjectReader->getQuote();
+        if (isset($buildSubject['amazon_order_id']) && $buildSubject['amazon_order_id']) {
+            $amazonId = $buildSubject['amazon_order_id'];
+        } else {
+            $quote = $this->subjectReader->getQuote();
 
-        if (!$this->categoryExclusion->isQuoteDirty()) {
             if (!$quote->getReservedOrderId()) {
                 try {
                     $quote->reserveOrderId()->save();
@@ -112,47 +141,45 @@ class AuthorizationRequestBuilder implements BuilderInterface
                 }
             }
 
+            $storeName = $quote->getStore()->getName();
             $amazonId = $this->subjectReader->getAmazonId();
+        }
 
-            if ($order && $amazonId) {
-
+        if ($amazonId) {
                 $data = [
                     'amazon_order_reference_id' => $amazonId,
-                    'amount' => $buildSubject['amount'],
-                    'currency_code' => $order->getCurrencyCode(),
-                    'seller_order_id' => $order->getOrderIncrementId(),
-                    'store_name' => $quote->getStore()->getName(),
+                    'amount' => $total,
+                    'currency_code' => $currencyCode,
+                    'store_name' => $storeName,
                     'custom_information' =>
                         'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
                         'Plugin Version : ' . $this->coreHelper->getVersion(),
                     'platform_id' => $this->config->getValue('platform_id'),
                     'request_payment_authorization' => true
                 ];
-            }
-
-            if ($this->coreHelper->isSandboxEnabled('store', $quote->getStoreId())) {
-
-                $data['additional_information'] =
-                    $payment->getAdditionalInformation(AdditionalInformation::KEY_SANDBOX_SIMULATION_REFERENCE);
-
-                $eventData = [
-                    'amazon_order_reference_id' => $amazonId,
-                    'authorization_amount' => $buildSubject['amount'],
-                    'currency_code' => $order->getCurrencyCode(),
-                    'authorization_reference_id' => $amazonId . '-A' . time(),
-                    'capture_now' => false,
-                ];
+        }
 
-                $transport = new DataObject($eventData);
-                $this->eventManager->dispatch(
-                    'amazon_payment_authorize_before',
-                    [
-                        'context' => 'authorization',
-                        'payment' => $paymentDO->getPayment(),
-                        'transport' => $transport
-                    ]
-                );
-            }
+        if ($this->coreHelper->isSandboxEnabled('store', $storeId)) {
+            $data['additional_information'] =
+                $payment->getAdditionalInformation(AdditionalInformation::KEY_SANDBOX_SIMULATION_REFERENCE);
+
+            $eventData = [
+                'amazon_order_reference_id' => $amazonId,
+                'authorization_amount' => $total,
+                'currency_code' => $currencyCode,
+                'authorization_reference_id' => $amazonId . '-A' . time(),
+                'capture_now' => false,
+            ];
+
+            $transport = new DataObject($eventData);
+            $this->eventManager->dispatch(
+                'amazon_payment_authorize_before',
+                [
+                    'context' => 'authorization',
+                    'payment' => $paymentDO->getPayment(),
+                    'transport' => $transport
+                ]
+            );
         }
 
         return $data;

--- a/Gateway/Request/CaptureRequestBuilder.php
+++ /dev/null
@@ -1,147 +0,0 @@
-<?php
-/**
- * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-namespace Amazon\Payment\Gateway\Request;
-
-use Amazon\Payment\Gateway\Config\Config;
-use Amazon\Payment\Plugin\AdditionalInformation;
-use Magento\Payment\Gateway\Request\BuilderInterface;
-use Magento\Framework\App\ProductMetadata;
-use Amazon\Payment\Gateway\Helper\SubjectReader;
-use Amazon\Core\Helper\Data;
-use Magento\Framework\Exception\LocalizedException;
-use Magento\Payment\Model\Method\Logger;
-
-class CaptureRequestBuilder implements BuilderInterface
-{
-    /**
-     * @var Config
-     */
-    private $config;
-
-    /**
-     * @var Logger
-     */
-    private $logger;
-
-    /**
-     * @var ProductMetadata
-     */
-    private $productMetaData;
-
-    /**
-     * @var SubjectReader
-     */
-    private $subjectReader;
-
-    /**
-     * @var Data
-     */
-    private $coreHelper;
-
-    /**
-     * CaptureRequestBuilder constructor.
-     *
-     * @param Config          $config
-     * @param ProductMetadata $productMetadata
-     * @param SubjectReader   $subjectReader
-     * @param Data            $coreHelper
-     * @param Logger          $logger
-     */
-    public function __construct(
-        Config $config,
-        ProductMetaData $productMetadata,
-        SubjectReader $subjectReader,
-        Data $coreHelper,
-        Logger $logger
-    ) {
-        $this->config = $config;
-        $this->coreHelper = $coreHelper;
-        $this->productMetaData = $productMetadata;
-        $this->subjectReader = $subjectReader;
-        $this->logger = $logger;
-    }
-
-
-    /**
-     * @param array $buildSubject
-     * @return array
-     * @throws LocalizedException
-     */
-    public function build(array $buildSubject)
-    {
-        $data = [];
-
-        $paymentDO = $this->subjectReader->readPayment($buildSubject);
-
-        $order = $paymentDO->getOrder();
-
-        $quote = $this->subjectReader->getQuote();
-
-        if (!$quote->getReservedOrderId()) {
-            try {
-                $quote->reserveOrderId()->save();
-            }
-            catch(\Exception $e) {
-                $this->logger->debug($e->getMessage());
-            }
-        }
-
-        $amazonId = $this->subjectReader->getAmazonId();
-
-        if ($order && $amazonId) {
-
-            $data = [
-                'amazon_order_reference_id' => $amazonId,
-                'amount' => $order->getGrandTotalAmount(),
-                'currency_code' => $order->getCurrencyCode(),
-                'seller_order_id' => $order->getOrderIncrementId(),
-                'store_name' => $quote->getStore()->getName(),
-                'custom_information' =>
-                    'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
-                    'Plugin Version : ' . $this->coreHelper->getVersion(),
-                'platform_id' => $this->config->getValue('platform_id')
-            ];
-        }
-
-        if ($this->coreHelper->isSandboxEnabled('store', $quote->getStoreId())) {
-
-            $payment = $paymentDO->getPayment();
-
-            $data['additional_information'] =
-                $payment->getAdditionalInformation(AdditionalInformation::KEY_SANDBOX_SIMULATION_REFERENCE);
-
-            $eventData = [
-                'amazon_order_reference_id'  => $amazonId,
-                'authorization_amount'       => $buildSubject['amount'],
-                'currency_code'              => $order->getCurrencyCode(),
-                'authorization_reference_id' => $amazonId . '-C' . time(),
-                'capture_now'                => true,
-            ];
-
-            $transport = new DataObject($eventData);
-            $this->eventManager->dispatch(
-                'amazon_payment_authorize_before',
-                [
-                    'context'   => 'capture',
-                    'payment'   => $paymentDO->getPayment(),
-                    'transport' => $transport
-                ]
-            );
-        }
-
-        return $data;
-    }
-}

--- a/Gateway/Request/RefundRequestBuilder.php
+++ b/Gateway/Request/RefundRequestBuilder.php
@@ -21,6 +21,7 @@ use Magento\Framework\App\ProductMetadata;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
 use Magento\Sales\Api\OrderRepositoryInterface;
+use Amazon\Payment\Gateway\Data\Order\OrderAdapterFactory;
 
 /**
  * Class RefundRequestBuilder
@@ -49,24 +50,32 @@ class RefundRequestBuilder implements BuilderInterface
      */
     private $orderRepository;
 
+    /**
+     * @var OrderAdapterFactory
+     */
+    private $orderAdapterFactory;
+
     /**
      * RefundRequestBuilder constructor.
      *
-     * @param ProductMetadata          $productMetadata
-     * @param SubjectReader            $subjectReader
-     * @param Data                     $coreHelper
+     * @param ProductMetadata $productMetadata
+     * @param SubjectReader $subjectReader
+     * @param Data $coreHelper
      * @param OrderRepositoryInterface $orderRepository
+     * @param OrderAdapterFactory $orderAdapterFactory
      */
     public function __construct(
         ProductMetaData $productMetadata,
         SubjectReader $subjectReader,
         Data $coreHelper,
-        OrderRepositoryInterface $orderRepository
+        OrderRepositoryInterface $orderRepository,
+        OrderAdapterFactory $orderAdapterFactory
     ) {
         $this->coreHelper = $coreHelper;
         $this->productMetaData = $productMetadata;
         $this->subjectReader = $subjectReader;
         $this->orderRepository = $orderRepository;
+        $this->orderAdapterFactory = $orderAdapterFactory;
     }
 
     /**
@@ -78,22 +87,36 @@ class RefundRequestBuilder implements BuilderInterface
         $data = [];
 
         $paymentDO = $this->subjectReader->readPayment($buildSubject);
-
         $payment = $paymentDO->getPayment();
 
         $orderDO = $paymentDO->getOrder();
 
-        $order = $this->orderRepository->get($orderDO->getId());
+        $currencyCode = $orderDO->getCurrencyCode();
+        $total = $buildSubject['amount'];
+        $storeId = $orderDO->getStoreId();
 
-        $quoteLink = $this->subjectReader->getQuoteLink($order->getQuoteId());
+        // The magento order adapter doesn't expose everything we need to send a request to the AP API so we
+        // need to use our own version with the details we need exposed in custom methods.
+        $orderAdapter = $this->orderAdapterFactory->create(
+            ['order' => $payment->getOrder()]
+        );
+
+        $amazonId = $orderAdapter->getAmazonOrderID();
+        $multicurrency = $orderAdapter->getMulticurrencyDetails($total);
+
+        if ($multicurrency['multicurrency']) {
+            $currencyCode = $multicurrency['order_currency'];
+            $total = $multicurrency['total'];
+            $storeId = $multicurrency['store_id'];
+        }
 
-        if ($quoteLink) {
+        if ($amazonId) {
             $data = [
                 'amazon_capture_id' => $payment->getParentTransactionId(),
-                'refund_reference_id' => $quoteLink->getAmazonOrderReferenceId() . '-R' . time(),
-                'refund_amount' => $this->subjectReader->readAmount($buildSubject),
-                'currency_code' => $order->getOrderCurrencyCode(),
-                'store_id' => $order->getStoreId()
+                'refund_reference_id' => $amazonId . '-R' . time(),
+                'refund_amount' => $total,
+                'currency_code' => $currencyCode,
+                'store_id' => $storeId
             ];
         }
 

--- a/Gateway/Request/SettlementRequestBuilder.php
+++ b/Gateway/Request/SettlementRequestBuilder.php
@@ -13,6 +13,7 @@
  * express or implied. See the License for the specific language governing
  * permissions and limitations under the License.
  */
+
 namespace Amazon\Payment\Gateway\Request;
 
 use Amazon\Payment\Gateway\Config\Config;
@@ -64,13 +65,13 @@ class SettlementRequestBuilder implements BuilderInterface
     /**
      * SettlementRequestBuilder constructor.
      *
-     * @param Config                   $config
-     * @param ProductMetadata          $productMetadata
+     * @param Config $config
+     * @param ProductMetadata $productMetadata
      * @param OrderRepositoryInterface $orderRepository
-     * @param CartRepositoryInterface  $quoteRepository
-     * @param SubjectReader            $subjectReader
-     * @param Data                     $coreHelper
-     * @param Logger                   $logger
+     * @param CartRepositoryInterface $quoteRepository
+     * @param SubjectReader $subjectReader
+     * @param Data $coreHelper
+     * @param Logger $logger
      */
     public function __construct(
         Config $config,
@@ -104,30 +105,35 @@ class SettlementRequestBuilder implements BuilderInterface
 
         $orderDO = $paymentDO->getOrder();
 
-        $order = $this->orderRepository->get($orderDO->getId());
-
-        $quote = $this->quoteRepository->get($order->getQuoteId());
+        $currencyCode = $orderDO->getCurrencyCode();
+        $total = $buildSubject['amount'];
 
-        $quoteLink = $this->subjectReader->getQuoteLink($quote->getId());
+        if ($buildSubject['multicurrency']['multicurrency']) {
+            $currencyCode = $buildSubject['multicurrency']['order_currency'];
+            $total = $buildSubject['multicurrency']['total'];
+        }
 
-        if ($quoteLink) {
 
-            $data = [
-                'amazon_authorization_id' => $paymentDO->getPayment()->getParentTransactionId(),
-                'capture_amount' => $buildSubject['amount'],
-                'currency_code' => $order->getBaseCurrencyCode(),
-                'amazon_order_reference_id' => $quoteLink->getAmazonOrderReferenceId(),
-                'store_id' => $quote->getStoreId(),
-                'store_name' => $quote->getStore()->getName(),
-                'seller_order_id' => $order->getIncrementId(),
-                'custom_information' =>
-                    'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
-                    'Plugin Version : ' . $this->coreHelper->getVersion(),
-                'platform_id' => $this->config->getValue('platform_id'),
-            ];
+        if (isset($buildSubject['amazon_order_id']) && $buildSubject['amazon_order_id']) {
+                $data = [
+                    'amazon_authorization_id' => $paymentDO->getPayment()->getParentTransactionId(),
+                    'capture_amount' => $total,
+                    'currency_code' => $currencyCode,
+                    'amazon_order_reference_id' => $buildSubject['amazon_order_id'],
+                    'store_id' => $buildSubject['multicurrency']['store_id'],
+                    'store_name' => $buildSubject['multicurrency']['store_name'],
+                    'custom_information' =>
+                        'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
+                        'Plugin Version : ' . $this->coreHelper->getVersion(),
+                    'platform_id' => $this->config->getValue('platform_id'),
+                    'request_payment_authorization' => false
+                ];
+
+                if (isset($buildSubject['request_payment_authorization']) && $buildSubject['request_payment_authorization']) {
+                    $data['request_payment_authorization'] = true;
+                }
         }
 
         return $data;
     }
-
 }

--- a/Gateway/Response/CompleteAuthHandler.php
+++ b/Gateway/Response/CompleteAuthHandler.php
@@ -20,7 +20,6 @@ use Magento\Payment\Gateway\Response\HandlerInterface;
 use Magento\Payment\Model\Method\Logger;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
-use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
 
 class CompleteAuthHandler implements HandlerInterface
@@ -59,8 +58,7 @@ class CompleteAuthHandler implements HandlerInterface
         SubjectReader $subjectReader,
         PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory,
         Data $coreHelper
-    )
-    {
+    ) {
         $this->logger = $logger;
         $this->subjectReader = $subjectReader;
         $this->coreHelper = $coreHelper;
@@ -76,12 +74,10 @@ class CompleteAuthHandler implements HandlerInterface
     {
 
         $paymentDO = $this->subjectReader->readPayment($handlingSubject);
-        $amazonId = $this->subjectReader->getAmazonId();
         $payment = $paymentDO->getPayment();
         $order = $this->subjectReader->getOrder();
 
         if ($response['status']) {
-
             $payment->setTransactionId($response['authorize_transaction_id']);
 
 

--- a/Gateway/Response/CompleteSaleHandler.php
+++ b/Gateway/Response/CompleteSaleHandler.php
@@ -20,7 +20,6 @@ use Magento\Payment\Gateway\Response\HandlerInterface;
 use Magento\Payment\Model\Method\Logger;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
-use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
 
 class CompleteSaleHandler implements HandlerInterface
@@ -75,20 +74,17 @@ class CompleteSaleHandler implements HandlerInterface
     {
 
         $paymentDO = $this->subjectReader->readPayment($handlingSubject);
-
-        $amazonId = $this->subjectReader->getAmazonId();
-
         $payment = $paymentDO->getPayment();
 
-        $order = $this->subjectReader->getOrder();
-
         if ($response['status']) {
             $payment->setTransactionId($response['capture_transaction_id']);
             $payment->setParentTransactionId($response['authorize_transaction_id']);
 
 
             if ($response['timeout']) {
-                $pendingAuthorization = $this->pendingAuthorizationFactory->create()
+                $order = $this->subjectReader->getOrder();
+
+                $this->pendingAuthorizationFactory->create()
                     ->setAuthorizationId($response['authorize_transaction_id'])
                     ->setCaptureId($response['capture_transaction_id'])
                     ->setCapture(true)
@@ -97,14 +93,14 @@ class CompleteSaleHandler implements HandlerInterface
                 $payment->setIsTransactionPending(true);
                 $order->setState($order::STATE_PAYMENT_REVIEW)->setStatus($order::STATE_PAYMENT_REVIEW);
                 $payment->setIsTransactionClosed(false);
-            }
-            else {
+            } else {
                 $payment->setIsTransactionClosed(true);
             }
 
-            $quoteLink = $this->subjectReader->getQuoteLink();
-            $quoteLink->setConfirmed(true)->save();
+            if (!isset($handlingSubject['partial_capture']) || !$handlingSubject['partial_capture']) {
+                $quoteLink = $this->subjectReader->getQuoteLink();
+                $quoteLink->setConfirmed(true)->save();
+            }
         }
     }
-
 }

--- a/Gateway/Response/RefundHandler.php
+++ b/Gateway/Response/RefundHandler.php
@@ -51,7 +51,7 @@ class RefundHandler implements HandlerInterface
     private $coreHelper;
 
     /**
-     * @var PendingRefundInterfaceFactory 
+     * @var PendingRefundInterfaceFactory
      */
     private $pendingRefundFactory;
 

--- a/Gateway/Response/SettlementHandler.php
+++ b/Gateway/Response/SettlementHandler.php
@@ -20,7 +20,6 @@ use Magento\Payment\Gateway\Response\HandlerInterface;
 use Magento\Payment\Model\Method\Logger;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
-use Magento\Payment\Gateway\Data\PaymentDataObjectInterface;
 use Magento\Sales\Api\OrderRepositoryInterface;
 use Magento\Quote\Api\CartRepositoryInterface;
 
@@ -82,14 +81,11 @@ class SettlementHandler implements HandlerInterface
     public function handle(array $handlingSubject, array $response)
     {
         $paymentDO = $this->subjectReader->readPayment($handlingSubject);
-
         $payment = $paymentDO->getPayment();
 
         // if reauthorized, treat as end of auth + capture process
         if ($response['reauthorized']) {
-
             if ($response['status']) {
-
                 $orderDO = $paymentDO->getOrder();
                 $order = $this->orderRepository->get($orderDO->getId());
 
@@ -101,11 +97,9 @@ class SettlementHandler implements HandlerInterface
                 $quoteLink = $this->subjectReader->getQuoteLink($quote->getId());
                 $quoteLink->setConfirmed(true)->save();
             }
-        }
-        else {
+        } else {
             // finish capture
             $payment->setTransactionId($response['transaction_id']);
         }
     }
-
 }

--- a/Gateway/Response/VoidHandler.php
+++ b/Gateway/Response/VoidHandler.php
@@ -76,10 +76,8 @@ class VoidHandler implements HandlerInterface
             $this->messageManager->addErrorMessage(
                 __('Unable to cancel the order or the Amazon Order ID is incorrect.')
             );
-        }
-        else {
+        } else {
             $this->messageManager->addSuccessMessage(__('Successfully cancelled Amazon Pay.'));
         }
     }
-
 }

--- a/Gateway/Validator/AuthorizationValidator.php
+++ b/Gateway/Validator/AuthorizationValidator.php
@@ -59,7 +59,6 @@ class AuthorizationValidator extends AbstractValidator
         }
 
         return $this->createResult(false, $messages);
-
     }
 
     /**
@@ -70,5 +69,4 @@ class AuthorizationValidator extends AbstractValidator
     {
         return $constraint->getId();
     }
-
 }

--- a/Gateway/Validator/ConstraintValidator.php
+++ b/Gateway/Validator/ConstraintValidator.php
@@ -53,7 +53,8 @@ class ConstraintValidator extends AbstractValidator
      * @param AmazonConstraint $constraint
      * @return string
      */
-    private function getConstraint(AmazonConstraint $constraint) {
+    private function getConstraint(AmazonConstraint $constraint)
+    {
         return $constraint->getId();
     }
 }

--- a/Helper/Email.php
+++ b/Helper/Email.php
@@ -41,9 +41,9 @@ class Email extends AbstractHelper
      * @param AmazonCoreHelper        $amazonCoreHelper
      */
     public function __construct(
-        Context                 $context,
+        Context $context,
         TransportBuilderFactory $emailTransportBuilderFactory,
-        AmazonCoreHelper        $amazonCoreHelper
+        AmazonCoreHelper $amazonCoreHelper
     ) {
         parent::__construct($context);
         $this->emailTransportBuilderFactory = $emailTransportBuilderFactory;

--- a/Helper/Shortcut/Validator.php
+++ b/Helper/Shortcut/Validator.php
@@ -22,7 +22,7 @@ namespace Amazon\Payment\Helper\Shortcut;
 class Validator implements ValidatorInterface
 {
     /**
-     * @var \Amazon\Payment\Gateway\Config\Config 
+     * @var \Amazon\Payment\Gateway\Config\Config
      */
     private $amazonConfig;
 

--- a/Ipn/IpnHandlerFactory.php
+++ b/Ipn/IpnHandlerFactory.php
@@ -16,7 +16,6 @@
 namespace Amazon\Payment\Ipn;
 
 use Amazon\Core\Helper\Data;
-use Amazon\Core\Model\EnvironmentChecker;
 use Magento\Framework\ObjectManagerInterface;
 use AmazonPay\IpnHandlerInterface;
 use Psr\Log\LoggerAwareInterface;
@@ -34,11 +33,6 @@ class IpnHandlerFactory implements IpnHandlerFactoryInterface
      */
     private $instanceName;
 
-    /**
-     * @var EnvironmentChecker
-     */
-    private $environmentChecker;
-
     /**
      * @var LoggerInterface
      */
@@ -51,14 +45,12 @@ class IpnHandlerFactory implements IpnHandlerFactoryInterface
 
     public function __construct(
         ObjectManagerInterface $objectManager,
-        EnvironmentChecker $environmentChecker,
         LoggerInterface $logger,
         Data $coreHelper,
         $instanceName = '\\AmazonPay\\IpnHandlerInterface'
     ) {
         $this->objectManager      = $objectManager;
         $this->instanceName       = $instanceName;
-        $this->environmentChecker = $environmentChecker;
         $this->logger             = $logger;
         $this->coreHelper         = $coreHelper;
     }
@@ -68,13 +60,6 @@ class IpnHandlerFactory implements IpnHandlerFactoryInterface
      */
     public function create($headers, $body)
     {
-        if ($this->environmentChecker->isTestMode()) {
-            return $this->objectManager->create(
-                MockIpnHandler::class,
-                ['requestHeaders' => $headers, 'requestBody' => $body]
-            );
-        }
-
         $handler = $this->objectManager->create(
             $this->instanceName,
             ['requestHeaders' => $headers, 'requestBody' => $body]

--- a/Ipn/MockIpnHandler.php
+++ /dev/null
@@ -1,58 +0,0 @@
-<?php
-/**
- * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-namespace Amazon\Payment\Ipn;
-
-use AmazonPay\IpnHandler as AmazonIpnHandler;
-
-/**
- * Class MockIpnHandler
- *
- * Mock IPN Handler for use with Behat Tests, skips signature verification
- */
-class MockIpnHandler extends AmazonIpnHandler
-{
-    /**
-     * @var \ReflectionClass
-     */
-    private $parent;
-
-    /**
-     * MockIpnHandler constructor.
-     *
-     * @param array      $requestHeaders
-     * @param string     $requestBody
-     * @param null|array $ipnConfig
-     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
-     */
-    public function __construct($requestHeaders, $requestBody, $ipnConfig = null)
-    {
-        $reflection   = new \ReflectionClass($this);
-        $this->parent = $reflection->getParentClass();
-
-        $bodyProperty = $this->parent->getProperty('body');
-        $bodyProperty->setAccessible(true);
-        $bodyProperty->setValue($this, $requestBody);
-
-        $this->getMessage();
-    }
-
-    private function getMessage()
-    {
-        $method = $this->parent->getMethod('getMessage');
-        $method->setAccessible(true);
-        $method->invoke($this);
-    }
-}

--- a/LICENSE
+++ /dev/null
@@ -1,202 +0,0 @@
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "{}"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright {yyyy} {name of copyright owner}
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-

--- a/Model/Adapter/AmazonPaymentAdapter.php
+++ b/Model/Adapter/AmazonPaymentAdapter.php
@@ -271,7 +271,7 @@ class AmazonPaymentAdapter
 
         /** if first synchronous attempt failed, on second attempt try an asynchronous attempt. */
         if ($authMode != 'synchronous' && $attempts) {
-            $authorizeData['transaction_timeout'] = 5;
+            $authorizeData['transaction_timeout'] = 1440;
         }
 
         $response['status'] = false;
@@ -283,7 +283,6 @@ class AmazonPaymentAdapter
         $confirmResponse = $this->confirmOrderReference($storeId, $data['amazon_order_reference_id']);
 
         if ($confirmResponse->response['Status'] == 200) {
-
             $authorizeResponse = $this->getAuthorization($storeId, $authorizeData);
 
             if ($authorizeResponse) {
@@ -297,6 +296,13 @@ class AmazonPaymentAdapter
                         $response['response_code'] = 'TransactionTimedOut';
                     } elseif (!in_array($authorizeResponse->getStatus()->getState(), self::SUCCESS_CODES)) {
                         $response['response_code'] = $authorizeResponse->getStatus()->getReasonCode();
+                        if ($authMode == 'synchronous' && $authorizeResponse->getStatus()->getReasonCode() == 'TransactionTimedOut') {
+                            $cancelData = [
+                                'store_id' => $storeId,
+                                'amazon_order_reference_id' => $data['amazon_order_reference_id']
+                            ];
+                            $this->clientFactory->create($storeId)->cancelOrderReference($cancelData);
+                        }
                     } else {
                         $response['status'] = true;
 
@@ -379,6 +385,21 @@ class AmazonPaymentAdapter
         return $response;
     }
 
+    /**
+     * @param $storeId
+     * @param $amazonId
+     * @param $orderId
+     */
+    public function setOrderAttributes($storeId, $amazonId, $orderId)
+    {
+        $orderAttributes = [
+            'amazon_order_reference_id' => $amazonId,
+            'seller_order_id' => $orderId
+        ];
+
+        $this->clientFactory->create($storeId)->setOrderAttributes($orderAttributes);
+    }
+
     /**
      * @param $data
      * @return bool

--- a/Model/Ipn/AuthorizationProcessor.php
+++ b/Model/Ipn/AuthorizationProcessor.php
@@ -79,7 +79,8 @@ class AuthorizationProcessor implements ProcessorInterface
         $collection = $this->collectionFactory
             ->create()
             ->addFieldToFilter(
-                PendingAuthorizationInterface::AUTHORIZATION_ID, [
+                PendingAuthorizationInterface::AUTHORIZATION_ID,
+                [
                 'eq' => $details->getAuthorizeTransactionId()
                 ]
             )

--- a/Model/OrderInformationManagement.php
+++ b/Model/OrderInformationManagement.php
@@ -135,7 +135,6 @@ class OrderInformationManagement implements OrderInformationManagementInterface
                 'amazon_order_reference_id' => $amazonOrderReferenceId,
                 'amount'                    => $quote->getGrandTotal(),
                 'currency_code'             => $quote->getQuoteCurrencyCode(),
-                'seller_order_id'           => $quote->getReservedOrderId(),
                 'store_name'                => $storeName,
                 'custom_information'        =>
                     'Magento Version : ' . $this->productMetadata->getVersion() . ' ' .
@@ -265,9 +264,7 @@ class OrderInformationManagement implements OrderInformationManagementInterface
     public function removeOrderReference()
     {
         $quote = $this->session->getQuote();
-
-        $quote->getExtensionAttributes()->setAmazonOrderReferenceId(null);
-
+        
         if ($quote->getId()) {
             $quoteLink = $this->quoteLinkFactory->create()->load($quote->getId(), 'quote_id');
 

--- a/Model/PaymentManagement/Authorization.php
+++ b/Model/PaymentManagement/Authorization.php
@@ -144,8 +144,7 @@ class Authorization extends AbstractOperation
         StoreManagerInterface $storeManager,
         PaymentManagement $paymentManagement,
         LoggerInterface $logger
-    )
-    {
+    ) {
         $this->clientFactory = $clientFactory;
         $this->pendingAuthorizationFactory = $pendingAuthorizationFactory;
         $this->amazonAuthorizationDetailsResponseFactory = $amazonAuthorizationDetailsResponseFactory;
@@ -178,8 +177,7 @@ class Authorization extends AbstractOperation
         $pendingAuthorizationId,
         AmazonAuthorizationDetails $authorizationDetails = null,
         AmazonOrderDetails $orderDetails = null
-    )
-    {
+    ) {
         try {
             $pendingAuthorization = $this->pendingAuthorizationFactory->create();
             $pendingAuthorization->getResource()->beginTransaction();
@@ -216,8 +214,7 @@ class Authorization extends AbstractOperation
     protected function processUpdateAuthorization(
         PendingAuthorizationInterface $pendingAuthorization,
         AmazonAuthorizationDetails $authorizationDetails = null
-    )
-    {
+    ) {
         $order = $this->orderRepository->get($pendingAuthorization->getOrderId());
         $payment = $this->orderPaymentRepository->get($pendingAuthorization->getPaymentId());
         $order->setPayment($payment);
@@ -283,8 +280,7 @@ class Authorization extends AbstractOperation
         PendingAuthorizationInterface $pendingAuthorization,
         $capture,
         TransactionInterface $newTransaction = null
-    )
-    {
+    ) {
         $transactionId = ($capture) ? $pendingAuthorization->getCaptureId()
             : $pendingAuthorization->getAuthorizationId();
 
@@ -332,8 +328,7 @@ class Authorization extends AbstractOperation
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization,
         $capture
-    )
-    {
+    ) {
         $transactionId = ($capture) ? $pendingAuthorization->getCaptureId()
             : $pendingAuthorization->getAuthorizationId();
 
@@ -377,8 +372,7 @@ class Authorization extends AbstractOperation
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization,
         $capture
-    )
-    {
+    ) {
         $transactionId = ($capture) ? $pendingAuthorization->getCaptureId()
             : $pendingAuthorization->getAuthorizationId();
 
@@ -418,8 +412,7 @@ class Authorization extends AbstractOperation
     protected function processNewAuthorization(
         PendingAuthorizationInterface $pendingAuthorization,
         AmazonOrderDetails $orderDetails = null
-    )
-    {
+    ) {
         $order = $this->orderRepository->get($pendingAuthorization->getOrderId());
         $payment = $this->orderPaymentRepository->get($pendingAuthorization->getPaymentId());
         $order->setPayment($payment);
@@ -462,8 +455,7 @@ class Authorization extends AbstractOperation
         OrderInterface $order,
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization
-    )
-    {
+    ) {
         $capture = false;
 
         try {
@@ -502,8 +494,7 @@ class Authorization extends AbstractOperation
         OrderInterface $order,
         OrderPaymentInterface $payment,
         PendingAuthorizationInterface $pendingAuthorization
-    )
-    {
+    ) {
         $capture = true;
 
         try {

--- a/Model/QuoteLinkManagement.php
+++ b/Model/QuoteLinkManagement.php
@@ -55,7 +55,7 @@ class QuoteLinkManagement implements QuoteLinkManagementInterface
         $amazonQuote->load($cart->getId(), 'quote_id');
 
         if ($amazonQuote->getId()) {
-            $cartExtension->setAmazonOrderReferenceId($amazonQuote->getAmazonOrderReferenceId());
+            $cartExtension->setAmazonOrderReferenceId($amazonQuote);
         }
 
         $cart->setExtensionAttributes($cartExtension);

--- a/Observer/DataAssignObserver.php
+++ b/Observer/DataAssignObserver.php
@@ -54,5 +54,4 @@ class DataAssignObserver extends AbstractDataAssignObserver
             }
         }
     }
-
 }

--- /dev/null
+++ b/Observer/KlarnaKcoOverride.php
@@ -0,0 +1,54 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Observer;
+
+use Magento\Framework\Event\ObserverInterface;
+use Magento\Framework\Event\Observer;
+use Amazon\Core\Helper\Data;
+use Amazon\Login\Helper\Session;
+
+class KlarnaKcoOverride implements ObserverInterface
+{
+    /**
+     * @var Data
+     */
+    private $coreHelper;
+
+    /**
+     * @var Session
+     */
+    private $sessionHelper;
+
+    /**
+     * @param Data $coreHelper
+     * @param Session $sessionHelper
+     */
+    public function __construct(
+        Data $coreHelper,
+        Session $sessionHelper
+    ) {
+        $this->coreHelper    = $coreHelper;
+        $this->sessionHelper = $sessionHelper;
+    }
+
+    public function execute(Observer $observer)
+    {
+        if ($this->coreHelper->isPwaEnabled() && $this->sessionHelper->isAmazonLoggedIn()) {
+            // Force customer to use default (Amazon) checkout
+            $observer->getOverrideObject()->setForceDisabled(true);
+        }
+    }
+}

--- a/Observer/LoadOrder.php
+++ b/Observer/LoadOrder.php
@@ -21,6 +21,8 @@ use Magento\Framework\Event\Observer;
 use Magento\Framework\Event\ObserverInterface;
 use Magento\Sales\Api\Data\OrderExtensionFactory;
 use Magento\Sales\Api\Data\OrderInterface;
+use Amazon\Payment\Api\Data\QuoteLinkInterfaceFactory;
+use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
 
 class LoadOrder implements ObserverInterface
 {
@@ -39,14 +41,22 @@ class LoadOrder implements ObserverInterface
      */
     private $coreHelper;
 
+    private $quoteLinkFactory;
+
+    private $adapter;
+
     public function __construct(
         OrderExtensionFactory $orderExtensionFactory,
         OrderLinkInterfaceFactory $orderLinkFactory,
-        Data $coreHelper
+        Data $coreHelper,
+        QuoteLinkInterfaceFactory $quoteLinkFactory,
+        AmazonPaymentAdapter $adapter
     ) {
         $this->orderExtensionFactory = $orderExtensionFactory;
         $this->orderLinkFactory      = $orderLinkFactory;
         $this->coreHelper            = $coreHelper;
+        $this->quoteLinkFactory = $quoteLinkFactory;
+        $this->adapter = $adapter;
     }
 
     public function execute(Observer $observer)
@@ -66,7 +76,20 @@ class LoadOrder implements ObserverInterface
             $amazonOrder->load($order->getId(), 'order_id');
 
             if ($amazonOrder->getId()) {
-                $orderExtension->setAmazonOrderReferenceId($amazonOrder->getAmazonOrderReferenceId());
+                $orderExtension->setAmazonOrderReferenceId($amazonOrder);
+            } else {
+                if ($order->getQuoteId()) {
+                    $quoteLink = $this->quoteLinkFactory->create();
+                    $quoteLink->load($order->getQuoteId(), 'quote_id');
+
+                    if ($quoteLink->getAmazonOrderReferenceId()) {
+                        $amazonOrder->setAmazonOrderReferenceId($quoteLink->getAmazonOrderReferenceId())
+                            ->setOrderId($order->getId())
+                            ->save();
+
+                        $this->adapter->setOrderAttributes($order->getStoreId(), $quoteLink->getAmazonOrderReferenceId(), $order->getIncrementId());
+                    }
+                }
             }
         }
 

--- a/Plugin/ConfirmOrderReference.php
+++ b/Plugin/ConfirmOrderReference.php
@@ -88,6 +88,7 @@ class ConfirmOrderReference
             $quoteExtensionAttributes = $quote->getExtensionAttributes();
             if ($quoteExtensionAttributes) {
                 $amazonOrderReferenceId = $quoteExtensionAttributes
+                    ->getAmazonOrderReferenceId()
                     ->getAmazonOrderReferenceId();
 
                 $this->orderInformationManagement->saveOrderInformation($amazonOrderReferenceId);

--- a/Plugin/DisableAmazonPaymentMethod.php
+++ b/Plugin/DisableAmazonPaymentMethod.php
@@ -27,7 +27,7 @@ class DisableAmazonPaymentMethod
      */
     public function __construct(
         Session $checkoutSession
-    ){
+    ) {
         $this->checkoutSession = $checkoutSession;
     }
 
@@ -39,7 +39,7 @@ class DisableAmazonPaymentMethod
     public function afterIsAvailable(
         \Amazon\Payment\Model\Method\AmazonLoginMethod $subject,
         $result
-    ){
+    ) {
         /** @var \Magento\Quote\Model\Quote $quote */
         $quote = $this->checkoutSession->getQuote();
 

--- a/Plugin/ShippingInformationManagement.php
+++ b/Plugin/ShippingInformationManagement.php
@@ -80,7 +80,9 @@ class ShippingInformationManagement
             return $return;
         }
 
-        $amazonOrderReferenceId = $quote->getExtensionAttributes()->getAmazonOrderReferenceId();
+        $amazonOrderReferenceId = $quote->getExtensionAttributes()
+            ->getAmazonOrderReferenceId()
+            ->getAmazonOrderReferenceId();
 
         if ($amazonOrderReferenceId) {
             $this->orderInformationManagement->saveOrderInformation(

--- a/Setup/UpgradeSchema.php
+++ b/Setup/UpgradeSchema.php
@@ -44,84 +44,7 @@ class UpgradeSchema implements UpgradeSchemaInterface
      */
     public function upgrade(SchemaSetupInterface $setup, ModuleContextInterface $context)
     {
-        if (version_compare($context->getVersion(), '1.1.0', '<')) {
-            $linkTables = [
-                'quote_id' => QuoteLink::TABLE_NAME,
-                'order_id' => OrderLink::TABLE_NAME
-            ];
-
-            foreach ($linkTables as $fieldName => $tableName) {
-                $table = $setup->getConnection()->newTable($setup->getTable($tableName));
-
-                $table
-                    ->addColumn(
-                        'entity_id',
-                        Table::TYPE_INTEGER,
-                        null,
-                        [
-                            'identity' => true,
-                            'unsigned' => true,
-                            'primary'  => true,
-                            'nullable' => false
-                        ]
-                    )
-                    ->addColumn(
-                        $fieldName,
-                        Table::TYPE_INTEGER,
-                        null,
-                        [
-                            'unsigned' => true,
-                            'nullable' => false
-                        ]
-                    )
-                    ->addColumn(
-                        'amazon_order_reference_id',
-                        Table::TYPE_TEXT,
-                        255,
-                        [
-                            'nullable' => false
-                        ]
-                    )
-                    ->addIndex(
-                        $setup->getIdxName(
-                            $tableName,
-                            [$fieldName],
-                            AdapterInterface::INDEX_TYPE_UNIQUE
-                        ),
-                        [$fieldName],
-                        ['type' => AdapterInterface::INDEX_TYPE_UNIQUE]
-                    );
-
-                $setup->getConnection()->createTable($table);
-            }
-        }
-
-        if (version_compare($context->getVersion(), '1.2.0', '<')) {
-            $setup->getConnection()->addColumn(
-                $setup->getTable(QuoteLink::TABLE_NAME),
-                'sandbox_simulation_reference',
-                [
-                    'type'     => Table::TYPE_TEXT,
-                    'length'   => 255,
-                    'nullable' => true,
-                    'comment'  => 'Sandbox simulation reference'
-                ]
-            );
-        }
 
-        if (version_compare($context->getVersion(), '1.3.0', '<')) {
-            $setup->getConnection()->addColumn(
-                $setup->getTable(QuoteLink::TABLE_NAME),
-                'confirmed',
-                [
-                    'unsigned' => true,
-                    'nullable' => false,
-                    'default'  => 0,
-                    'type'     => Table::TYPE_SMALLINT,
-                    'comment'  => 'Quote confirmed with Amazon'
-                ]
-            );
-        }
 
         if (version_compare($context->getVersion(), '1.4.0', '<')) {
             $table = $setup->getConnection()->newTable($setup->getTable(PendingCapture::TABLE_NAME));
@@ -167,25 +90,6 @@ class UpgradeSchema implements UpgradeSchemaInterface
             $setup->getConnection()->createTable($table);
         }
 
-        if (version_compare($context->getVersion(), '1.6.0', '<')) {
-            $setup->getConnection()->addForeignKey(
-                $setup->getFkName(QuoteLink::TABLE_NAME, 'quote_id', $setup->getTable('quote'), 'entity_id'),
-                $setup->getTable(QuoteLink::TABLE_NAME),
-                'quote_id',
-                $setup->getTable('quote'),
-                'entity_id',
-                AdapterInterface::FK_ACTION_CASCADE
-            );
-
-            $setup->getConnection()->addForeignKey(
-                $setup->getFkName(OrderLink::TABLE_NAME, 'order_id', $setup->getTable('sales_order'), 'entity_id'),
-                $setup->getTable(OrderLink::TABLE_NAME),
-                'order_id',
-                $setup->getTable('sales_order'),
-                'entity_id',
-                AdapterInterface::FK_ACTION_CASCADE
-            );
-        }
 
         if (version_compare($context->getVersion(), '1.7.0', '<')) {
             $this->addColumnsToPendingCaptureQueue($setup);

--- /dev/null
+++ b/Test/Mftf/ActionGroup/AmazonCheckoutActionGroup.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
+    <!--Begin checkout and proceed to final step-->
+    <actionGroup name="AmazonCheckoutBeginActionGroup">
+        <waitForElement selector="{{CheckoutShippingMethodsSection.shippingMethodRow}}" time="20" stepKey="apWaitForShipping"/>
+        <waitForPageLoad stepKey="apWaitPageLoadShipping" />
+
+        <click selector="{{CheckoutShippingMethodsSection.firstShippingMethod}}" stepKey="clickShippingMethod"/>
+        <waitForPageLoad stepKey="waitForPageLoadPayment1" />
+        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear1"/>
+
+        <click selector="{{CheckoutShippingMethodsSection.next}}" stepKey="clickContinueButton"/>
+        <waitForPageLoad stepKey="waitForPageLoadPayment2" />
+        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear2"/>
+    </actionGroup>
+    <!--Place order-->
+    <actionGroup name="AmazonCheckoutSubmitActionGroup" extends="AmazonCheckoutBeginActionGroup">
+        <!--Click Place Order button-->
+        <click selector="{{CheckoutPaymentSection.placeOrder}}" stepKey="clickPlaceOrder"/>
+
+        <!--See success messages-->
+        <see selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
+    </actionGroup>
+    <!--Select credit card number and submit-->
+    <actionGroup name="AmazonCheckoutCcActionGroup">
+        <arguments>
+            <argument name="cc" defaultValue="1111" type="string"/>
+        </arguments>
+        <executeJS function="return window.name;" stepKey="topName"/>
+        <!--Get wallet iframe name (dynamic)-->
+        <executeJS function="return jQuery('#walletWidgetDiv iframe').attr('name');" stepKey="iframeName"/>
+        <!--Expand Wallet Widget to expose all CC# (and avoid JS paging)-->
+        <executeJS function="jQuery('#walletWidgetDiv').css('height', '450px');" stepKey="executeJsHeight"/>
+        <!--Select CC#-->
+        <switchToIFrame userInput="{$iframeName}" stepKey="switchToIFrameWidget"/>
+        <executeJS function="$('.card-number:contains({{cc}})').closest('a').click();" stepKey="executeJsCc"/>
+        <!--Place order-->
+        <switchToWindow userInput="{$topName}" stepKey="switchToWindowTop" />
+        <waitForPageLoad stepKey="waitForPageLoadPayment1" />
+        <click selector="{{CheckoutPaymentSection.placeOrder}}" stepKey="clickPlaceOrder"/>
+        <waitForPageLoad stepKey="waitForPageLoadPayment2"/>
+    </actionGroup>
+</actionGroups>
\ No newline at end of file

--- /dev/null
+++ b/Test/Mftf/ActionGroup/AmazonLoginActionGroup.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
+    <!--Open login popup and complete form-->
+    <actionGroup name="AmazonLoginPopupActionGroup">
+        <!--Save opener window name since popup auto-closes-->
+        <executeJS function="return window.name;" stepKey="openerName"/>
+
+        <waitForPageLoad stepKey="waitForPageLoadPopup"/>
+        <switchToWindow userInput="amazonloginpopup" stepKey="switchToWindowLoginpopup"/>
+
+        <!-- Fill in login form -->
+        <waitForElement selector="{{AmazonLoginSection.apEmail}}" time="10" stepKey="apWaitForLogin"/>
+        <fillField selector="{{AmazonLoginSection.apEmail}}" userInput="{{AmazonLogin.email}}" stepKey="apEnterEmail"/>
+        <fillField selector="{{AmazonLoginSection.apPassword}}" userInput="{{AmazonLogin.password}}" stepKey="apEnterPassword"/>
+        <click selector="{{AmazonLoginSection.apSignin}}" stepKey="clickSigninButton"/>
+
+        <!--Prevent "NoSuchWindowException: window was already closed"-->
+        <switchToWindow userInput="{$openerName}" stepKey="switchToWindowOpener" />
+    </actionGroup>
+
+    <!--Fill in login from redirect form and submit-->
+    <actionGroup name="AmazonLoginRedirectActionGroup">
+        <waitForElement selector="{{AmazonLoginSection.apEmail}}" time="10" stepKey="apWaitForLogin"/>
+        <fillField selector="{{AmazonLoginSection.apEmail}}" userInput="{{AmazonLogin.email}}" stepKey="apEnterEmail"/>
+        <fillField selector="{{AmazonLoginSection.apPassword}}" userInput="{{AmazonLogin.password}}" stepKey="apEnterPassword"/>
+        <click selector="{{AmazonLoginSection.apSignin}}" stepKey="clickSigninButton"/>
+        <waitForPageLoad stepKey="waitForPageLoadLogin"/>
+        <conditionalClick selector="{{AmazonLoginSection.apConsent}}" dependentSelector="{{AmazonLoginSection.apConsent}}" visible="true" stepKey="clickLoginConsent"/>
+    </actionGroup>
+</actionGroups>
\ No newline at end of file

--- /dev/null
+++ b/Test/Mftf/Data/AmazonLoginData.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+          xsi:noNamespaceSchemaLocation="../../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataProfileSchema.xsd">
+    <entity name="AmazonLogin" type="amazon_login">
+        <data key="email">payment-test@amazon.com</data>
+        <data key="password">test123</data>
+    </entity>
+</entities>

--- a/Test/Mftf/Data/AmazonPaymentData.xml
+++ b/Test/Mftf/Data/AmazonPaymentData.xml
@@ -1,81 +1,81 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-          xsi:noNamespaceSchemaLocation="../../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataProfileSchema.xsd">
+          xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataProfileSchema.xsd">
     <entity name="SampleAmazonPaymentConfig" type="amazon_payment_config_state">
-        <requiredEntity type="merchant_id">SampleMerchantId</requiredEntity>
-        <requiredEntity type="access_key">SampleAccessKey</requiredEntity>
-        <requiredEntity type="secret_key">SampleSecretKey</requiredEntity>
-        <requiredEntity type="client_id">SampleClientId</requiredEntity>
-        <requiredEntity type="client_secret">SampleClientSecret</requiredEntity>
-        <requiredEntity type="payment_region">SamplePaymentRegion</requiredEntity>
-        <requiredEntity type="sandbox">SampleSandbox</requiredEntity>
-        <requiredEntity type="payment_action">SamplePaymentAction</requiredEntity>
-        <requiredEntity type="authorization_mode">SampleAuthorizationMode</requiredEntity>
-    </entity>
-    <entity name="SampleMerchantId" type="merchant_id">
+        <requiredEntity type="merchant_id">SampleAmazonMerchantId</requiredEntity>
+        <requiredEntity type="access_key">SampleAmazonAccessKey</requiredEntity>
+        <requiredEntity type="secret_key">SampleAmazonSecretKey</requiredEntity>
+        <requiredEntity type="client_id">SampleAmazonClientId</requiredEntity>
+        <requiredEntity type="client_secret">SampleAmazonClientSecret</requiredEntity>
+        <requiredEntity type="payment_region">SampleAmazonPaymentRegion</requiredEntity>
+        <requiredEntity type="sandbox">SampleAmazonSandbox</requiredEntity>
+        <requiredEntity type="payment_action">SampleAmazonPaymentAction</requiredEntity>
+        <requiredEntity type="authorization_mode">SampleAmazonAuthorizationMode</requiredEntity>
+    </entity>
+    <entity name="SampleAmazonMerchantId" type="merchant_id">
         <data key="value">someMerchantId</data>
     </entity>
-    <entity name="SampleAccessKey" type="access_key">
+    <entity name="SampleAmazonAccessKey" type="access_key">
         <data key="value">someAccessKey</data>
     </entity>
-    <entity name="SampleSecretKey" type="secret_key">
-        <data key="value">somePrivateKey</data>
+    <entity name="SampleAmazonSecretKey" type="secret_key">
+        <data key="value">someSecretKey</data>
     </entity>
-    <entity name="SampleClientId" type="client_id">
+    <entity name="SampleAmazonClientId" type="client_id">
         <data key="value">someClientId</data>
     </entity>
-    <entity name="SampleClientSecret" type="client_secret">
-        <data key="value">someClientSecret</data>
+    <entity name="SampleAmazonClientSecret" type="client_secret">
+        <data key="value">someClientSecretKey</data>
     </entity>
-    <entity name="SamplePaymentRegion" type="payment_region">
+    <entity name="SampleAmazonPaymentRegion" type="payment_region">
         <data key="value">us</data>
     </entity>
-    <entity name="SampleSandbox" type="sandbox">
+    <entity name="SampleAmazonSandbox" type="sandbox">
         <data key="value">1</data>
     </entity>
-    <entity name="SamplePaymentAction" type="payment_action">
+    <entity name="SampleAmazonPaymentAction" type="payment_action">
         <data key="value">authorize</data>
     </entity>
-    <entity name="SampleAuthorizationMode" type="authorization_mode">
+    <entity name="SampleAmazonAuthorizationMode" type="authorization_mode">
         <data key="value">synchronous</data>
     </entity>
     <!-- default configuration used to restore Magento config -->
     <entity name="DefaultAmazonPaymentConfig" type="amazon_payment_config_state">
-        <requiredEntity type="merchant_id">DefaultMerchantId</requiredEntity>
-        <requiredEntity type="access_key">DefaultAccessKey</requiredEntity>
-        <requiredEntity type="secret_key">DefaultSecretKey</requiredEntity>
-        <requiredEntity type="client_id">DefaultClientId</requiredEntity>
-        <requiredEntity type="client_secret">DefaultClientSecret</requiredEntity>
-        <requiredEntity type="payment_region">DefaultPaymentRegion</requiredEntity>
-        <requiredEntity type="sandbox">DefaultSandbox</requiredEntity>
-        <requiredEntity type="payment_action">DefaultPaymentAction</requiredEntity>
-        <requiredEntity type="authorization_mode">DefaultAuthorizationMode</requiredEntity>
-    </entity>
-    <entity name="DefaultMerchantId" type="merchant_id">
+        <requiredEntity type="merchant_id">DefaultAmazonMerchantId</requiredEntity>
+        <requiredEntity type="access_key">DefaultAmazonAccessKey</requiredEntity>
+        <requiredEntity type="secret_key">DefaultAmazonSecretKey</requiredEntity>
+        <requiredEntity type="client_id">DefaultAmazonClientId</requiredEntity>
+        <requiredEntity type="client_secret">DefaultAmazonClientSecret</requiredEntity>
+        <requiredEntity type="payment_region">DefaultAmazonPaymentRegion</requiredEntity>
+        <requiredEntity type="sandbox">DefaultAmazonSandbox</requiredEntity>
+        <requiredEntity type="payment_action">DefaultAmazonPaymentAction</requiredEntity>
+        <requiredEntity type="authorization_mode">DefaultAmazonAuthorizationMode</requiredEntity>
+    </entity>
+    <entity name="DefaultAmazonMerchantId" type="merchant_id">
         <data key="value"/>
     </entity>
-    <entity name="DefaultAccessKey" type="access_key">
+    <entity name="DefaultAmazonAccessKey" type="access_key">
         <data key="value"/>
     </entity>
-    <entity name="DefaultSecretKey" type="secret_key">
+    <entity name="DefaultAmazonSecretKey" type="secret_key">
         <data key="value"/>
     </entity>
-    <entity name="DefaultClientId" type="client_id">
+    <entity name="DefaultAmazonClientId" type="client_id">
         <data key="value"/>
     </entity>
-    <entity name="DefaultClientSecret" type="client_secret">
+    <entity name="DefaultAmazonClientSecret" type="client_secret">
         <data key="value"/>
     </entity>
-    <entity name="DefaultPaymentRegion" type="payment_region">
+    <entity name="DefaultAmazonPaymentRegion" type="payment_region">
         <data key="value"/>
     </entity>
-    <entity name="DefaultSandbox" type="sandbox">
+    <entity name="DefaultAmazonSandbox" type="sandbox">
         <data key="value"/>
     </entity>
-    <entity name="DefaultPaymentAction" type="payment_action">
+    <entity name="DefaultAmazonPaymentAction" type="payment_action">
         <data key="value">authorize</data>
     </entity>
-    <entity name="DefaultAuthorizationMode" type="authorization_mode">
+    <entity name="DefaultAmazonAuthorizationMode" type="authorization_mode">
         <data key="value">synchronous</data>
     </entity>
 </entities>

--- a/Test/Mftf/Metadata/amazon_payment_config-meta.xml
+++ b/Test/Mftf/Metadata/amazon_payment_config-meta.xml
@@ -1,42 +1,38 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <operations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-            xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataOperation.xsd">
+            xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataOperation.xsd">
     <operation name="CreateAmazonPaymentConfigState" dataType="amazon_payment_config_state" type="create" auth="adminFormKey" url="/admin/system_config/save/section/payment/" method="POST">
         <object key="groups" dataType="amazon_payment_config_state">
             <object key="amazon_payment" dataType="amazon_payment_config_state">
                 <object key="groups" dataType="amazon_payment_config_state">
-                    <object key="amazon_payment" dataType="amazon_payment_config_state">
-                        <object key="groups" dataType="amazon_payment_config_state">
-                            <object key="amazon_payment_required" dataType="amazon_payment_config_state">
-                                <object key="fields" dataType="amazon_payment_config_state">
-                                    <object key="merchant_id" dataType="merchant_id">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="access_key" dataType="access_key">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="secret_key" dataType="secret_key">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="client_id" dataType="client_id">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="client_secret" dataType="client_secret">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="payment_region" dataType="payment_region">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="sandbox" dataType="sandbox">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="payment_action" dataType="payment_action">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="authorization_mode" dataType="authorization_mode">
-                                        <field key="value">string</field>
-                                    </object>
-                                </object>
+                    <object key="credentials" dataType="amazon_payment_config_state">
+                        <object key="fields" dataType="amazon_payment_config_state">
+                            <object key="merchant_id" dataType="merchant_id">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="access_key" dataType="access_key">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="secret_key" dataType="secret_key">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="client_id" dataType="client_id">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="client_secret" dataType="client_secret">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="payment_region" dataType="payment_region">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="sandbox" dataType="sandbox">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="payment_action" dataType="payment_action">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="authorization_mode" dataType="authorization_mode">
+                                <field key="value">string</field>
                             </object>
                         </object>
                     </object>
@@ -44,4 +40,4 @@
             </object>
         </object>
     </operation>
-</operations>
+</operations>
\ No newline at end of file

--- a/Test/Mftf/Metadata/amazon_payment_config_meta.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<operations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-            xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataOperation.xsd">
-    <operation name="CreateAmazonPaymentConfigState" dataType="amazon_payment_config_state" type="create" auth="adminFormKey" url="/admin/system_config/save/section/payment/" method="POST">
-        <object key="groups" dataType="amazon_payment_config_state">
-            <object key="amazon_payment" dataType="amazon_payment_config_state">
-                <object key="groups" dataType="amazon_payment_config_state">
-                    <object key="amazon_payment" dataType="amazon_payment_config_state">
-                        <object key="groups" dataType="amazon_payment_config_state">
-                            <object key="amazon_payment_required" dataType="amazon_payment_config_state">
-                                <object key="fields" dataType="amazon_payment_config_state">
-                                    <object key="merchant_id" dataType="merchant_id">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="access_key" dataType="access_key">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="secret_key" dataType="secret_key">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="client_id" dataType="client_id">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="client_secret" dataType="client_secret">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="payment_region" dataType="payment_region">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="sandbox" dataType="sandbox">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="payment_action" dataType="payment_action">
-                                        <field key="value">string</field>
-                                    </object>
-                                    <object key="authorization_mode" dataType="authorization_mode">
-                                        <field key="value">string</field>
-                                    </object>
-                                </object>
-                            </object>
-                        </object>
-                    </object>
-                </object>
-            </object>
-        </object>
-    </operation>
-</operations>

--- /dev/null
+++ b/Test/Mftf/Section/AmazonCheckoutSection.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<sections xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/sectionObjectSchema.xsd">
+    <section name="AmazonCheckoutSection">
+        <element name="cartPayButton" type="img" selector="#PayWithAmazon-checkout-cart-shortcut-buttons img"/>
+        <element name="miniCartPayButton" type="img" selector="#minicart-amazon-pay-button img"/>
+        <element name="productPayButton" type="div" selector="#amazon-addtoCart-amazon-pay-button-product"/>
+        <element name="checkoutPayButton" type="img" selector=".amazon-button-container img"/>
+        <element name="loginButton" type="img" selector="#LoginWithAmazon-amazon-login img"/>
+    </section>
+</sections>

--- /dev/null
+++ b/Test/Mftf/Section/AmazonLoginSection.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<sections xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/sectionObjectSchema.xsd">
+    <section name="AmazonLoginSection">
+        <element name="apEmail" type="input" selector="#ap_email"/>
+        <element name="apPassword" type="input" selector="#ap_password"/>
+        <element name="apSignin" type="button" selector="#signInSubmit button"/>
+        <element name="apConsent" type="button" selector="[name=consentApproved]"/>
+    </section>
+</sections>

--- /dev/null
+++ b/Test/Mftf/Test/AmazonCheckoutDeclineTest.xml
@@ -0,0 +1,204 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
+    <test name="AmazonCheckoutDeclinePaymentMethod" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline PaymentMethodNotAllowed"/>
+            <description value="Test CC decline message and then success page elements for placed order with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="4545" />
+        </actionGroup>
+        <!--Decline Error Message-->
+        <waitForText userInput="Invalid payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+        <!--Use default CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupGood"/>
+        <!--See success message-->
+        <see selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
+    </test>
+    <test name="AmazonCheckoutDeclineInvalidPaymentMethod" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline InvalidPaymentMethod"/>
+            <description value="Test CC decline message and then success page elements for placed order with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="3434" />
+        </actionGroup>
+        <!--Decline Error Message-->
+        <waitForText userInput="There has been a problem with the selected payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+        <!--Verify iframe wallet message-->
+        <executeJS function="return window.name;" stepKey="topName"/>
+        <executeJS function="return jQuery('#walletWidgetDiv iframe').attr('name');" stepKey="iframeName"/>
+        <switchToIFrame userInput="{$iframeName}" stepKey="switchToIFramePaymentWidget"/>
+        <see selector=".action a" userInput="Verify card info or use another card" stepKey="seeVerify"/>
+        <switchToWindow userInput="{$topName}" stepKey="switchToWindowTop" />
+        <!--Use default CC# using reloaded iframe-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupGood"/>
+        <!--See success message-->
+        <see selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
+    </test>
+    <test name="AmazonCheckoutDeclineAmazonRejected" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline AmazonRejected"/>
+            <description value="Test CC decline message, logout, and redirect to cart with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="2323" />
+        </actionGroup>
+        <!--Decline Error Message-->
+        <waitForText userInput="please choose another payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>        <!--Verify iframe wallet message-->
+        <!--Wait for redirect to cart-->
+        <wait time="5" stepKey="waitRedirect"/>
+        <seeInCurrentUrl url="{{CheckoutCartPage.url}}" stepKey="assertUrl"/>
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+        <!--Confirm logged out from Amazon by logging in (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+    </test>
+    <test name="AmazonCheckoutDeclineTransactionTimedOutInstant" extends="AmazonCheckoutAddProductDetail">
+        <before>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode synchronous" />
+        </before>
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline TransactionTimedOut with Instant Authorization"/>
+            <description value="Test CC timeout message with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="5656" />
+        </actionGroup>
+        <!--Timeout Error Message-->
+        <waitForText userInput="please choose another payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+        <!--Wait for redirect to cart-->
+        <wait time="5" stepKey="waitRedirect"/>
+        <seeInCurrentUrl url="{{CheckoutCartPage.url}}" stepKey="assertUrl"/>
+    </test>
+    <test name="AmazonCheckoutDeclineTransactionTimedOutAutomatic" extends="AmazonCheckoutAddProductDetail">
+        <before>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode asynchronous" />
+        </before>
+        <after>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode synchronous" />
+        </after>
+        <annotations>
+            <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
+            <title value="Amazon Pay Decline TransactionTimedOut with Automatic Authorization)"/>
+            <description value="Test CC timeout message with Amazon Pay"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="5656" />
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="Transaction has been declined" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+    </test>
+    <test name="AmazonCheckoutSCAAbandoned" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Amazon SCA Abandoned"/>
+            <title value="(SCA) Amazon SCA Abandoned"/>
+            <description value="Perform checkout from cart page and ensure SCA Abandoned page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with SCA Abandoned CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="4440" />
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="The SCA challenge was not completed successfully." selector="#checkoutError" stepKey="waitForText"/>
+    </test>
+    <test name="AmazonCheckoutSCAFailure" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Amazon SCA Failed"/>
+            <title value="(SCA) Amazon SCA Failed"/>
+            <description value="Perform checkout from cart page and ensure SCA Failure page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with SCA Failure CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="8320" />
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="Amazon Pay was unable to authenticate the payment instrument." selector="#checkoutError" stepKey="waitForText"/>
+    </test>
+</tests>

--- /dev/null
+++ b/Test/Mftf/Test/AmazonCheckoutSuccessTest.xml
@@ -0,0 +1,214 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
+    <test name="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Prepares product to be checked out"/>
+            <title value="Amazon Pay Add Product to Cart from Detail Page"/>
+            <description value="Creates and loads simple product and adds it to cart using Amazon Pay button on product detail page."/>
+            <severity value="BLOCKER"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+        </after>
+
+        <!--Go to product page-->
+        <amOnPage url="$$createSimpleProduct.custom_attributes[url_key]$$.html" stepKey="navigateToSimpleProductPage"/>
+        <waitForPageLoad stepKey="waitForPageLoadCatalog"/>
+
+        <!--Add to cart via Amazon Pay button on product page-->
+        <waitForElement selector="{{AmazonCheckoutSection.productPayButton}}" time="5" stepKey="apWaitForPayButton"/>
+        <click selector="{{AmazonCheckoutSection.productPayButton}}" stepKey="clickProductPayButton"/>
+
+        <!--Login (redirect)-->
+        <actionGroup ref="AmazonLoginRedirectActionGroup" stepKey="AmazonLoginRedirectActionGroup" />
+    </test>
+    <test name="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Prepares product to be checked out"/>
+            <title value="Amazon Pay Add Product to Cart"/>
+            <description value="Adds product to cart."/>
+            <severity value="BLOCKER"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+        </after>
+
+        <!--Go to product page-->
+        <amOnPage url="$$createSimpleProduct.custom_attributes[url_key]$$.html" stepKey="navigateToSimpleProductPage"/>
+        <waitForPageLoad stepKey="waitForPageLoadCatalog"/>
+
+        <!--Add Product to Shopping Cart-->
+        <actionGroup ref="addToCartFromStorefrontProductPage" stepKey="addToCartFromStorefrontProductPage">
+            <argument name="productName" value="$$createSimpleProduct.name$$"/>
+        </actionGroup>
+    </test>
+    <test name="AmazonCheckoutProductDetail" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Product Details"/>
+            <description value="Perform checkout from product details page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutCart" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Cart"/>
+            <description value="Perform checkout from cart page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutMiniCart" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Minicart"/>
+            <description value="Perform checkout from minicart and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Open minicart-->
+        <waitForElement selector="{{StorefrontMinicartSection.showCart}}" stepKey="waitForShowMinicart" />
+        <waitForElement selector="{{StorefrontMinicartSection.viewAndEditCart}}" stepKey="waitForCartLink" />
+        <click selector="{{StorefrontMinicartSection.showCart}}" stepKey="clickShowMinicart" />
+
+        <!--Login (redirect)-->
+        <click selector="{{AmazonCheckoutSection.miniCartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginRedirectActionGroup" stepKey="AmazonLoginRedirectActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutPage" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Checkout page"/>
+            <description value="Perform checkout from checkout page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Checkout-->
+        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="goToCheckoutFromMinicart"/>
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.checkoutPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutCustomer" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="Amazon Pay Checkout from Customer Account page"/>
+            <description value="Perform checkout after logging in from customer account page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Customer page-->
+        <amOnPage url="/customer/account/" stepKey="goToMyAccountPage" />
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.loginButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutSCASuccess" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="(SCA) Amazon Pay Checkout from Cart"/>
+            <description value="Perform checkout from cart page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+</tests>

--- a/Test/Mftf/composer.json
+++ b/Test/Mftf/composer.json
@@ -2,13 +2,13 @@
   "name": "amzn/login-with-amazon-module",
   "description": "Login with Amazon module",
   "type": "magento2-module",
-  "version": "2.1.2",
+  "version": "2.2.2",
   "license": [
     "Apache-2.0"
   ],
   "require": {
     "php": "~7.0.13|~7.1.0|~7.2.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^2.1.2",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^2.2.2",
     "magento/module-customer": "^101.0",
     "magento/module-store": "^100.1",
     "magento/module-eav": "101.0.*",

--- a/composer.json
+++ b/composer.json
@@ -2,24 +2,26 @@
   "name": "amzn/amazon-pay-module",
   "description": "Amazon Pay module",
   "type": "magento2-module",
-  "version": "2.2.15",
+  "version": "3.2.13",
   "license": [
     "Apache-2.0"
   ],
   "require": {
-    "php": "~7.0.13|~7.1.0|~7.2.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^2.2.15",
-    "amzn/login-with-amazon-module": "^2.2.15",
-    "magento/module-eav": "*",
-    "magento/module-sales": "*",
-    "magento/module-quote": "*",
-    "magento/module-payment": "*",
-    "magento/module-backend": "*",
-    "magento/module-store": "*",
-    "magento/module-checkout": "*",
-    "magento/module-catalog": "*",
+    "php": "~7.1.3||~7.2.0",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.2.13",
+    "amzn/login-with-amazon-module": "^3.2.13",
+    "magento/framework": "^102",
+    "magento/module-customer": "^102",
+    "magento/module-eav": "^102",
+    "magento/module-sales": "^102",
+    "magento/module-quote": "^101.1",
+    "magento/module-payment": "^100.3",
+    "magento/module-backend": "^101",
+    "magento/module-store": "^101",
+    "magento/module-checkout": "^100.3",
+    "magento/module-catalog": "^103",
     "magento/module-paypal": "*",
-    "magento/module-directory": "*"
+    "magento/module-directory": "^100.3"
   },
   "suggest": {
     "magento/module-customer": "*",

--- a/etc/amazon_error_mapping.xml
+++ b/etc/amazon_error_mapping.xml
@@ -1,4 +1,20 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <mapping xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Payment:etc/error_mapping.xsd">
     <message_list>
         <message code="AmazonRejected" translate="true">Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.</message>

--- a/etc/config.xml
+++ b/etc/config.xml
@@ -1,4 +1,20 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Store:etc/config.xsd">
     <default>
         <payment>
@@ -35,7 +51,7 @@
                 <button_color>Gold</button_color>
                 <button_size>medium</button_size>
                 <logging>1</logging>
-                <platform_id>AUGT0HMCLQVX1</platform_id>
+                <platform_id>A2ZAYEJU54T1BM</platform_id>
                 <hard_decline_code>4273</hard_decline_code>
                 <soft_decline_code>7638</soft_decline_code>
             </amazon_payment>

--- a/etc/crontab.xml
+++ b/etc/crontab.xml
@@ -1,8 +1,18 @@
 <?xml version="1.0"?>
 <!--
 /**
- * Copyright © 2016 Magento. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Cron:etc/crontab.xsd">

--- a/etc/di.xml
+++ b/etc/di.xml
@@ -1,7 +1,21 @@
 <?xml version="1.0"?>
-<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-        xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
-    <!-- Begin gateway config -->
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
+<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
     <!-- Payment Method Facade configuration -->
     <virtualType name="AmazonFacade" type="Magento\Payment\Model\Method\Adapter">
         <arguments>
@@ -14,7 +28,6 @@
         </arguments>
     </virtualType>
 
-
     <!-- Amazon validators infrastructure -->
     <virtualType name="AmazonCountryValidator" type="Magento\Payment\Gateway\Validator\CountryValidator">
         <arguments>
@@ -34,29 +47,22 @@
             </argument>
         </arguments>
     </virtualType>
-    <!-- Amazon validators infrastructure -->
-
 
     <!-- Amazon error code mapper -->
-
-    <virtualType name="Amazon\Payment\Gateway\ErrorMapper\VirtualConfigReader"
-                 type="Magento\Payment\Gateway\ErrorMapper\VirtualConfigReader">
+    <virtualType name="Amazon\Payment\Gateway\ErrorMapper\VirtualConfigReader" type="Magento\Payment\Gateway\ErrorMapper\VirtualConfigReader">
         <arguments>
             <argument name="fileName" xsi:type="string">amazon_error_mapping.xml</argument>
         </arguments>
     </virtualType>
-    <virtualType name="Amazon\Payment\Gateway\ErrorMapper\VirtualMappingData"
-                 type="Magento\Payment\Gateway\ErrorMapper\MappingData">
+    <virtualType name="Amazon\Payment\Gateway\ErrorMapper\VirtualMappingData" type="Magento\Payment\Gateway\ErrorMapper\MappingData">
         <arguments>
             <argument name="reader" xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualConfigReader</argument>
             <argument name="cacheId" xsi:type="string">amazon_error_mapper</argument>
         </arguments>
     </virtualType>
-    <virtualType name="Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper"
-                 type="Magento\Payment\Gateway\ErrorMapper\ErrorMessageMapper">
+    <virtualType name="Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper" type="Magento\Payment\Gateway\ErrorMapper\ErrorMessageMapper">
         <arguments>
-            <argument name="messageMapping"
-                xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualMappingData</argument>
+            <argument name="messageMapping" xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualMappingData</argument>
         </arguments>
     </virtualType>
 
@@ -120,14 +126,12 @@
     <!-- Authorize command -->
     <virtualType name="AmazonAuthorizeCommand" type="Amazon\Payment\Gateway\Command\AmazonAuthCommand">
         <arguments>
-            <argument name="requestBuilder"
-                      xsi:type="object">Amazon\Payment\Gateway\Request\AuthorizationRequestBuilder</argument>
+            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\AuthorizationRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\CompleteAuthHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
             <argument name="validator" xsi:type="object">AmazonAuthorizationValidators</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\AuthorizeClient</argument>
-            <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
+            <argument name="errorMessageMapper" xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
@@ -140,51 +144,36 @@
     <!-- Authorize and Capture command -->
     <virtualType name="AmazonSaleCommand" type="Amazon\Payment\Gateway\Command\AmazonAuthCommand">
         <arguments>
-            <argument name="requestBuilder"
-                      xsi:type="object">Amazon\Payment\Gateway\Request\AuthorizationRequestBuilder</argument>
+            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\AuthorizationRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\CompleteSaleHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
             <argument name="validator" xsi:type="object">AmazonAuthorizationValidators</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\CaptureClient</argument>
-            <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
+            <argument name="errorMessageMapper" xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
     <!-- Capture settlement command -->
     <virtualType name="AmazonSettlementCommand" type="Amazon\Payment\Gateway\Command\AmazonAuthCommand">
         <arguments>
-            <argument name="requestBuilder"
-                      xsi:type="object">Amazon\Payment\Gateway\Request\SettlementRequestBuilder</argument>
+            <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\SettlementRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\SettlementHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
             <argument name="validator" xsi:type="object">AmazonAuthorizationValidators</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\SettlementClient</argument>
-            <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
+            <argument name="errorMessageMapper" xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
-    <!-- Capture Request -->
-    <type name="Amazon\Payment\Gateway\Request\CaptureRequestBuilder">
-        <arguments>
-            <argument name="config" xsi:type="object">AmazonGatewayConfig</argument>
-            <argument name="coreHelper" xsi:type="object">Amazon\Core\Helper\Data</argument>
-            <argument name="productMetadata" xsi:type="object">Magento\Framework\App\ProductMetadata</argument>
-        </arguments>
-    </type>
-
     <!-- Refund Command -->
     <virtualType name="AmazonRefundCommand" type="Magento\Payment\Gateway\Command\GatewayCommand">
         <arguments>
             <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\RefundRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\RefundHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
-            <argument name="validator"
-                      xsi:type="object">Amazon\Payment\Gateway\Validator\AuthorizationValidator</argument>
+            <argument name="validator" xsi:type="object">Amazon\Payment\Gateway\Validator\AuthorizationValidator</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\RefundClient</argument>
-            <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
+            <argument name="errorMessageMapper" xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
@@ -194,11 +183,9 @@
             <argument name="requestBuilder" xsi:type="object">Amazon\Payment\Gateway\Request\VoidRequestBuilder</argument>
             <argument name="handler" xsi:type="object">Amazon\Payment\Gateway\Response\VoidHandler</argument>
             <argument name="transferFactory" xsi:type="object">Amazon\Payment\Gateway\Http\TransferFactory</argument>
-            <argument name="validator"
-                      xsi:type="object">Amazon\Payment\Gateway\Validator\AuthorizationValidator</argument>
+            <argument name="validator" xsi:type="object">Amazon\Payment\Gateway\Validator\AuthorizationValidator</argument>
             <argument name="client" xsi:type="object">Amazon\Payment\Gateway\Http\Client\VoidClient</argument>
-            <argument name="errorMessageMapper"
-                      xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
+            <argument name="errorMessageMapper" xsi:type="object">Amazon\Payment\Gateway\ErrorMapper\VirtualErrorMessageMapper</argument>
         </arguments>
     </virtualType>
 
@@ -232,35 +219,28 @@
 
     <!-- end gateway config -->
 
-    <preference for="Amazon\Payment\Api\OrderInformationManagementInterface"
-                type="Amazon\Payment\Model\OrderInformationManagement"/>
+    <preference for="Amazon\Payment\Api\OrderInformationManagementInterface" type="Amazon\Payment\Model\OrderInformationManagement"/>
     <preference for="Amazon\Payment\Api\AddressManagementInterface" type="Amazon\Payment\Model\AddressManagement"/>
     <preference for="Amazon\Payment\Api\QuoteLinkManagementInterface" type="Amazon\Payment\Model\QuoteLinkManagement"/>
     <preference for="Amazon\Payment\Api\Data\QuoteLinkInterface" type="Amazon\Payment\Model\QuoteLink"/>
     <preference for="Amazon\Payment\Api\Data\OrderLinkInterface" type="Amazon\Payment\Model\OrderLink"/>
     <preference for="Amazon\Payment\Api\Data\PendingCaptureInterface" type="Amazon\Payment\Model\PendingCapture"/>
-    <preference for="Amazon\Payment\Api\Data\PendingAuthorizationInterface"
-                type="Amazon\Payment\Model\PendingAuthorization"/>
+    <preference for="Amazon\Payment\Api\Data\PendingAuthorizationInterface" type="Amazon\Payment\Model\PendingAuthorization"/>
     <preference for="Amazon\Payment\Api\Data\PendingRefundInterface" type="Amazon\Payment\Model\PendingRefund"/>
     <preference for="Amazon\Payment\Ipn\IpnHandlerFactoryInterface" type="Amazon\Payment\Ipn\IpnHandlerFactory"/>
     <preference for="AmazonPay\IpnHandlerInterface" type="Amazon\Payment\Ipn\IpnHandler"/>
-    <preference for="Amazon\Payment\Api\Ipn\CompositeProcessorInterface"
-                type="Amazon\Payment\Model\Ipn\CompositeProcessor"/>
+    <preference for="Amazon\Payment\Api\Ipn\CompositeProcessorInterface" type="Amazon\Payment\Model\Ipn\CompositeProcessor"/>
     <type name="Magento\Quote\Api\CartRepositoryInterface">
         <plugin name="amazon_payment_quote_repository" type="Amazon\Payment\Plugin\QuoteRepository" sortOrder="1"/>
     </type>
     <type name="Magento\Checkout\Api\ShippingInformationManagementInterface">
-        <plugin name="amazon_payment_shipping_information_management"
-                type="Amazon\Payment\Plugin\ShippingInformationManagement" sortOrder="1"/>
+        <plugin name="amazon_payment_shipping_information_management" type="Amazon\Payment\Plugin\ShippingInformationManagement" sortOrder="1"/>
     </type>
     <type name="Magento\Quote\Api\Data\PaymentInterface">
         <plugin name="amazon_payment_additional_information" type="Amazon\Payment\Plugin\AdditionalInformation"/>
     </type>
     <type name="Amazon\Payment\Model\Method\AmazonLoginMethod">
-        <plugin name="disable_amazon_payment_method"
-                type="Amazon\Payment\Plugin\DisableAmazonPaymentMethod"
-                sortOrder="10"
-                disabled="false"/>
+        <plugin name="disable_amazon_payment_method" type="Amazon\Payment\Plugin\DisableAmazonPaymentMethod" sortOrder="10" disabled="false"/>
     </type>
     <type name="Magento\Quote\Model\PaymentMethodManagement">
         <plugin name="confirm_order_reference_on_payment_details_save" type="Amazon\Payment\Plugin\ConfirmOrderReference" sortOrder="10" disabled="false"/>
@@ -278,16 +258,14 @@
     </type>
     <type name="Amazon\Payment\Model\QueuedRefundUpdater">
         <arguments>
-            <argument name="adminNotifier"
-                  xsi:type="object">Magento\Framework\Notification\NotifierInterface\Proxy</argument>
+            <argument name="adminNotifier" xsi:type="object">Magento\Framework\Notification\NotifierInterface\Proxy</argument>
         </arguments>
     </type>
     <type name="Amazon\Payment\Api\Ipn\CompositeProcessorInterface">
         <arguments>
             <argument name="processors" xsi:type="array">
                 <item name="captureprocessor" xsi:type="object">Amazon\Payment\Model\Ipn\CaptureProcessor\Proxy</item>
-                <item name="authorizationprocessor"
-                      xsi:type="object">Amazon\Payment\Model\Ipn\AuthorizationProcessor\Proxy</item>
+                <item name="authorizationprocessor" xsi:type="object">Amazon\Payment\Model\Ipn\AuthorizationProcessor\Proxy</item>
                 <item name="orderprocessor" xsi:type="object">Amazon\Payment\Model\Ipn\OrderProcessor\Proxy</item>
                 <item name="refundprocessor" xsi:type="object">Amazon\Payment\Model\Ipn\RefundProcessor\Proxy</item>
             </argument>
@@ -312,8 +290,7 @@
         </arguments>
     </type>
     <type name="Magento\Framework\Webapi\ErrorProcessor">
-        <plugin name="amazon_payment_webapi_error_processor" type="Amazon\Payment\Plugin\WebapiErrorProcessor"
-                sortOrder="1"/>
+        <plugin name="amazon_payment_webapi_error_processor" type="Amazon\Payment\Plugin\WebapiErrorProcessor" sortOrder="1"/>
     </type>
 
     <type name="Amazon\Payment\Gateway\Config\Config">

--- a/etc/email_templates.xml
+++ b/etc/email_templates.xml
@@ -1,4 +1,20 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Email:etc/email_templates.xsd">
     <template id="amazon_payments_auth_soft_decline" label="Soft-declined Authorization" file="soft-declined-auth.html" type="html" module="Amazon_Payment" area="frontend"/>
     <template id="amazon_payments_auth_hard_decline" label="Hard-declined Authorization" file="hard-declined-auth.html" type="html" module="Amazon_Payment" area="frontend"/>

--- a/etc/events.xml
+++ b/etc/events.xml
@@ -1,6 +1,21 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Event/etc/events.xsd">
-
     <event name="sales_order_load_after">
         <observer name="amazon_payment_load_order" instance="Amazon\Payment\Observer\LoadOrder" />
     </event>

--- a/etc/extension_attributes.xml
+++ b/etc/extension_attributes.xml
@@ -1,17 +1,37 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Api/etc/extension_attributes.xsd">
     <extension_attributes for="Magento\Quote\Api\Data\CartInterface">
-        <attribute code="amazon_order_reference_id" type="string">
+        <attribute code="amazon_order_reference_id" type="Amazon\Payment\Api\Data\QuoteLinkInterface">
             <join reference_table="amazon_quote" reference_field="quote_id" join_on_field="entity_id">
                 <field>amazon_order_reference_id</field>
+                <field>quote_id</field>
+                <field>sandbox_simulation_reference</field>
+                <field>confirmed</field>
             </join>
         </attribute>
     </extension_attributes>
     <extension_attributes for="Magento\Sales\Api\Data\OrderInterface">
-        <attribute code="amazon_order_reference_id" type="string">
+        <attribute code="amazon_order_reference_id" type="Amazon\Payment\Api\Data\OrderLinkInterface">
             <join reference_table="amazon_sales_order" reference_field="order_id" join_on_field="entity_id">
                 <field>amazon_order_reference_id</field>
+                <field>order_id</field>
             </join>
         </attribute>
     </extension_attributes>
-</config>
\ No newline at end of file
+</config>

--- a/etc/frontend/di.xml
+++ b/etc/frontend/di.xml
@@ -1,4 +1,20 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
     <type name="Amazon\Payment\Block\Minicart\Button">
         <arguments>
@@ -12,4 +28,4 @@
     <type name="Magento\Checkout\Block\Checkout\LayoutProcessor">
         <plugin name="amazon_payment_checkout_processor" type="Amazon\Payment\Plugin\CheckoutProcessor" />
     </type>
-</config>
\ No newline at end of file
+</config>

--- a/etc/frontend/events.xml
+++ b/etc/frontend/events.xml
@@ -1,6 +1,25 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Event/etc/events.xsd">
     <event name="shortcut_buttons_container">
         <observer name="amazon_buttons" instance="Amazon\Payment\Observer\AddAmazonButton"/>
     </event>
+    <event name="kco_override_load_checkout">
+        <observer name="amazon_core_klarna_kco_override" instance="Amazon\Payment\Observer\KlarnaKcoOverride" />
+    </event>
 </config>

--- a/etc/frontend/routes.xml
+++ b/etc/frontend/routes.xml
@@ -1,8 +1,24 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:App/etc/routes.xsd">
     <router id="standard">
         <route id="amazon_payments" frontName="amazonpayments">
             <module name="Amazon_Payment" />
         </route>
     </router>
-</config>
\ No newline at end of file
+</config>

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -1,6 +1,22 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Payment" setup_version="2.2.15" >
+    <module name="Amazon_Payment" setup_version="3.2.13" >
         <sequence>
             <module name="Amazon_Core"/>
             <module name="Amazon_Login"/>

--- a/etc/payment.xml
+++ b/etc/payment.xml
@@ -1,4 +1,20 @@
 <?xml version="1.0"?>
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
 <payment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Payment:etc/payment.xsd">
     <methods>
         <method name="amazon_payment">

--- a/etc/webapi.xml
+++ b/etc/webapi.xml
@@ -1,6 +1,21 @@
 <?xml version="1.0"?>
-<routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-        xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Webapi:etc/webapi.xsd">
+<!--
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
+<routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Webapi:etc/webapi.xsd">
     <route url="/V1/amazon-shipping-address/:amazonOrderReferenceId" method="PUT">
         <service class="Amazon\Payment\Api\AddressManagementInterface" method="getShippingAddress"/>
         <resources>

--- a/i18n/de_AT.csv
+++ b/i18n/de_AT.csv
@@ -18,4 +18,5 @@
 "Amazon could not process your request.","Amazon Pay konnte Ihre Anfrage nicht bearbeiten. Bitte versuchen Sie es noch einmal."
 "Please select a payment method.","Wählen Sie eine Zahlungsweise aus."
 "Your session has expired, please reload the page and try again.","Ihre Sitzung ist abgelaufen. Bitte laden Sie die Seite erneut und versuchen Sie es noch einmal."
-"Return to standard checkout","Zum Standard Checkout zurückkehren"
\ No newline at end of file
+"Return to standard checkout","Zum Standard Checkout zurückkehren"
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Mit dieser Zahlungsart ist ein Problem aufgetreten. Um Ihre Bestellung abzuschließen, wählen Sie bitte eine andere aus."

--- a/i18n/de_CH.csv
+++ b/i18n/de_CH.csv
@@ -18,4 +18,5 @@
 "Amazon could not process your request.","Amazon Pay konnte Ihre Anfrage nicht bearbeiten. Bitte versuchen Sie es noch einmal."
 "Please select a payment method.","Wählen Sie eine Zahlungsweise aus."
 "Your session has expired, please reload the page and try again.","Ihre Sitzung ist abgelaufen. Bitte laden Sie die Seite erneut und versuchen Sie es noch einmal."
-"Return to standard checkout","Zum Standard Checkout zurückkehren"
\ No newline at end of file
+"Return to standard checkout","Zum Standard Checkout zurückkehren"
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Mit dieser Zahlungsart ist ein Problem aufgetreten. Um Ihre Bestellung abzuschließen, wählen Sie bitte eine andere aus."

--- a/i18n/de_DE.csv
+++ b/i18n/de_DE.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay konnte Ihre Anfrage nicht bearbeiten. Bitte versuchen Sie es noch einmal."
 "Please select a payment method.","Wählen Sie eine Zahlungsweise aus."
 "Your session has expired, please reload the page and try again.","Ihre Sitzung ist abgelaufen. Bitte laden Sie die Seite erneut und versuchen Sie es noch einmal."
-"Return to standard checkout","Zum Standard Checkout zurückkehren"
\ No newline at end of file
+"Return to standard checkout","Zum Standard Checkout zurückkehren"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Beim Zahlungsvorgang ist ein Problem aufgetreten. Ihre Bestellung wurde nicht aufgegeben und Ihr Konto nicht belastet."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Mit dieser Zahlungsart ist ein Problem aufgetreten. Um Ihre Bestellung abzuschließen, wählen Sie bitte eine andere aus."

--- a/i18n/en_US.csv
+++ b/i18n/en_US.csv
@@ -115,4 +115,6 @@
 "Welcome back!","Welcome back!"
 "With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop.","With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop."
 "You will be registering for a %1 account based on the base currency of your shop (%2).","You will be registering for a %1 account based on the base currency of your shop (%2)."
-"Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
\ No newline at end of file
+"Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","There was a problem with your payment. Your order hasn't been placed, and you haven't been charged."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Something's wrong with your payment method. To place your order, try another."

--- a/i18n/es_AR.csv
+++ b/i18n/es_AR.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/es_CL.csv
+++ b/i18n/es_CL.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/es_CO.csv
+++ b/i18n/es_CO.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/es_CR.csv
+++ b/i18n/es_CR.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/es_ES.csv
+++ b/i18n/es_ES.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/es_MX.csv
+++ b/i18n/es_MX.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/es_PA.csv
+++ b/i18n/es_PA.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/es_PE.csv
+++ b/i18n/es_PE.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/es_VE.csv
+++ b/i18n/es_VE.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."

--- a/i18n/fr_CA.csv
+++ b/i18n/fr_CA.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay n'a pas pu traiter votre demande. Veuillez réessayer."
 "Please select a payment method.","Sélectionnez un mode de paiement."
 "Your session has expired, please reload the page and try again.","Votre session a expiré. Actualisez la page et réessayez."
-"Return to standard checkout","Revenir à la commande standard"
\ No newline at end of file
+"Return to standard checkout","Revenir à la commande standard"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Un problème s’est produit avec votre paiement. Votre commande n'a pas été passée et vous n'avez pas été débité."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Un problème est survenu avec votre moyen de paiement. Pour passer votre commande, essayez un autre moyen de paiement."

--- a/i18n/fr_FR.csv
+++ b/i18n/fr_FR.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Amazon Pay n'a pas pu traiter votre demande. Veuillez réessayer."
 "Please select a payment method.","Sélectionnez un mode de paiement."
 "Your session has expired, please reload the page and try again.","Votre session a expiré. Actualisez la page et réessayez."
-"Return to standard checkout","Revenir à la commande standard"
\ No newline at end of file
+"Return to standard checkout","Revenir à la commande standard"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Un problème s’est produit avec votre paiement. Votre commande n'a pas été passée et vous n'avez pas été débité."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Un problème est survenu avec votre moyen de paiement. Pour passer votre commande, essayez un autre moyen de paiement."

--- a/i18n/it_CH.csv
+++ b/i18n/it_CH.csv
@@ -18,4 +18,5 @@
 "Amazon could not process your request.","Il servizio Amazon Pay non ha potuto elaborare la tua richiesta. Riprova."
 "Please select a payment method.","Seleziona un metodo di pagamento."
 "Your session has expired, please reload the page and try again.","La sessione è scaduta. Ricarica la pagina e riprova."
-"Return to standard checkout","Ritorna al tuo checkout originale"
\ No newline at end of file
+"Return to standard checkout","Ritorna al tuo checkout originale"
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Si è verificato un problema con il metodo di pagamento. Per effettuare l'ordine, prova con un altro metodo di pagamento."

--- a/i18n/it_IT.csv
+++ b/i18n/it_IT.csv
@@ -18,4 +18,6 @@
 "Amazon could not process your request.","Il servizio Amazon Pay non ha potuto elaborare la tua richiesta. Riprova."
 "Please select a payment method.","Seleziona un metodo di pagamento."
 "Your session has expired, please reload the page and try again.","La sessione è scaduta. Ricarica la pagina e riprova."
-"Return to standard checkout","Ritorna al tuo checkout originale"
\ No newline at end of file
+"Return to standard checkout","Ritorna al tuo checkout originale"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Si è verificato un problema con il pagamento. L'ordine non è stato effettuato, pertanto non ti è stato addebitato alcun importo."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Si è verificato un problema con il metodo di pagamento. Per effettuare l'ordine, prova con un altro metodo di pagamento."

--- a/view/frontend/layout/customer_account_edit.xml
+++ b/view/frontend/layout/customer_account_edit.xml
@@ -8,18 +8,8 @@
 <page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
     <update handle="customer_account"/>
     <body>
-        <referenceBlock name="head.components">
-            <block class="Magento\Framework\View\Element\Js\Components" name="customer_account_edit_head_components" template="Magento_Customer::js/components.phtml"/>
-        </referenceBlock>
-        <referenceBlock name="page.main.title">
-            <action method="setPageTitle">
-                <argument translate="true" name="title" xsi:type="string">Edit Account Information</argument>
-            </action>
-        </referenceBlock>
-        <referenceContainer name="content">
-            <block class="Magento\Customer\Block\Form\Edit" name="customer_edit" template="Amazon_Payment::form/edit.phtml" cacheable="false">
-                <container name="form.additional.info" as="form_additional_info"/>
-            </block>
+        <referenceContainer name="form.additional.info">
+            <block class="Amazon\Payment\Block\Widget\ResetPassword" name="amazon.pay.password.reset" before="-" template="Amazon_Payment::widget/resetpassword.phtml" cacheable="false" />
         </referenceContainer>
     </body>
 </page>

--- a/view/frontend/templates/form/edit.phtml
+++ /dev/null
@@ -1,140 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-
-// @codingStandardsIgnoreFile
-
-/** @var \Magento\Customer\Block\Form\Edit $block */
-?>
-<form class="form form-edit-account" action="<?= $block->escapeUrl($block->getUrl('customer/account/editPost')) ?>" method="post" id="form-validate" enctype="multipart/form-data" data-hasrequired="<?= $block->escapeHtmlAttr(__('* Required Fields')) ?>" autocomplete="off">
-    <fieldset class="fieldset info">
-        <?= $block->getBlockHtml('formkey') ?>
-        <legend class="legend"><span><?= $block->escapeHtml(__('Account Information')) ?></span></legend><br>
-        <?php $amazonReset = $block->getLayout()->createBlock('Amazon\Payment\Block\Widget\ResetPassword'); ?>
-        <?php if ($amazonReset->displayAmazonInfo()): ?>
-            <?= $amazonReset->toHtml(); ?>
-        <?php endif; ?>
-        <?= $block->getLayout()->createBlock('Magento\Customer\Block\Widget\Name')->setObject($block->getCustomer())->toHtml() ?>
-
-        <?php $_dob = $block->getLayout()->createBlock('Magento\Customer\Block\Widget\Dob') ?>
-        <?php $_taxvat = $block->getLayout()->createBlock('Magento\Customer\Block\Widget\Taxvat') ?>
-        <?php $_gender = $block->getLayout()->createBlock('Magento\Customer\Block\Widget\Gender') ?>
-        <?php if ($_dob->isEnabled()): ?>
-            <?= $_dob->setDate($block->getCustomer()->getDob())->toHtml() ?>
-        <?php endif ?>
-        <?php if ($_taxvat->isEnabled()): ?>
-            <?= $_taxvat->setTaxvat($block->getCustomer()->getTaxvat())->toHtml() ?>
-        <?php endif ?>
-        <?php if ($_gender->isEnabled()): ?>
-            <?= $_gender->setGender($block->getCustomer()->getGender())->toHtml() ?>
-        <?php endif ?>
-        <div class="field choice">
-            <input type="checkbox" name="change_email" id="change-email" data-role="change-email" value="1" title="<?= $block->escapeHtmlAttr(__('Change Email')) ?>" class="checkbox" />
-            <label class="label" for="change-email"><span><?= $block->escapeHtml(__('Change Email')) ?></span></label>
-        </div>
-        <div class="field choice">
-            <input type="checkbox" name="change_password" id="change-password" data-role="change-password" value="1" title="<?= $block->escapeHtmlAttr(__('Change Password')) ?>"<?php if ($block->getChangePassword()): ?> checked="checked"<?php endif; ?> class="checkbox" />
-            <label class="label" for="change-password"><span><?= $block->escapeHtml(__('Change Password')) ?></span></label>
-        </div>
-    </fieldset>
-
-    <fieldset class="fieldset password" data-container="change-email-password">
-        <legend class="legend"><span data-title="change-email-password"><?= $block->escapeHtml(__('Change Email and Password')) ?></span></legend><br>
-        <div class="field email required" data-container="change-email">
-            <label class="label" for="email"><span><?= $block->escapeHtml(__('Email')) ?></span></label>
-            <div class="control">
-                <input type="email" name="email" id="email" autocomplete="email" data-input="change-email" value="<?= $block->escapeHtmlAttr($block->getCustomer()->getEmail()) ?>" title="<?= $block->escapeHtmlAttr(__('Email')) ?>" class="input-text" data-validate="{required:true, 'validate-email':true}" />
-            </div>
-        </div>
-        <div class="field password current required">
-            <label class="label" for="current-password"><span><?= $block->escapeHtml(__('Current Password')) ?></span></label>
-            <div class="control">
-                <input type="password" class="input-text" name="current_password" id="current-password" data-input="current-password" autocomplete="off" />
-            </div>
-        </div>
-        <div class="field new password required" data-container="new-password">
-            <label class="label" for="password"><span><?= $block->escapeHtml(__('New Password')) ?></span></label>
-            <div class="control">
-                <input type="password" class="input-text" name="password" id="password"
-                    data-password-min-length="<?= $block->escapeHtml($block->getMinimumPasswordLength()) ?>"
-                    data-password-min-character-sets="<?= $block->escapeHtml($block->getRequiredCharacterClassesNumber()) ?>"
-                    data-input="new-password"
-                    data-validate="{required:true, 'validate-customer-password':true}"
-                    autocomplete="off" />
-                <div id="password-strength-meter-container" data-role="password-strength-meter" aria-live="polite">
-                    <div id="password-strength-meter" class="password-strength-meter">
-                        <?= $block->escapeHtml(__('Password Strength')) ?>:
-                        <span id="password-strength-meter-label" data-role="password-strength-meter-label">
-                            <?= $block->escapeHtml(__('No Password')) ?>
-                        </span>
-                    </div>
-                </div>
-            </div>
-        </div>
-        <div class="field confirm password required" data-container="confirm-password">
-            <label class="label" for="password-confirmation"><span><?= $block->escapeHtml(__('Confirm New Password')) ?></span></label>
-            <div class="control">
-                <input type="password" class="input-text" name="password_confirmation" id="password-confirmation"
-                    data-input="confirm-password"
-                    autocomplete="off" />
-            </div>
-        </div>
-    </fieldset>
-    <?= $block->getChildHtml('form_additional_info') ?>
-    <div class="actions-toolbar">
-        <div class="primary">
-            <button type="submit" class="action save primary" title="<?= $block->escapeHtmlAttr(__('Save')) ?>"><span><?= $block->escapeHtml(__('Save')) ?></span></button>
-        </div>
-        <div class="secondary">
-            <a class="action back" href="<?= $block->escapeUrl($block->getBackUrl()) ?>"><span><?= $block->escapeHtml(__('Go back')) ?></span></a>
-        </div>
-    </div>
-</form>
-<script>
-    require([
-        "jquery",
-        "mage/mage"
-    ], function($){
-        var dataForm = $('#form-validate');
-        var ignore = <?= /* @noEscape */ $_dob->isEnabled() ? '\'input[id$="full"]\'' : 'null' ?>;
-        
-        dataForm.mage('validation', {
-        <?php if ($_dob->isEnabled()): ?>
-            errorPlacement: function(error, element) {
-                if (element.prop('id').search('full') !== -1) {
-                    var dobElement = $(element).parents('.customer-dob'),
-                        errorClass = error.prop('class');
-                    error.insertAfter(element.parent());
-                    dobElement.find('.validate-custom').addClass(errorClass)
-                        .after('<div class="' + errorClass + '"></div>');
-                }
-                else {
-                    error.insertAfter(element);
-                }
-            },
-            ignore: ':hidden:not(' + ignore + ')'
-        <?php else: ?>
-            ignore: ignore ? ':hidden:not(' + ignore + ')' : ':hidden'
-        <?php endif ?>
-        });
-
-    });
-</script>
-<script type="text/x-magento-init">
-    {
-        "[data-role=change-email], [data-role=change-password]": {
-            "changeEmailPassword": {
-                "titleChangeEmail": "<?= $block->escapeJs($block->escapeHtml(__('Change Email'))) ?>",
-                "titleChangePassword": "<?= $block->escapeJs($block->escapeHtml(__('Change Password'))) ?>",
-                "titleChangeEmailAndPassword": "<?= $block->escapeJs($block->escapeHtml(__('Change Email and Password'))) ?>"
-            }
-        },
-        "[data-container=new-password]": {
-            "passwordStrengthIndicator": {
-                "formSelector": "form.form-edit-account"
-            }
-        }
-    }
-</script>

--- a/view/frontend/templates/widget/resetpassword.phtml
+++ b/view/frontend/templates/widget/resetpassword.phtml
@@ -10,5 +10,5 @@
 ?>
 <div class="field password-info">
     <p><?= $block->escapeHtml(__('If you created this account using Amazon Pay, you might not know your site password.')) ?>
-        <a href="<?php echo $block->getLink(); ?>"><?= $block->escapeHtml(__('Request a password to change your account password.')); ?></a></p>
-</div>
\ No newline at end of file
+        <a href="<?= $block->escapeHtml($block->getLink()); ?>"><?= $block->escapeHtml(__('Request a password to change your account password.')); ?></a></p>
+</div>

--- a/view/frontend/web/css/source/_module.less
+++ b/view/frontend/web/css/source/_module.less
@@ -120,6 +120,11 @@
         }
     }
 
+    /** hide alt currency - if multicurrency is enabled this will be unhidden dynamically **/
+    tr.totals.charge {
+        display: none;
+    }
+
     .amazon-widget {
         max-width: 400px;
         height: 228px;

--- a/view/frontend/web/js/action/place-order.js
+++ b/view/frontend/web/js/action/place-order.js
@@ -29,8 +29,7 @@ define(
         'use strict';
 
         return function (paymentData, redirectOnSuccess) {
-            var serviceUrl,
-                payload;
+            var serviceUrl, payload;
 
             redirectOnSuccess = redirectOnSuccess !== false;
 

--- a/view/frontend/web/js/amazon-button.js
+++ b/view/frontend/web/js/amazon-button.js
@@ -18,15 +18,18 @@ define([
     'Magento_Customer/js/section-config',
     'Amazon_Payment/js/model/amazonPaymentConfig',
     'amazonCsrf',
+    'Magento_Checkout/js/model/full-screen-loader',
     'modernizr/modernizr',
     'amazonCore',
     'jquery/ui',
     'uiRegistry',
-], function ($, customerData, sectionConfig, amazonPaymentConfig, amazonCsrf) {
+    'mage/cookies'
+], function ($, customerData, sectionConfig, amazonPaymentConfig, amazonCsrf, fullScreenLoader) {
     'use strict';
-    var _this,
-        $button;
+    var _this;
+
     if (amazonPaymentConfig.isDefined()) {
+
         $.widget('amazon.AmazonButton', {
             options: {
                 merchantId: null,
@@ -42,9 +45,17 @@ define([
              */
             _create: function () {
                 _this = this;
-                $button = this.element;
+
                 this._verifyAmazonConfig();
-                _this._renderAmazonButton();
+
+                if (typeof OffAmazonPayments === 'undefined') {
+                    // async render
+                    $(window).on('OffAmazonPayments', $.proxy(function () {
+                        this._renderAmazonButton();
+                    }, this));
+                } else {
+                    this._renderAmazonButton();
+                }
             },
 
             /**
@@ -53,15 +64,15 @@ define([
              */
             _verifyAmazonConfig: function () {
                 if (amazonPaymentConfig.isDefined()) {
-                    _this.options.merchantId = amazonPaymentConfig.getValue('merchantId');
-                    _this.options.buttonType = _this.options.buttonType === 'LwA' ?
+                    this.options.merchantId = amazonPaymentConfig.getValue('merchantId');
+                    this.options.buttonType = this.options.buttonType === 'LwA' ?
                         amazonPaymentConfig.getValue('buttonTypeLwa') : amazonPaymentConfig.getValue('buttonTypePwa');
-                    _this.options.buttonColor = amazonPaymentConfig.getValue('buttonColor');
-                    _this.options.buttonSize = amazonPaymentConfig.getValue('buttonSize');
-                    _this.options.redirectUrl = amazonPaymentConfig.getValue('redirectUrl');
-                    _this.options.loginPostUrl = amazonPaymentConfig.getValue('loginPostUrl');
-                    _this.options.loginScope = amazonPaymentConfig.getValue('loginScope');
-                    _this.options.buttonLanguage = amazonPaymentConfig.getValue('displayLanguage');
+                    this.options.buttonColor = amazonPaymentConfig.getValue('buttonColor');
+                    this.options.buttonSize = amazonPaymentConfig.getValue('buttonSize');
+                    this.options.redirectUrl = amazonPaymentConfig.getValue('redirectUrl');
+                    this.options.loginPostUrl = amazonPaymentConfig.getValue('loginPostUrl');
+                    this.options.loginScope = amazonPaymentConfig.getValue('loginScope');
+                    this.options.buttonLanguage = amazonPaymentConfig.getValue('displayLanguage');
                 }
             },
 
@@ -87,6 +98,7 @@ define([
                 if (sections) {
                     customerData.invalidate(sections);
                 }
+                $.mage.cookies.set('amazon_Login_accessToken', event.access_token);
                 window.location = _this.options.redirectUrl + '?access_token=' + event.access_token;
                 // jscs:enable requireCamelCaseOrUpperCaseIdentifiers
             },
@@ -97,7 +109,8 @@ define([
              * @return {String}
              */
             _popupCallback: function () {
-                return _this.usePopUp() ? _this.secureHttpsCallback : amazonPaymentConfig.getValue('oAuthHashRedirectUrl');
+                return _this.usePopUp() ? _this.secureHttpsCallback :
+                    amazonPaymentConfig.getValue('oAuthHashRedirectUrl');
             },
 
             /**
@@ -122,7 +135,7 @@ define([
              */
             usePopUp: function () {
                 return window.location.protocol === 'https:' && !$('body').hasClass('catalog-product-view') &&
-                    !_this._touchSupported();
+                    !this._touchSupported();
             },
 
             /**
@@ -130,16 +143,17 @@ define([
              * @private
              */
             _renderAmazonButton: function () {
-                OffAmazonPayments.Button($button.attr('id'), _this.options.merchantId, { //eslint-disable-line no-undef
-                    type: _this.options.buttonType,
-                    color: _this.options.buttonColor,
-                    size: _this.options.buttonSize,
-                    language: _this.options.buttonLanguage,
+                OffAmazonPayments.Button(this.element[0].id, this.options.merchantId, { //eslint-disable-line no-undef
+                    type: this.options.buttonType,
+                    color: this.options.buttonColor,
+                    size: this.options.buttonSize,
+                    language: this.options.buttonLanguage,
 
                     /**
                      * Authorization callback
                      */
                     authorization: function () {
+                        fullScreenLoader.startLoader();
                         //eslint-disable-next-line no-undef
                         amazon.Login.authorize(_this._getLoginOptions(), _this._popupCallback());
                     }
@@ -154,8 +168,8 @@ define([
              */
             _getLoginOptions: function () {
                 return {
-                    scope: _this.options.loginScope,
-                    popup: _this.usePopUp(),
+                    scope: this.options.loginScope,
+                    popup: this.usePopUp(),
                     state: amazonCsrf.generateNewValue()
                 };
             }

--- a/view/frontend/web/js/amazon-core.js
+++ b/view/frontend/web/js/amazon-core.js
@@ -16,53 +16,66 @@
 define([
     'jquery',
     'ko',
+    'mage/url',
     'amazonPaymentConfig',
+    'Magento_Ui/js/model/messageList',
     'amazonWidgetsLoader',
-    'jquery/jquery-storageapi'
-], function ($, ko, amazonPaymentConfig) {
+    'jquery/jquery-storageapi',
+    'mage/cookies'
+], function ($, ko, url, amazonPaymentConfig, messageList) {
     'use strict';
 
-    var clientId = amazonPaymentConfig.getValue('clientId'),
-        amazonDefined = ko.observable(false),
+    var amazonDefined = ko.observable(false),
         amazonLoginError = ko.observable(false),
-        accessToken = ko.observable(null);
+        accessToken = ko.observable(null),
+        // Match region config to amazon.Login.Region
+        regions = {'us': 'NA', 'de': 'EU', 'uk': 'EU', 'jp': 'APAC'},
+        sandboxMode,
+        region;
+
+    accessToken($.mage.cookies.get('amazon_Login_accessToken'));
+
+    var initAmazonLogin = function () {
+        amazon.Login.setClientId(amazonPaymentConfig.getValue('clientId')); //eslint-disable-line no-undef
+        amazon.Login.setSandboxMode(amazonPaymentConfig.getValue('isSandboxEnabled', false)); //eslint-disable-line no-undef
+        amazon.Login.setRegion(regions[amazonPaymentConfig.getValue('region')]); //eslint-disable-line no-undef
+        amazon.Login.setUseCookie(true); //eslint-disable-line no-undef
+
+        doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
+        amazonDefined(true);
+    };
 
     if (typeof amazon === 'undefined') {
-        /**
-         * Amazon login ready callback
-         */
-        window.onAmazonLoginReady = function () {
-            setClientId(clientId);  //eslint-disable-line no-use-before-define
-            doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
-        };
+        window.onAmazonLoginReady = initAmazonLogin;
     } else {
-        setClientId(clientId);  //eslint-disable-line no-use-before-define
-        doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
+        initAmazonLogin();
     }
 
-    /**
-     * Set Client ID
-     * @param {String} cid
-     */
-    function setClientId(cid) {
-        amazon.Login.setClientId(cid); //eslint-disable-line no-undef
-        amazonDefined(true);
-    }
+    // Widgets.js ready callback
+    window.onAmazonPaymentsReady = function() {
+        $(window).trigger('OffAmazonPayments');
+    };
 
     /**
      * Log user out of amazon
      */
     function amazonLogout() {
-        if (amazonDefined()) {
-            amazon.Login.logout(); //eslint-disable-line no-undef
-        } else {
-            var logout = amazonDefined.subscribe(function (defined) { //eslint-disable-line vars-on-top
-                if (defined) {
-                    amazon.Login.logout(); // eslint-disable-line no-undef
-                    logout.dispose(); //remove subscribe
-                }
-            });
-        }
+        $.mage.cookies.clear('amazon_Login_accessToken');
+        $.ajax({
+            url: url.build('amazon/logout'),
+            context: this
+        }).always(function () {
+            if (amazonDefined()) {
+                amazon.Login.logout(); //eslint-disable-line no-undef
+            } else {
+                var logout = amazonDefined.subscribe(function (defined) { //eslint-disable-line vars-on-top
+                    if (defined) {
+                        amazon.Login.logout(); // eslint-disable-line no-undef
+                        logout.dispose(); //remove subscribe
+                    }
+                });
+            }
+        });
     }
 
     /**
@@ -87,39 +100,31 @@ define([
         amazonLoginError(true);
     }
 
-    return {
-        /**
-         * Verify a user is logged into amazon
-         */
-        verifyAmazonLoggedIn: function () {
-            var defer  = $.Deferred(),
-                loginOptions = {
-                    scope: amazonPaymentConfig.getValue('loginScope'),
-                    popup: true,
-                    interactive: 'never'
-                };
-
-            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
-            amazon.Login.authorize(loginOptions, function (response) { //eslint-disable-line no-undef
-                if (response.error) {
-                    defer.reject(response.error);
-                } else {
-                    accessToken(response.access_token);
-                    defer.resolve(!response.error);
-                }
-            });
-            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers
-
-            return defer.promise();
-        },
+    function handleWidgetError(error) {
+        console.log('OffAmazonPayments.Widgets', error.getErrorCode(), error.getErrorMessage());
+        switch (error.getErrorCode()) {
+            case 'BuyerSessionExpired':
+                messageList.addErrorMessage({message: $.mage.__('Your Amazon session has expired.  Please sign in again by clicking the Amazon Pay Button.')});
+                var storage = require('Amazon_Payment/js/model/storage'); //TODO: clean up this circular dependency
+                storage.amazonlogOut();
+                break;
+            case 'ITP':
+                // ITP errors are how handled within the widget code
+                break;
+            default:
+                messageList.addErrorMessage({message: $.mage.__(error.getErrorMessage())});
+        }
+    }
 
+    return {
         /**
          * Log user out of Amazon
          */
         AmazonLogout: amazonLogout,
         amazonDefined: amazonDefined,
         accessToken: accessToken,
-        amazonLoginError: amazonLoginError
+        amazonLoginError: amazonLoginError,
+        handleWidgetError: handleWidgetError
     };
 
 });

--- a/view/frontend/web/js/amazon-widgets-loader.js
+++ b/view/frontend/web/js/amazon-widgets-loader.js
@@ -13,15 +13,10 @@
  * permissions and limitations under the License.
  */
 
-var registry = require('uiRegistry');
-
-if (registry.get('amazonPayment') !== undefined) {
-
-    var amazonPayment = registry.get('amazonPayment');
-
-    define([amazonPayment.widgetUrl], function () {
-        'use strict';
-
-        //after amazon widgets file as loaded
+define(['uiRegistry'], function(registry) {
+    'use strict';
+    registry.get('amazonPayment', function (amazonPayment) {
+        // Load external Widgets.js
+        require([amazonPayment.widgetUrl]);
     });
-}
\ No newline at end of file
+});

--- a/view/frontend/web/js/model/storage.js
+++ b/view/frontend/web/js/model/storage.js
@@ -33,8 +33,6 @@ define(
             orderReference,
             addressConsentToken = amazonCore.accessToken,
             //eslint-disable-next-line no-use-before-define
-            isAmazonDefined = amazonCore.amazonDefined.subscribe(checkAmazonDefined),
-            //eslint-disable-next-line no-use-before-define
             amazonLoginError = amazonCore.amazonLoginError.subscribe(setAmazonLoggedOutIfLoginError),
             amazonDeclineCode = ko.observable(false),
             sandboxSimulationReference = ko.observable('default'),
@@ -50,25 +48,12 @@ define(
             }),
             isLoginRedirectPage = $('body').hasClass('amazon-login-login-processauthhash');
 
-        /**
-         * Subscribes to amazonDefined observable which runs when amazon object becomes available
-         * @param {String} amazonDefined
-         */
-        function checkAmazonDefined(amazonDefined) {
-            if (amazonDefined && !isLoginRedirectPage) {
-                verifyAmazonLoggedIn(); //eslint-disable-line no-use-before-define
-                //remove subscription to amazonDefined once loaded
-                isAmazonDefined.dispose();
-            }
-        }
 
         /**
          * Log out amazon user
          */
         function amazonLogOut() {
-            if (amazonCore.amazonDefined()) {
-                amazon.Login.logout(); // eslint-disable-line no-undef
-            }
+            amazonCore.AmazonLogout();
             this.isAmazonAccountLoggedIn(false);
         }
 
@@ -89,19 +74,14 @@ define(
             }
         });
 
-        //run this on loading storage model. If not defined subscribe will trigger when true
-        checkAmazonDefined(amazonCore.amazonDefined());
+        verifyAmazonLoggedIn();
         setAmazonLoggedOutIfLoginError(amazonCore.amazonLoginError());
 
         /**
          * Verifies amazon user is logged in
          */
         function verifyAmazonLoggedIn() {
-            amazonCore.verifyAmazonLoggedIn().then(function (response) {
-                if (!amazonCore.amazonLoginError()) {
-                    isAmazonAccountLoggedIn(response);
-                }
-            });
+            isAmazonAccountLoggedIn(!!amazonCore.accessToken());
         }
 
         return {
@@ -115,6 +95,7 @@ define(
             isQuoteDirty: isQuoteDirty,
             isPwaVisible: isPwaVisible,
             amazonlogOut: amazonLogOut,
+            amazonDefined: amazonCore.amazonDefined,
 
             /**
              * Set order reference

--- a/view/frontend/web/js/view/checkout-widget-address.js
+++ b/view/frontend/web/js/view/checkout-widget-address.js
@@ -11,6 +11,7 @@ define(
         'Magento_Checkout/js/model/shipping-rate-processor/new-address',
         'Magento_Checkout/js/action/set-shipping-information',
         'Amazon_Payment/js/model/storage',
+        'amazonCore',
         'Magento_Checkout/js/model/shipping-service',
         'Magento_Checkout/js/model/address-converter',
         'mage/storage',
@@ -31,6 +32,7 @@ define(
         shippingProcessor,
         setShippingInformationAction,
         amazonStorage,
+        amazonCore,
         shippingService,
         addressConverter,
         storage,
@@ -71,7 +73,16 @@ define(
              * Call when component template is rendered
              */
             initAddressWidget: function () {
-                self.renderAddressWidget();
+                if(amazonStorage.amazonDefined()) {
+                    self.renderAddressWidget();
+                } else {
+                    var subscription = amazonStorage.amazonDefined.subscribe(function (defined) { //eslint-disable-line vars-on-top
+                        if (defined) {
+                            self.renderAddressWidget();
+                            subscription.dispose();
+                        }
+                    });
+                }
             },
 
             /**
@@ -104,9 +115,7 @@ define(
                     /**
                      * Error callback
                      */
-                    onError: function (error) {
-                        console.log(error);
-                    }
+                    onError: amazonCore.handleWidgetError
                 }).bind(self.options.addressWidgetDOMId);
             },
 

--- a/view/frontend/web/js/view/payment/amazonlogin.js
+++ b/view/frontend/web/js/view/payment/amazonlogin.js
@@ -1,7 +1,7 @@
 define(
     [
         'uiComponent',
-        'Magento_Checkout/js/model/payment/renderer-list',
+        'Magento_Checkout/js/model/payment/renderer-list'
     ],
     function (
         Component,
@@ -14,10 +14,9 @@ define(
                 component: 'Amazon_Payment/js/view/payment/method-renderer/amazonlogin'
             }
         );
-        /**
-    * 
-    * Add view logic here if needed 
-    */
+
+    // Add view logic here if needed
+
         return Component.extend({});
     }
 );

--- a/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
+++ b/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
@@ -7,6 +7,7 @@ define(
         'Magento_Customer/js/customer-data',
         'Magento_Checkout/js/model/quote',
         'Amazon_Payment/js/model/storage',
+        'amazonCore',
         'mage/storage',
         'Magento_Checkout/js/model/full-screen-loader',
         'Amazon_Payment/js/action/place-order',
@@ -27,6 +28,7 @@ define(
         customerData,
         quote,
         amazonStorage,
+        amazonCore,
         storage,
         fullScreenLoader,
         placeOrderAction,
@@ -45,12 +47,11 @@ define(
 
         return Component.extend({
             defaults: {
-                template: 'Amazon_Payment/payment/amazon-payment-widget'
-            },
-            options: {
-                sellerId: registry.get('amazonPayment').merchantId,
+                template: 'Amazon_Payment/payment/amazon-payment-widget',
                 paymentWidgetDOMId: 'walletWidgetDiv',
-                widgetScope: registry.get('amazonPayment').loginScope
+                presentmentDOMId: 'tr.totals.charge',
+                apInputDOMId: '#amazon_payment',
+                customerEmail: '#customer-email'
             },
             isCustomerLoggedIn: customer.isLoggedIn,
             isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
@@ -70,20 +71,33 @@ define(
              * Init payment widget
              */
             initPaymentWidget: function () {
-                var $amazonPayment = $('#amazon_payment');
+                var $amazonPayment = $(this.apInputDOMId);
 
+                this.initDefaultValues();
                 this.renderPaymentWidget();
                 $amazonPayment.trigger('click'); //activate Amazon Pay method on render
                 $amazonPayment.trigger('rendered');
             },
 
+            /**
+             * Init potentially asynchronous values
+             */
+            initDefaultValues: function () {
+                registry.get('amazonPayment', function (amazonPayment) {
+                    this.widgetScope = amazonPayment.loginScope;
+                    this.sellerId = amazonPayment.merchantId;
+                    this.presentmentCurrency = amazonPayment.presentmentCurrency;
+                    this.useMultiCurrency = amazonPayment.useMultiCurrency;
+                }.bind(this));
+            },
+
             /**
              * render Amazon Pay Widget
              */
             renderPaymentWidget: function () {
-                new OffAmazonPayments.Widgets.Wallet({ // eslint-disable-line no-undef
-                    sellerId: this.options.sellerId,
-                    scope: this.options.widgetScope,
+                var widget = new OffAmazonPayments.Widgets.Wallet({ // eslint-disable-line no-undef
+                    sellerId: this.sellerId,
+                    scope: this.widgetScope,
                     amazonOrderReferenceId: amazonStorage.getOrderReference(),
 
                     /**
@@ -100,10 +114,16 @@ define(
                     /**
                      * Error callback
                      */
-                    onError: function (error) {
-                        errorProcessor.process(error);
-                    }
-                }).bind(this.options.paymentWidgetDOMId);
+                    onError: amazonCore.handleWidgetError
+                });
+                if (this.useMultiCurrency) {
+                    widget.setPresentmentCurrency(this.presentmentCurrency);
+                    $(this.presentmentDOMId).hide();
+                }
+                else {
+                    $(this.presentmentDOMId).show();
+                }
+                widget.bind(this.paymentWidgetDOMId);
             },
 
             /**
@@ -152,18 +172,19 @@ define(
                     JSON.stringify(payload)
                 ).done(
                     function (data) {
-                        var amazonAddress = data.shift(),
-                            addressData;
+                        var amazonAddress = data.shift(), addressData;
 
                         addressData = addressConverter.formAddressDataToQuoteAddress(amazonAddress);
                         addressData.telephone = !addressData.telephone ? '0000000000' : addressData.telephone;
 
                         selectBillingAddress(addressData);
                         amazonStorage.isPlaceOrderDisabled(false);
-                        if(window.checkoutConfig.amazonLogin.amazon_customer_email) {
-                            var customerField = $('#customer-email').val();
+
+                        if (window.checkoutConfig.amazonLogin.amazon_customer_email) {
+                            var customerField = $(this.customerEmail).val();
+
                             if (!customerField) {
-                                $('#customer-email').val(window.checkoutConfig.amazonLogin.amazon_customer_email);
+                                $(this.customerEmail).val(window.checkoutConfig.amazonLogin.amazon_customer_email);
                             }
                         }
                     }

--- a/view/frontend/web/js/view/payment/method-renderer/amazonlogin.js
+++ b/view/frontend/web/js/view/payment/method-renderer/amazonlogin.js
@@ -1,43 +1,28 @@
 define(
     [
-        'jquery',
         'Magento_Checkout/js/view/payment/default',
-        'ko',
         'Amazon_Payment/js/model/storage',
-        'mage/storage',
-        'amazonPaymentConfig',
-        'uiRegistry',
-        'Amazon_Login/js/view/login-button',
     ],
-    function ($,
+    function (
         Component,
-        ko,
-        amazonStorage,
-        storage,
-        amazonPaymentConfig,
-        registry,
-        loginButton,
+        amazonStorage
     ) {
         'use strict';
 
-        var self;
-
         return Component.extend(
             {
                 defaults: {
                     template: 'Amazon_Payment/payment/amazonlogin'
                 },
-
                 getCode: function () {
                     return 'amazonlogin';
                 },
                 isActive: function () {
                     return true;
                 },
-
                 isPwaVisible: function () {
                     return amazonStorage.isPwaVisible && amazonStorage.isAmazonEnabled;
-                },
+                }
             }
         );
     }

