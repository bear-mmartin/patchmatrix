--- a/Controller/Payment/CompleteCheckout.php
+++ b/Controller/Payment/CompleteCheckout.php
@@ -142,24 +142,24 @@ class CompleteCheckout extends Action
             }
 
             $quote = $this->checkoutSession->getQuote();
-            if(!$quote) {
+            if (!$quote) {
                 throw new NotFoundException(__('Failed to retrieve quote from checkoutSession'));
             }
             $orderReferenceId = $quote
                 ->getExtensionAttributes()
                 ->getAmazonOrderReferenceId()
                 ->getAmazonOrderReferenceId();
-            if($orderReferenceId) {
+            if ($orderReferenceId) {
                 // Cancel the order to prevent confusion when the merchant views Transactions in Seller Central
                 try {
                     $this->orderInformationManagement->cancelOrderReference($orderReferenceId, $quote->getStoreId());
-                } catch(AmazonServiceUnavailableException $e) {
+                } catch (AmazonServiceUnavailableException $e) {
                     $this->exceptionLogger->logException($e);
                 }
             }
 
             return $this->_redirect('checkout/cart');
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }

--- a/Gateway/Command/AmazonAuthCommand.php
+++ b/Gateway/Command/AmazonAuthCommand.php
@@ -154,7 +154,7 @@ class AmazonAuthCommand implements CommandInterface
                     $response
                 );
             }
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }

--- a/Gateway/Command/CaptureStrategyCommand.php
+++ b/Gateway/Command/CaptureStrategyCommand.php
@@ -133,7 +133,7 @@ class CaptureStrategyCommand implements CommandInterface
                     $this->commandPool->get($command)->execute($commandSubject);
                 }
             }
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }

--- a/Plugin/ConfirmOrderReference.php
+++ b/Plugin/ConfirmOrderReference.php
@@ -29,7 +29,6 @@ use Magento\Framework\Exception\LocalizedException;
 use Amazon\Payment\Gateway\Config\Config as GatewayConfig;
 use Magento\Quote\Api\CartRepositoryInterface;
 
-
 /**
  * Class ConfirmOrderReference
  *
@@ -83,7 +82,7 @@ class ConfirmOrderReference
         $cartId,
         PaymentInterface $paymentMethod
     ) {
-        if($paymentMethod->getMethod() == GatewayConfig::CODE) {
+        if ($paymentMethod->getMethod() == GatewayConfig::CODE) {
             $quote = $this->quoteRepository->get($cartId);
             $quoteExtensionAttributes = $quote->getExtensionAttributes();
             if ($quoteExtensionAttributes) {

--- a/Plugin/ShippingInformationManagement.php
+++ b/Plugin/ShippingInformationManagement.php
@@ -100,7 +100,7 @@ class ShippingInformationManagement
          *  the region_id is explicitly emptied, to prevent the old one being used.
          */
         $shippingAddress = $shippingInformation->getShippingAddress();
-        if(!$shippingAddress->hasData('region_id')) {
+        if (!$shippingAddress->hasData('region_id')) {
             $shippingAddress->setRegionId("");
         }
 

--- a/composer.json
+++ b/composer.json
@@ -2,14 +2,14 @@
   "name": "amzn/amazon-pay-module",
   "description": "Amazon Pay module",
   "type": "magento2-module",
-  "version": "3.3.0",
+  "version": "3.3.1",
   "license": [
     "Apache-2.0"
   ],
   "require": {
     "php": "~7.1.3||~7.2.0||~7.3.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.3.0",
-    "amzn/login-with-amazon-module": "^3.3.0",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.3.1",
+    "amzn/login-with-amazon-module": "^3.3.1",
     "magento/framework": "^102",
     "magento/module-customer": "^102",
     "magento/module-eav": "^102",

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Payment" setup_version="3.3.0" >
+    <module name="Amazon_Payment" setup_version="3.3.1" >
         <sequence>
             <module name="Amazon_Core"/>
             <module name="Amazon_Login"/>

--- a/view/frontend/web/css/source/_module.less
+++ b/view/frontend/web/css/source/_module.less
@@ -62,6 +62,7 @@
 
     .revert-checkout {
         margin-top: 20px;
+        margin-bottom: 20px;
         display: block;
     }
 

--- a/view/frontend/web/js/model/storage.js
+++ b/view/frontend/web/js/model/storage.js
@@ -46,7 +46,19 @@ define(
             isAmazonCartInValid = ko.computed(function () {
                 return isAmazonAccountLoggedIn() && isQuoteDirty();
             }),
-            isLoginRedirectPage = $('body').hasClass('amazon-login-login-processauthhash');
+            isLoginRedirectPage = $('body').hasClass('amazon-login-login-processauthhash'),
+            amazonCustomerEmail = ko.computed(function () {
+                // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
+                if (window.checkoutConfig &&
+                    window.checkoutConfig.hasOwnProperty('amazonLogin') &&
+                    typeof window.checkoutConfig.amazonLogin.amazon_customer_email === 'string'
+                ) {
+                    return window.checkoutConfig.amazonLogin.amazon_customer_email;
+                }
+                // jscs:enable requireCamelCaseOrUpperCaseIdentifiers
+                return '';
+            });
+
 
 
         /**
@@ -96,6 +108,7 @@ define(
             isPwaVisible: isPwaVisible,
             amazonlogOut: amazonLogOut,
             amazonDefined: amazonCore.amazonDefined,
+            amazonCustomerEmail: amazonCustomerEmail,
 
             /**
              * Set order reference

--- a/view/frontend/web/js/view/checkout-revert.js
+++ b/view/frontend/web/js/view/checkout-revert.js
@@ -52,7 +52,7 @@ define(
                 ).done(
                     function () {
                         amazonStorage.amazonlogOut();
-                        window.location.reload();
+                        fullScreenLoader.stopLoader();
                     }
                 ).fail(
                     function (response) {

--- a/view/frontend/web/js/view/checkout-widget-address.js
+++ b/view/frontend/web/js/view/checkout-widget-address.js
@@ -57,6 +57,7 @@ define(
                 widgetScope: registry.get('amazonPayment').loginScope
             },
             isCustomerLoggedIn: customer.isLoggedIn,
+            amazonCustomerEmail: amazonStorage.amazonCustomerEmail,
             isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
             isAmazonEnabled: ko.observable(registry.get('amazonPayment').isPwaEnabled),
             rates: shippingService.getShippingRates(),

--- a/view/frontend/web/js/view/shipping-address/inline-form.js
+++ b/view/frontend/web/js/view/shipping-address/inline-form.js
@@ -8,7 +8,8 @@ define([
     return Component.extend({
         defaults: {
             template: 'Amazon_Payment/shipping-address/inline-form',
-            formSelector: 'co-shipping-form'
+            formSelector: 'co-shipping-form',
+            accountFormSelector: 'customer-email-fieldset'
         },
 
         /**
@@ -31,10 +32,14 @@ define([
          * Show/hide inline form
          */
         hideInlineForm: function(hide) {
-            var elem = document.getElementById(this.formSelector);
+            var shippingForm = document.getElementById(this.formSelector);
+            var accountForm = document.getElementById(this.accountFormSelector);
 
-            if (elem) {
-                document.getElementById(this.formSelector).style.display = hide ? 'none' : 'block';
+            if (shippingForm) {
+                shippingForm.style.display = hide ? 'none' : 'block';
+            }
+            if (accountForm) {
+                accountForm.parentElement.style.display = hide ? 'none' : 'block';
             }
         }
     });

--- a/view/frontend/web/template/checkout-widget-address.html
+++ b/view/frontend/web/template/checkout-widget-address.html
@@ -20,6 +20,10 @@
 <!--/ko-->
 
 <!-- ko if: (isAmazonAccountLoggedIn) -->
+    <label class="label" for="amazon-email-address">
+        <span data-bind="i18n: 'Email Address:'"></span>
+    </label>
+    <span id="amazon-email-address" data-bind="text: amazonCustomerEmail" />
     <div class="amazon-widget-container">
         <div id="addressBookWidgetDiv" class="amazon-widget amazon-widget--address" data-bind="afterRender: initAddressWidget"></div>
     </div>

