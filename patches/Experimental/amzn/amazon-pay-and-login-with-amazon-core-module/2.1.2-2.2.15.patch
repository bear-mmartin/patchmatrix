--- a/Block/Adminhtml/Form/Field/IpnUrl.php
+++ b/Block/Adminhtml/Form/Field/IpnUrl.php
@@ -32,21 +32,16 @@ class IpnUrl extends BaseField
     {
         $stores = $this->_storeManager->getStores();
         $valueReturn = '';
-        $urlArray = [];
 
-        foreach ($stores as $store) {
+        if ($store = reset($stores))
+        {
             $baseUrl = $store->getBaseUrl(UrlInterface::URL_TYPE_WEB, true);
             if ($baseUrl) {
-                $value      = $baseUrl . 'amazonpayments/payment/ipn/';
-                $urlArray[] = "<div>".$this->escapeHtml($value)."</div>";
+                $value       = $baseUrl . 'amazonpayments/payment/ipn/';
+                $valueReturn = "<div>".$this->escapeHtml($value)."</div>";
             }
         }
 
-        $urlArray = array_unique($urlArray);
-        foreach ($urlArray as $uniqueUrl) {
-            $valueReturn .= "<div>".$uniqueUrl."</div>";
-        }
-
         return '<td class="value">' . $valueReturn . '</td>';
     }
 

--- a/Controller/Adminhtml/Simplepath/Poll.php
+++ b/Controller/Adminhtml/Simplepath/Poll.php
@@ -17,6 +17,8 @@ namespace Amazon\Core\Controller\Adminhtml\Simplepath;
 
 use Magento\Backend\App\Action\Context;
 use Magento\Backend\Controller\Adminhtml\System;
+use Magento\Framework\App\ObjectManager;
+use Amazon\Core\Logger\ExceptionLogger;
 
 class Poll extends System
 {
@@ -36,16 +38,23 @@ class Poll extends System
      */
     private $jsonResultFactory;
 
+    /**
+     * @var \Amazon\Core\Logger\ExceptionLogger
+     */
+    private $exceptionLogger;
+
     public function __construct(
         Context $context,
         \Amazon\Core\Model\Config\SimplePath $simplePath,
         \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
-        \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory
+        \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory,
+        \Amazon\Core\Logger\ExceptionLogger $exceptionLogger = null
     ) {
         parent::__construct($context);
         $this->simplePath = $simplePath;
         $this->scopeConfig = $scopeConfig;
         $this->jsonResultFactory = $jsonResultFactory;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
     }
 
     /**
@@ -53,19 +62,24 @@ class Poll extends System
      */
     public function execute()
     {
-        // Keypair is destroyed when credentials are saved
-        $shouldRefresh = !($this->scopeConfig->getValue(
-            \Amazon\Core\Model\Config\SimplePath::CONFIG_XML_PATH_PUBLIC_KEY,
-            'default',
-            0
-        ));
+        try {
+            // Keypair is destroyed when credentials are saved
+            $shouldRefresh = !($this->scopeConfig->getValue(
+                \Amazon\Core\Model\Config\SimplePath::CONFIG_XML_PATH_PUBLIC_KEY,
+                'default',
+                0
+            ));
 
-        if ($shouldRefresh) {
-            $this->simplePath->autoEnable();
-        }
+            if ($shouldRefresh) {
+                $this->simplePath->autoEnable();
+            }
 
-        $result = $this->jsonResultFactory->create();
-        $result->setData((int)$shouldRefresh);
-        return $result;
+            $result = $this->jsonResultFactory->create();
+            $result->setData((int)$shouldRefresh);
+            return $result;
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 }

--- a/Controller/Simplepath/Listener.php
+++ b/Controller/Simplepath/Listener.php
@@ -16,6 +16,9 @@
 
 namespace Amazon\Core\Controller\Simplepath;
 
+use Amazon\Core\Logger\ExceptionLogger;
+use Magento\Framework\App\ObjectManager;
+
 /**
  * Class Listener
  * Retrieves entered keys from Amazon Pay popup
@@ -29,23 +32,28 @@ class Listener extends \Magento\Framework\App\Action\Action
     // @var \Amazon\Core\Model\Config\SimplePath
     private $simplepath;
 
+    // @var \Amazon\Core\Logger\ExceptionLogger
+    private $exceptionLogger;
+
     /**
      * Listener constructor.
      * @param \Magento\Framework\App\Action\Context $context
      * @param \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory
      * @param \Amazon\Core\Model\Config\SimplePath $simplepath
      * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
+     * @param \Amazon\Core\Logger\ExceptionLogger $exceptionLogger
      */
     public function __construct(
         \Magento\Framework\App\Action\Context $context,
         \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory,
         \Amazon\Core\Model\Config\SimplePath $simplepath,
-        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
-    )
-    {
+        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
+        ExceptionLogger $exceptionLogger = null
+    ) {
         $this->simplepath = $simplepath;
         $this->jsonResultFactory = $jsonResultFactory;
         $this->scopeConfig = $scopeConfig;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
         parent::__construct($context);
     }
 
@@ -54,41 +62,48 @@ class Listener extends \Magento\Framework\App\Action\Action
      */
     public function execute()
     {
-        $url = parse_url($this->simplepath->getEndpointRegister());
-        $host = trim(preg_replace("/\r|\n/", "", $url['host']));
-        $this->getResponse()->setHeader('Access-Control-Allow-Origin', 'https://' . $host);
-        $this->getResponse()->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
-        $this->getResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, X-CSRF-Token');
+        try {
+            $host = parse_url($this->getRequest()->getHeader('Origin'))['host'];
+            if(in_array($host, $this->simplepath->getListenerOrigins())) {
+                $this->getResponse()->setHeader('Access-Control-Allow-Origin', 'https://' . $host);
+            }
+            $this->getResponse()->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
+            $this->getResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, X-CSRF-Token');
+            $this->getResponse()->setHeader('Vary', 'Origin');
 
-        $payload = $this->_request->getParam('payload');
+            $payload = $this->_request->getParam('payload');
 
-        $result = $this->jsonResultFactory->create();
+            $result = $this->jsonResultFactory->create();
 
-        $return = ['result' => 'error', 'message' => 'Empty payload'];
+            $return = ['result' => 'error', 'message' => 'Empty payload'];
 
-        try {
-            if (strpos($payload, 'encryptedKey') === false) {
-                $return = ['result' => 'error', 'message' => 'Invalid payload: ' . $payload];
-            } else if ($payload) {
-                $json = $this->simplepath->decryptPayload($payload, false);
+            try {
+                if (strpos($payload, 'encryptedKey') === false) {
+                    $return = ['result' => 'error', 'message' => 'Invalid payload: ' . $payload];
+                } else if ($payload) {
+                    $json = $this->simplepath->decryptPayload($payload, false);
 
-                if ($json) {
-                    $return = ['result' => 'success'];
+                    if ($json) {
+                        $return = ['result' => 'success'];
+                    }
+                } else {
+                    $return = ['result' => 'error', 'message' => 'payload parameter not found.'];
                 }
-            } else {
-                $return = ['result' => 'error', 'message' => 'payload parameter not found.'];
+            } catch (\Exception $e) {
+                $return = ['result' => 'error', 'message' => $e->getMessage()];
             }
-        } catch (\Exception $e) {
-            $return = ['result' => 'error', 'message' => $e->getMessage()];
-        }
 
-        if ($this->_request->isPost() && (empty($return['result']) || $return['result'] == 'error')) {
-            $result->setHttpResponseCode(\Magento\Framework\Webapi\Exception::HTTP_BAD_REQUEST);
-        }
+            if ($this->_request->isPost() && (empty($return['result']) || $return['result'] == 'error')) {
+                $result->setHttpResponseCode(\Magento\Framework\Webapi\Exception::HTTP_BAD_REQUEST);
+            }
 
-        $result->setData($return);
+            $result->setData($return);
 
-        return $result;
+            return $result;
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 
     /**

--- a/Domain/AmazonAddressDecoratorDe.php
+++ b/Domain/AmazonAddressDecoratorDe.php
@@ -178,6 +178,6 @@ class AmazonAddressDecoratorDe implements AmazonAddressInterface
      */
     public function getLine($lineNumber)
     {
-        $this->amazonAddress->getLine($lineNumber);
+        return $this->amazonAddress->getLine($lineNumber);
     }
 }

--- a/Domain/AmazonAddressDecoratorJp.php
+++ b/Domain/AmazonAddressDecoratorJp.php
@@ -37,20 +37,13 @@ class AmazonAddressDecoratorJp implements AmazonAddressInterface
      */
     public function getLines()
     {
-        $line1 = (string) $this->amazonAddress->getLine(1);
-        $line2 = (string) $this->amazonAddress->getLine(2);
-        $line3 = (string) $this->amazonAddress->getLine(3);
-        $city = (string) $this->amazonAddress->getCity();
+        $city = $this->amazonAddress->getCity();
 
-        $lines = [];
-        if (empty($city)) {
-            $lines[] = trim($line1 . ' ' . $line2);
-        } else {
-            $lines[] = $line2;
-        }
-        $lines[] = $line3;
-
-        return $lines;
+        /*
+         * AmazonAddressDecoratorJp->getCity() returns address line 1 when city is empty.
+         * Omit line 1 from the street address in this case.
+         */
+        return array_slice($this->amazonAddress->getLines(), empty($city) ? 1 : 0);
     }
 
     /**
@@ -122,6 +115,10 @@ class AmazonAddressDecoratorJp implements AmazonAddressInterface
      */
     public function getLine($lineNumber)
     {
-        $this->amazonAddress->getLine($lineNumber);
+        $lines = $this->getLines();
+        if (isset($lines[$lineNumber-1])) {
+            return $lines[$lineNumber-1];
+        }
+        return null;
     }
 }

--- a/Domain/AmazonAddressFactory.php
+++ b/Domain/AmazonAddressFactory.php
@@ -23,10 +23,6 @@ use Magento\Framework\Escaper;
 
 class AmazonAddressFactory
 {
-    /**
-     * @var Escaper
-     */
-    private $escaper;
 
     /**
      * @var ObjectManagerInterface
@@ -48,7 +44,6 @@ class AmazonAddressFactory
      *
      * @param ObjectManagerInterface $objectManager
      * @param AmazonNameFactory $amazonNameFactory
-     * @param Escaper $escaper
      * @param array $addressDecoratorPool Per-country custom decorators of incoming address data.
      *                                         The key as an "ISO 3166-1 alpha-2" country code and
      *                                         the value as an FQCN of a child of AmazonAddress.
@@ -56,12 +51,10 @@ class AmazonAddressFactory
     public function __construct(
         ObjectManagerInterface $objectManager,
         AmazonNameFactory $amazonNameFactory,
-        Escaper $escaper,
         array $addressDecoratorPool = []
     ) {
         $this->objectManager = $objectManager;
         $this->amazonNameFactory = $amazonNameFactory;
-        $this->escaper = $escaper;
         $this->addressDecoratorPool = $addressDecoratorPool;
     }
 
@@ -76,21 +69,24 @@ class AmazonAddressFactory
         $address = $responseData['address'];
         $amazonName = $this->amazonNameFactory->create(
             [
-                'name' => $this->escaper->escapeHtml($address['Name']),
-                'country' => $this->escaper->escapeHtml($address['CountryCode'])]
+                'name' => $address['Name'],
+                'country' => $address['CountryCode']]
         );
 
         $data = [
-            AmazonAddressInterface::CITY => isset($address['City']) ? $this->escaper->escapeHtml($address['City']) : '',
-            AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $this->escaper->escapeHtml($address['PostalCode']) : '',
-            AmazonAddressInterface::COUNTRY_CODE => $this->escaper->escapeHtml($address['CountryCode']),
-            AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $this->escaper->escapeHtml($address['Phone']) : '',
-            AmazonAddressInterface::STATE_OR_REGION => isset($address['StateOrRegion']) ? $this->escaper->escapeHtml($address['StateOrRegion']) : '',
-            AmazonAddressInterface::FIRST_NAME => $this->escaper->escapeHtml($amazonName->getFirstName()),
-            AmazonAddressInterface::LAST_NAME => $this->escaper->escapeHtml($amazonName->getLastName()),
+            AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $address['PostalCode'] : '',
+            AmazonAddressInterface::COUNTRY_CODE => $address['CountryCode'],
+            AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $address['Phone'] : '',
+            AmazonAddressInterface::STATE_OR_REGION => isset($address['StateOrRegion']) ? $address['StateOrRegion'] : '',
+            AmazonAddressInterface::FIRST_NAME => $amazonName->getFirstName(),
+            AmazonAddressInterface::LAST_NAME => $amazonName->getLastName(),
             AmazonAddressInterface::LINES => $this->getLines($address)
         ];
 
+        if (isset($address['City'])) {
+            $data[AmazonAddressInterface::CITY] = $address['City'];
+        }
+
         $amazonAddress = $this->objectManager->create(AmazonAddress::class, ['data' => $data]);
 
         $countryCode = strtoupper($address['CountryCode']);
@@ -128,7 +124,7 @@ class AmazonAddressFactory
         $lines = [];
         for ($i = 1; $i <= 3; $i++) {
             if (isset($responseData['AddressLine' . $i]) && $responseData['AddressLine' . $i]) {
-                $lines[$i] = $this->escaper->escapeHtml($responseData['AddressLine' . $i]);
+                $lines[$i] = $responseData['AddressLine' . $i];
             }
         }
 

--- a/Exception/AmazonServiceUnavailableException.php
+++ b/Exception/AmazonServiceUnavailableException.php
@@ -15,9 +15,9 @@
  */
 namespace Amazon\Core\Exception;
 
-use Magento\Framework\Exception\RemoteServiceUnavailableException;
+use Magento\Framework\Exception\LocalizedException;
 
-class AmazonServiceUnavailableException extends RemoteServiceUnavailableException
+class AmazonServiceUnavailableException extends LocalizedException
 {
     const ERROR_MESSAGE = 'Amazon could not process your request.';
 

--- a/Helper/Data.php
+++ b/Helper/Data.php
@@ -23,6 +23,8 @@ use Magento\Store\Model\ScopeInterface;
 use Magento\Store\Model\StoreManagerInterface;
 use Magento\Framework\Module\ModuleListInterface;
 use Magento\Framework\Module\StatusFactory;
+use Magento\Framework\App\Cache\TypeListInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * @SuppressWarnings(PHPMD.ExcessivePublicCount)
@@ -57,6 +59,11 @@ class Data extends AbstractHelper
      */
     private $moduleStatusFactory;
 
+    /**
+     * @var TypeListInterface
+     */
+    private $cacheTypeList;
+
     /**
      * Data constructor.
      *
@@ -66,6 +73,7 @@ class Data extends AbstractHelper
      * @param StoreManagerInterface $storeManager
      * @param ClientIp $clientIpHelper
      * @param StatusFactory $moduleStatusFactory
+     * @param TypeListInterface $cacheTypeList
      */
     public function __construct(
         ModuleListInterface $moduleList,
@@ -73,7 +81,8 @@ class Data extends AbstractHelper
         EncryptorInterface $encryptor,
         StoreManagerInterface $storeManager,
         ClientIp $clientIpHelper,
-        StatusFactory $moduleStatusFactory
+        StatusFactory $moduleStatusFactory,
+        TypeListInterface $cacheTypeList = null
     )
     {
         parent::__construct($context);
@@ -82,6 +91,7 @@ class Data extends AbstractHelper
         $this->storeManager = $storeManager;
         $this->clientIpHelper = $clientIpHelper;
         $this->moduleStatusFactory = $moduleStatusFactory;
+        $this->cacheTypeList = $cacheTypeList ?: ObjectManager::getInstance()->get(TypeListInterface::class);
     }
 
     /*
@@ -777,6 +787,7 @@ class Data extends AbstractHelper
         // Make sure all of them are disabled if any one of them is disabled.
         if ($isDisabled > 0 && $isDisabled != 3) {
             $this->moduleStatusFactory->create()->setIsEnabled(false, ['Amazon_Payment', 'Amazon_Login', 'Amazon_Core']);
+            $this->cacheTypeList->cleanType('config');
         }
     }
 }

--- /dev/null
+++ b/Logger/ExceptionLogger.php
@@ -0,0 +1,31 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Core\Logger;
+
+use Psr\Log\LoggerInterface;
+
+class ExceptionLogger
+{
+    private $logger;
+
+    public function __construct(LoggerInterface $logger) {
+        $this->logger = $logger;
+    }
+    public function logException(\Exception $e) {
+        $message = (string) $e;
+        $this->logger->addError($message);
+    }
+}

--- a/Model/Config/SimplePath.php
+++ b/Model/Config/SimplePath.php
@@ -166,6 +166,19 @@ class SimplePath
         return $this->getEndpointDomain() . 'register/getpublickey';
     }
 
+    /**
+     * Return listener origins
+     */
+    public function getListenerOrigins()
+    {
+        return [
+            'payments.amazon.com',
+            'payments-eu.amazon.com',
+            'sellercentral.amazon.com',
+            'sellercentral-europe.amazon.com'
+        ];
+    }
+
     /**
      * Generate and save RSA keys
      */

--- a/Observer/PaymentConfigSaveAfter.php
+++ b/Observer/PaymentConfigSaveAfter.php
@@ -60,11 +60,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      */
     private $request;
 
-    /**
-     * @var WriterInterface
-     */
-    private $configWriter;
-
     /**
      * PaymentConfigSaveAfter constructor.
      *
@@ -74,7 +69,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      * @param Data $amazonCoreHelper
      * @param ReinitableConfigInterface $config
      * @param RequestInterface $request
-     * @param WriterInterface $configWriter
      */
     public function __construct(
         ApiCredentialsValidatorFactory $apiCredentialsValidatorFactory,
@@ -82,8 +76,7 @@ class PaymentConfigSaveAfter implements ObserverInterface
         Json $jsonCredentials,
         Data $amazonCoreHelper,
         ReinitableConfigInterface $config,
-        RequestInterface $request,
-        WriterInterface $configWriter
+        RequestInterface $request
     ) {
         $this->apiCredentialsValidatorFactory = $apiCredentialsValidatorFactory;
         $this->messageManager                 = $messageManager;
@@ -91,7 +84,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
         $this->jsonCredentials                = $jsonCredentials;
         $this->appConfig                      = $config;
         $this->request                        = $request;
-        $this->configWriter                   = $configWriter;
     }
 
     /**
@@ -99,9 +91,6 @@ class PaymentConfigSaveAfter implements ObserverInterface
      */
     public function execute(Observer $observer)
     {
-        // Make sure address captures 3 lines to be compatible with AP
-        $this->configWriter->save('customer/address/street_lines', 3);
-
         if (!$this->request->getParam('amazon_test_creds')) {
             return;
         }

--- a/composer.json
+++ b/composer.json
@@ -2,7 +2,7 @@
   "name": "amzn/amazon-pay-and-login-with-amazon-core-module",
   "description": "Shared functionality for Amazon Pay and Login with Amazon modules",
   "type": "magento2-module",
-  "version": "2.1.2",
+  "version": "2.2.15",
   "license": [
     "Apache-2.0"
   ],

--- a/etc/config.xml
+++ b/etc/config.xml
@@ -33,5 +33,10 @@
                 <jp>https://static-fe.payments-amazon.com/OffAmazonPayments/jp/sandbox/lpa/js/Widgets.js?nomin</jp>
             </sandbox>
         </widget>
+        <customer>
+            <address>
+                <street_lines>3</street_lines>
+            </address>
+        </customer>
     </default>
 </config>

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Core" setup_version="2.1.2">
+    <module name="Amazon_Core" setup_version="2.2.15">
         <sequence>
             <module name="Magento_Store"/>
             <module name="Magento_Customer"/>

--- a/view/adminhtml/templates/system/config/simplepath_admin.phtml
+++ b/view/adminhtml/templates/system/config/simplepath_admin.phtml
@@ -17,7 +17,7 @@
 -->
 <br/>
 <div data-mage-init='{
-        "Amazon_Core/js/simplepath": <?php echo /* @noEscape */ $block->getJsonConfig() ?> }'
+        "Amazon_Core/js/simplepath": <?php echo $block->escapeHtml($block->getJsonConfig()) ?> }'
     id="amazon_simplepath">
 
     <?php if (!$block->getCurrency()) : // SimplePath not supported ?>

