--- a/Block/Adminhtml/Form/Field/IpnUrl.php
+++ b/Block/Adminhtml/Form/Field/IpnUrl.php
@@ -30,21 +30,13 @@ class IpnUrl extends BaseField
      */
     protected function _renderValue(AbstractElement $element)
     {
-        $stores = $this->_storeManager->getStores();
+        $store = $this->_storeManager->getDefaultStoreView();
         $valueReturn = '';
-        $urlArray = [];
 
-        foreach ($stores as $store) {
-            $baseUrl = $store->getBaseUrl(UrlInterface::URL_TYPE_WEB, true);
-            if ($baseUrl) {
-                $value      = $baseUrl . 'amazonpayments/payment/ipn/';
-                $urlArray[] = "<div>".$this->escapeHtml($value)."</div>";
-            }
-        }
-
-        $urlArray = array_unique($urlArray);
-        foreach ($urlArray as $uniqueUrl) {
-            $valueReturn .= "<div>".$uniqueUrl."</div>";
+        $baseUrl = $store->getBaseUrl(UrlInterface::URL_TYPE_WEB, true);
+        if ($baseUrl) {
+            $value       = $baseUrl . 'amazonpayments/payment/ipn/';
+            $valueReturn = "<div>".$this->escapeHtml($value)."</div>";
         }
 
         return '<td class="value">' . $valueReturn . '</td>';

--- a/Controller/Adminhtml/Simplepath/Poll.php
+++ b/Controller/Adminhtml/Simplepath/Poll.php
@@ -17,6 +17,8 @@ namespace Amazon\Core\Controller\Adminhtml\Simplepath;
 
 use Magento\Backend\App\Action\Context;
 use Magento\Backend\Controller\Adminhtml\System;
+use Magento\Framework\App\ObjectManager;
+use Amazon\Core\Logger\ExceptionLogger;
 
 class Poll extends System
 {
@@ -36,16 +38,23 @@ class Poll extends System
      */
     private $jsonResultFactory;
 
+    /**
+     * @var \Amazon\Core\Logger\ExceptionLogger
+     */
+    private $exceptionLogger;
+
     public function __construct(
         Context $context,
         \Amazon\Core\Model\Config\SimplePath $simplePath,
         \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
-        \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory
+        \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory,
+        \Amazon\Core\Logger\ExceptionLogger $exceptionLogger = null
     ) {
         parent::__construct($context);
         $this->simplePath = $simplePath;
         $this->scopeConfig = $scopeConfig;
         $this->jsonResultFactory = $jsonResultFactory;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
     }
 
     /**
@@ -53,19 +62,24 @@ class Poll extends System
      */
     public function execute()
     {
-        // Keypair is destroyed when credentials are saved
-        $shouldRefresh = !($this->scopeConfig->getValue(
-            \Amazon\Core\Model\Config\SimplePath::CONFIG_XML_PATH_PUBLIC_KEY,
-            'default',
-            0
-        ));
+        try {
+            // Keypair is destroyed when credentials are saved
+            $shouldRefresh = !($this->scopeConfig->getValue(
+                \Amazon\Core\Model\Config\SimplePath::CONFIG_XML_PATH_PUBLIC_KEY,
+                'default',
+                0
+            ));
 
-        if ($shouldRefresh) {
-            $this->simplePath->autoEnable();
-        }
+            if ($shouldRefresh) {
+                $this->simplePath->autoEnable();
+            }
 
-        $result = $this->jsonResultFactory->create();
-        $result->setData((int)$shouldRefresh);
-        return $result;
+            $result = $this->jsonResultFactory->create();
+            $result->setData((int)$shouldRefresh);
+            return $result;
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 }

--- a/Controller/Simplepath/Listener.php
+++ b/Controller/Simplepath/Listener.php
@@ -16,9 +16,11 @@
 
 namespace Amazon\Core\Controller\Simplepath;
 
+use Amazon\Core\Logger\ExceptionLogger;
 use Magento\Framework\App\CsrfAwareActionInterface;
 use Magento\Framework\App\Request\InvalidRequestException;
 use Magento\Framework\App\RequestInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * Class Listener
@@ -33,22 +35,28 @@ class Listener extends \Magento\Framework\App\Action\Action implements CsrfAware
     // @var \Amazon\Core\Model\Config\SimplePath
     private $simplepath;
 
+    // @var \Amazon\Core\Logger\ExceptionLogger
+    private $exceptionLogger;
+
     /**
      * Listener constructor.
      * @param \Magento\Framework\App\Action\Context $context
      * @param \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory
      * @param \Amazon\Core\Model\Config\SimplePath $simplepath
      * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
+     * @param \Amazon\Core\Logger\ExceptionLogger $exceptionLogger
      */
     public function __construct(
         \Magento\Framework\App\Action\Context $context,
         \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory,
         \Amazon\Core\Model\Config\SimplePath $simplepath,
-        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
+        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
+        ExceptionLogger $exceptionLogger = null
     ) {
         $this->simplepath = $simplepath;
         $this->jsonResultFactory = $jsonResultFactory;
         $this->scopeConfig = $scopeConfig;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
         parent::__construct($context);
     }
 
@@ -57,43 +65,48 @@ class Listener extends \Magento\Framework\App\Action\Action implements CsrfAware
      */
     public function execute()
     {
-        $host = parse_url($this->getRequest()->getHeader('Origin'))['host'];
-        if(in_array($host, $this->simplepath->getListenerOrigins())) {
-            $this->getResponse()->setHeader('Access-Control-Allow-Origin', 'https://' . $host);
-        }
-        $this->getResponse()->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
-        $this->getResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, X-CSRF-Token');
-        $this->getResponse()->setHeader('Vary', 'Origin');
+        try {
+            $host = parse_url($this->getRequest()->getHeader('Origin'))['host'];
+            if (in_array($host, $this->simplepath->getListenerOrigins())) {
+                $this->getResponse()->setHeader('Access-Control-Allow-Origin', 'https://' . $host);
+            }
+            $this->getResponse()->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
+            $this->getResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, X-CSRF-Token');
+            $this->getResponse()->setHeader('Vary', 'Origin');
 
-        $payload = $this->_request->getParam('payload');
+            $payload = $this->_request->getParam('payload');
 
-        $result = $this->jsonResultFactory->create();
+            $result = $this->jsonResultFactory->create();
 
-        $return = ['result' => 'error', 'message' => 'Empty payload'];
+            $return = ['result' => 'error', 'message' => 'Empty payload'];
 
-        try {
-            if (strpos($payload, 'encryptedKey') === false) {
-                $return = ['result' => 'error', 'message' => 'Invalid payload: ' . $payload];
-            } elseif ($payload) {
-                $json = $this->simplepath->decryptPayload($payload, false);
+            try {
+                if (strpos($payload, 'encryptedKey') === false) {
+                    $return = ['result' => 'error', 'message' => 'Invalid payload: ' . $payload];
+                } elseif ($payload) {
+                    $json = $this->simplepath->decryptPayload($payload, false);
 
-                if ($json) {
-                    $return = ['result' => 'success'];
+                    if ($json) {
+                        $return = ['result' => 'success'];
+                    }
+                } else {
+                    $return = ['result' => 'error', 'message' => 'payload parameter not found.'];
                 }
-            } else {
-                $return = ['result' => 'error', 'message' => 'payload parameter not found.'];
+            } catch (\Exception $e) {
+                $return = ['result' => 'error', 'message' => $e->getMessage()];
             }
-        } catch (\Exception $e) {
-            $return = ['result' => 'error', 'message' => $e->getMessage()];
-        }
 
-        if ($this->_request->isPost() && (empty($return['result']) || $return['result'] == 'error')) {
-            $result->setHttpResponseCode(\Magento\Framework\Webapi\Exception::HTTP_BAD_REQUEST);
-        }
+            if ($this->_request->isPost() && (empty($return['result']) || $return['result'] == 'error')) {
+                $result->setHttpResponseCode(\Magento\Framework\Webapi\Exception::HTTP_BAD_REQUEST);
+            }
 
-        $result->setData($return);
+            $result->setData($return);
 
-        return $result;
+            return $result;
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 
     /**

--- a/Domain/AmazonAddressFactory.php
+++ b/Domain/AmazonAddressFactory.php
@@ -23,10 +23,6 @@ use Magento\Framework\Escaper;
 
 class AmazonAddressFactory
 {
-    /**
-     * @var Escaper
-     */
-    private $escaper;
 
     /**
      * @var ObjectManagerInterface
@@ -48,7 +44,7 @@ class AmazonAddressFactory
      *
      * @param ObjectManagerInterface $objectManager
      * @param AmazonNameFactory $amazonNameFactory
-     * @param Escaper $escaper
+     * @param null $escaper Deprecated, do not remove for backward compatibility
      * @param array $addressDecoratorPool Per-country custom decorators of incoming address data.
      *                                         The key as an "ISO 3166-1 alpha-2" country code and
      *                                         the value as an FQCN of a child of AmazonAddress.
@@ -56,12 +52,11 @@ class AmazonAddressFactory
     public function __construct(
         ObjectManagerInterface $objectManager,
         AmazonNameFactory $amazonNameFactory,
-        Escaper $escaper,
+        $escaper = null,
         array $addressDecoratorPool = []
     ) {
         $this->objectManager = $objectManager;
         $this->amazonNameFactory = $amazonNameFactory;
-        $this->escaper = $escaper;
         $this->addressDecoratorPool = $addressDecoratorPool;
     }
 
@@ -76,22 +71,22 @@ class AmazonAddressFactory
         $address = $responseData['address'];
         $amazonName = $this->amazonNameFactory->create(
             [
-                'name' => $this->escaper->escapeHtml($address['Name']),
-                'country' => $this->escaper->escapeHtml($address['CountryCode'])]
+                'name' => $address['Name'],
+                'country' => $address['CountryCode']]
         );
 
         $data = [
-            AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $this->escaper->escapeHtml($address['PostalCode']) : '',
-            AmazonAddressInterface::COUNTRY_CODE => $this->escaper->escapeHtml($address['CountryCode']),
-            AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $this->escaper->escapeHtml($address['Phone']) : '',
-            AmazonAddressInterface::STATE_OR_REGION => isset($address['StateOrRegion']) ? $this->escaper->escapeHtml($address['StateOrRegion']) : '',
-            AmazonAddressInterface::FIRST_NAME => $this->escaper->escapeHtml($amazonName->getFirstName()),
-            AmazonAddressInterface::LAST_NAME => $this->escaper->escapeHtml($amazonName->getLastName()),
+            AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $address['PostalCode'] : '',
+            AmazonAddressInterface::COUNTRY_CODE => $address['CountryCode'],
+            AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $address['Phone'] : '',
+            AmazonAddressInterface::STATE_OR_REGION => isset($address['StateOrRegion']) ? $address['StateOrRegion'] : '',
+            AmazonAddressInterface::FIRST_NAME => $amazonName->getFirstName(),
+            AmazonAddressInterface::LAST_NAME => $amazonName->getLastName(),
             AmazonAddressInterface::LINES => $this->getLines($address)
         ];
 
         if (isset($address['City'])) {
-            $data[AmazonAddressInterface::CITY] = $this->escaper->escapeHtml($address['City']);
+            $data[AmazonAddressInterface::CITY] = $address['City'];
         }
 
         $amazonAddress = $this->objectManager->create(AmazonAddress::class, ['data' => $data]);
@@ -131,7 +126,7 @@ class AmazonAddressFactory
         $lines = [];
         for ($i = 1; $i <= 3; $i++) {
             if (isset($responseData['AddressLine' . $i]) && $responseData['AddressLine' . $i]) {
-                $lines[$i] = $this->escaper->escapeHtml($responseData['AddressLine' . $i]);
+                $lines[$i] = $responseData['AddressLine' . $i];
             }
         }
 

--- a/Helper/Data.php
+++ b/Helper/Data.php
@@ -24,6 +24,7 @@ use Magento\Store\Model\StoreManagerInterface;
 use Magento\Framework\Module\ModuleListInterface;
 use Magento\Framework\Module\StatusFactory;
 use Amazon\Core\Model\AmazonConfig;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * @SuppressWarnings(PHPMD.ExcessivePublicCount)

--- /dev/null
+++ b/Logger/ExceptionLogger.php
@@ -0,0 +1,31 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Core\Logger;
+
+use Psr\Log\LoggerInterface;
+
+class ExceptionLogger
+{
+    private $logger;
+
+    public function __construct(LoggerInterface $logger) {
+        $this->logger = $logger;
+    }
+    public function logException(\Exception $e) {
+        $message = (string) $e;
+        $this->logger->addError($message);
+    }
+}

--- a/Model/AmazonConfig.php
+++ b/Model/AmazonConfig.php
@@ -173,4 +173,4 @@ class AmazonConfig
         );
     }
 
-}
\ No newline at end of file
+}

--- a/composer.json
+++ b/composer.json
@@ -2,7 +2,7 @@
   "name": "amzn/amazon-pay-and-login-with-amazon-core-module",
   "description": "Shared functionality for Amazon Pay and Login with Amazon modules",
   "type": "magento2-module",
-  "version": "3.2.8",
+  "version": "3.2.13",
   "license": [
     "Apache-2.0"
   ],

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Core" setup_version="3.2.8">
+    <module name="Amazon_Core" setup_version="3.2.13">
         <sequence>
             <module name="Magento_Store"/>
             <module name="Magento_Customer"/>

--- a/view/adminhtml/web/js/simplepath.js
+++ b/view/adminhtml/web/js/simplepath.js
@@ -103,6 +103,13 @@ define(
                     });
 
                     $('#simplepath_form').on('submit', function () {
+                        // Remove the numeric indices added by Magento's form validation logic
+                        $('#simplepath_form :input').each(function() {
+                            if($(this).attr('orig-name')) {
+                                $(this).attr('name', $(this).attr('orig-name'));
+                                $(this).removeAttr('orig-name');
+                            }
+                        });
                         self.setupWindowLaunch();
                     });
 

