--- a/Block/Adminhtml/Form/Field/IpnUrl.php
+++ b/Block/Adminhtml/Form/Field/IpnUrl.php
@@ -30,16 +30,13 @@ class IpnUrl extends BaseField
      */
     protected function _renderValue(AbstractElement $element)
     {
-        $stores = $this->_storeManager->getStores();
+        $store = $this->_storeManager->getDefaultStoreView();
         $valueReturn = '';
 
-        if ($store = reset($stores))
-        {
-            $baseUrl = $store->getBaseUrl(UrlInterface::URL_TYPE_WEB, true);
-            if ($baseUrl) {
-                $value       = $baseUrl . 'amazonpayments/payment/ipn/';
-                $valueReturn = "<div>".$this->escapeHtml($value)."</div>";
-            }
+        $baseUrl = $store->getBaseUrl(UrlInterface::URL_TYPE_WEB, true);
+        if ($baseUrl) {
+            $value       = $baseUrl . 'amazonpayments/payment/ipn/';
+            $valueReturn = "<div>".$this->escapeHtml($value)."</div>";
         }
 
         return '<td class="value">' . $valueReturn . '</td>';

--- a/Block/Config.php
+++ b/Block/Config.php
@@ -103,13 +103,18 @@ class Config extends Template
             'oAuthHashRedirectUrl'     => $this->coreHelper->getOAuthRedirectUrl(),
             'isQuoteDirty'             => $this->categoryExclusionHelper->isQuoteDirty(),
             'region'                   => $this->coreHelper->getRegion(),
-            'useMultiCurrency'         => $this->config->useMultiCurrency()
+            'useMultiCurrency'         => $this->config->useMultiCurrency(),
+            'scaRegions'               => $this->coreHelper->getScaRegions()
         ];
 
         if ($this->coreHelper->isSandboxEnabled()) {
             $config['sandboxSimulationOptions'] = $this->transformSandboxSimulationOptions();
         }
 
+        if ($orderReferenceId = $this->getRequest()->getParam('orderReferenceId')) {
+            $config['orderReferenceId'] = preg_replace('/[^A-Z0-9-]/', '', $orderReferenceId);
+        }
+
         return $config;
     }
 

--- a/Controller/Adminhtml/Simplepath/Poll.php
+++ b/Controller/Adminhtml/Simplepath/Poll.php
@@ -77,7 +77,7 @@ class Poll extends System
             $result = $this->jsonResultFactory->create();
             $result->setData((int)$shouldRefresh);
             return $result;
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }

--- a/Controller/Simplepath/Listener.php
+++ b/Controller/Simplepath/Listener.php
@@ -103,7 +103,7 @@ class Listener extends \Magento\Framework\App\Action\Action implements CsrfAware
             $result->setData($return);
 
             return $result;
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }
@@ -149,8 +149,7 @@ class Listener extends \Magento\Framework\App\Action\Action implements CsrfAware
      */
     public function createCsrfValidationException(
         RequestInterface $request
-    ): ?InvalidRequestException
-    {
+    ): ?InvalidRequestException {
         return null;
     }
 

--- a/Domain/AmazonAddressFactory.php
+++ b/Domain/AmazonAddressFactory.php
@@ -44,6 +44,7 @@ class AmazonAddressFactory
      *
      * @param ObjectManagerInterface $objectManager
      * @param AmazonNameFactory $amazonNameFactory
+     * @param null $escaper Deprecated, do not remove for backward compatibility
      * @param array $addressDecoratorPool Per-country custom decorators of incoming address data.
      *                                         The key as an "ISO 3166-1 alpha-2" country code and
      *                                         the value as an FQCN of a child of AmazonAddress.
@@ -51,6 +52,7 @@ class AmazonAddressFactory
     public function __construct(
         ObjectManagerInterface $objectManager,
         AmazonNameFactory $amazonNameFactory,
+        $escaper = null,
         array $addressDecoratorPool = []
     ) {
         $this->objectManager = $objectManager;

--- a/Exception/AmazonServiceUnavailableException.php
+++ b/Exception/AmazonServiceUnavailableException.php
@@ -21,8 +21,53 @@ class AmazonServiceUnavailableException extends LocalizedException
 {
     const ERROR_MESSAGE = 'Amazon could not process your request.';
 
-    public function __construct()
+    /**
+     * @var string
+     */
+    private $apiErrorType;
+
+    /**
+     * @var string
+     */
+    private $apiErrorCode;
+
+    /**
+     * @var string
+     */
+    private $apiErrorMessage;
+
+    /**
+     * AmazonServiceUnavailableException constructor.
+     * @param string $apiErrorType
+     * @param string $apiErrorCode
+     * @param string $apiErrorMessage
+     */
+    public function __construct($apiErrorType = '', $apiErrorCode = '', $apiErrorMessage = '')
     {
+        $this->apiErrorType = $apiErrorType;
+        $this->apiErrorCode = $apiErrorCode;
+        $this->apiErrorMessage = $apiErrorMessage;
         parent::__construct(__('Amazon could not process your request.'));
     }
+
+    /**
+     * @return string
+     */
+    public function getApiErrorType() {
+        return $this->apiErrorType;
+    }
+
+    /**
+     * @return string
+     */
+    public function getApiErrorCode() {
+        return $this->apiErrorCode;
+    }
+
+    /**
+     * @return string
+     */
+    public function getApiErrorMessage() {
+        return $this->apiErrorMessage;
+    }
 }

--- a/Helper/Data.php
+++ b/Helper/Data.php
@@ -33,6 +33,31 @@ class Data extends AbstractHelper
 
     const AMAZON_ACTIVE = 'payment/amazon_payment/active';
 
+    /**
+     * @var EncryptorInterface
+     */
+    private $encryptor;
+
+    /**
+     * @var StoreManagerInterface
+     */
+    private $storeManager;
+
+    /**
+     * @var \Amazon\Core\Helper\ClientIp
+     */
+    private $clientIpHelper;
+
+    /**
+     * @var ModuleListInterface
+     */
+    private $moduleList;
+
+    /**
+     * @var StatusFactory
+     */
+    private $moduleStatusFactory;
+
     /**
      * @var Config
      */
@@ -41,11 +66,6 @@ class Data extends AbstractHelper
     /**
      * Data constructor.
      *
-     * Because most of these methods have been moved to Amazon\Core\Model\AmazonConfig,
-     * there are several unused dependencies here which are not
-     * assigned in the constructor.
-     * They have been left in the constructor signature to avoid changing the API.
-     *
      * @param ModuleListInterface $moduleList
      * @param Context $context
      * @param EncryptorInterface $encryptor
@@ -55,66 +75,87 @@ class Data extends AbstractHelper
      * @param AmazonConfig $config
      */
     public function __construct(
-        ModuleListInterface $moduleList = null,
+        ModuleListInterface $moduleList,
         Context $context,
-        EncryptorInterface $encryptor = null,
-        StoreManagerInterface $storeManager = null,
-        ClientIp $clientIpHelper = null,
-        StatusFactory $moduleStatusFactory = null,
+        EncryptorInterface $encryptor,
+        StoreManagerInterface $storeManager,
+        ClientIp $clientIpHelper,
+        StatusFactory $moduleStatusFactory,
         AmazonConfig $config
     ) {
         parent::__construct($context);
+        $this->moduleList = $moduleList;
+        $this->encryptor = $encryptor;
+        $this->storeManager = $storeManager;
+        $this->clientIpHelper = $clientIpHelper;
+        $this->moduleStatusFactory = $moduleStatusFactory;
         $this->config = $config;
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getMerchantId($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getMerchantId($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/merchant_id',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAccessKey($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getAccessKey($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/access_key',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getSecretKey($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getSecretKey($scope, $scopeCode);
+        $secretKey = $this->scopeConfig->getValue(
+            'payment/amazon_payment/secret_key',
+            $scope,
+            $scopeCode
+        );
+        $secretKey = $this->encryptor->decrypt($secretKey);
+
+        return $secretKey;
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getClientId($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getClientId($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/client_id',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getClientSecret($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getClientSecret($scope, $scopeCode);
+        $clientSecret = $this->scopeConfig->getValue(
+            'payment/amazon_payment/client_secret',
+            $scope,
+            $scopeCode
+        );
+        $clientSecret = $this->encryptor->decrypt($clientSecret);
+
+        return $clientSecret;
     }
 
     /*
@@ -124,37 +165,77 @@ class Data extends AbstractHelper
      */
     public function getPaymentRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getPaymentRegion($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/payment_region',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getRegion($scope, $scopeCode);
+        return $this->getPaymentRegion($scope, $scopeCode);
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getCurrencyCode($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getCurrencyCode($scope, $scopeCode);
+        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
+
+        $currencyCodeMap = [
+            'de' => 'EUR',
+            'uk' => 'GBP',
+            'us' => 'USD',
+            'jp' => 'JPY'
+        ];
+
+        return array_key_exists($paymentRegion, $currencyCodeMap) ? $currencyCodeMap[$paymentRegion] : '';
+    }
+
+    /**
+     * @return array
+     */
+    public function getScaRegions($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $regionList = $this->scopeConfig->getValue(
+            'payment/amazon_payment/sca_regions',
+            $scope,
+            $scopeCode
+        );
+        $regions = explode(',', $regionList);
+        return is_array($regions) ? $regions : [];
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getWidgetUrl($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getWidgetUrl($scope, $scopeCode);
+        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
+        $sandboxEnabled = $this->isSandboxEnabled($scope, $scopeCode);
+
+        $widgetUrlMap = [
+            'de' => $this->getWidgetPath('production/de'),
+            'uk' => $this->getWidgetPath('production/uk'),
+            'us' => $this->getWidgetPath('production/us'),
+            'jp' => $this->getWidgetPath('production/jp')
+        ];
+
+        if ($sandboxEnabled) {
+            $widgetUrlMap = [
+                'de' => $this->getWidgetPath('sandbox/de'),
+                'uk' => $this->getWidgetPath('sandbox/uk'),
+                'us' => $this->getWidgetPath('sandbox/us'),
+                'jp' => $this->getWidgetPath('sandbox/jp')
+            ];
+        }
+
+        return array_key_exists($paymentRegion, $widgetUrlMap) ? $widgetUrlMap[$paymentRegion] : '';
     }
 
     /**
@@ -163,12 +244,14 @@ class Data extends AbstractHelper
      * @param $key
      * @param null $store
      * @return mixed
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getWidgetPath($key, $store = null)
     {
-        return $this->config->getWidgetPath($key, $store);
+        return $this->scopeConfig->getValue(
+            'widget/' . $key,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            $store
+        );
     }
 
     /**
@@ -176,164 +259,229 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getLoginScope($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getLoginScope($scope, $scopeCode);
+        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
+
+        $scope = [
+            'profile',
+            'payments:widget',
+            'payments:shipping_address',
+            'payments:billing_address'
+        ];
+
+        return implode(' ', $scope);
     }
 
     /**
      * @param string $scope
      *
      * @return boolean
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isEuPaymentRegion($scope = ScopeInterface::SCOPE_STORE)
     {
-        return $this->config->isEuPaymentRegion($scope);
+        $paymentRegion = $this->getPaymentRegion($scope);
+
+        return (in_array($paymentRegion, ['uk', 'de']));
     }
 
     /*
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isSandboxEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isSandboxEnabled($scope, $scopeCode);
+        return (bool)$this->scopeConfig->getValue(
+            'payment/amazon_payment/sandbox',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isPwaEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isPwaEnabled($scope, $scopeCode);
+        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
+            $this->updateModuleStatus();
+            return false;
+        }
+
+        if (!$this->clientIpHelper->clientHasAllowedIp()) {
+            return false;
+        }
+
+        return $this->scopeConfig->isSetFlag(
+            self::AMAZON_ACTIVE,
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isLwaEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isLwaEnabled($scope, $scopeCode);
+        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
+            $this->updateModuleStatus();
+            return false;
+        }
+
+        if (!$this->clientIpHelper->clientHasAllowedIp()) {
+            return false;
+        }
+
+        return $this->scopeConfig->isSetFlag(
+            'payment/amazon_payment/lwa_enabled',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isEnabled($scope, $scopeCode);
+        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
+            $this->updateModuleStatus();
+            return false;
+        }
+
+        return $this->isLwaEnabled($scope, $scopeCode) || $this->isPwaEnabled($scope, $scopeCode);
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getPaymentAction($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getPaymentAction($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/payment_action',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAuthorizationMode($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getAuthorizationMode($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/authorization_mode',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getUpdateMechanism($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getUpdateMechanism($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/update_mechanism',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonDisplayLanguage($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getButtonDisplayLanguage($scope, $scopeCode);
+        $buttonConfigLang = $this->scopeConfig
+            ->getValue('payment/amazon_payment/button_display_language', $scope, $scopeCode);
+
+        if (empty($buttonConfigLang)) {
+            $buttonConfigLang = $this->scopeConfig->getValue('general/locale/code', $scope, $scopeCode);
+        }
+
+        return str_replace('_', '-', $buttonConfigLang);
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonType($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getButtonType($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/button_type',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonTypePwa($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getButtonTypePwa($scope, $scopeCode);
+        $buttonType = $this->getButtonType($scope, $scopeCode);
+
+        $buttonTypeMap = [
+            'full' => 'PwA',
+            'short' => 'Pay',
+            'logo' => 'A',
+        ];
+
+        return array_key_exists($buttonType, $buttonTypeMap) ? $buttonTypeMap[$buttonType] : '';
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonTypeLwa($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getButtonTypeLwa($scope, $scopeCode);
+        $buttonType = $this->getButtonType($scope, $scopeCode);
+
+        $buttonTypeMap = [
+            'full' => 'LwA',
+            'short' => 'Login',
+            'logo' => 'A',
+        ];
+
+        return array_key_exists($buttonType, $buttonTypeMap) ? $buttonTypeMap[$buttonType] : '';
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonColor($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getButtonColor($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/button_color',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonSize($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getButtonSize($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/button_size',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getEmailStoreName($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getEmailStoreName($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/email_store_name',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
@@ -341,113 +489,145 @@ class Data extends AbstractHelper
      */
     public function getAdditionalAccessScope($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getAdditionalAccessScope($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/additional_access_scope',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isLoggingEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isLoggingEnabled($scope, $scopeCode);
+        return (bool)$this->scopeConfig->getValue(
+            'payment/amazon_payment/logging',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getStoreName($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getStoreName($scope, $scopeCode);
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/storename',
+            $scope,
+            $scopeCode
+        );
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getStoreFrontName($storeId)
     {
-        return $this->config->getStoreFrontName($storeId);
+        return $this->storeManager->getStore($storeId)->getName();
     }
 
     /*
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getRedirectUrl()
     {
-        return $this->config->getRedirectUrl();
+        $urlPath = $this->isLwaEnabled() ? 'amazon/login/authorize' : 'amazon/login/guest';
+        return $this->_getUrl($urlPath, ['_secure' => true]);
     }
 
     /**
      * @param string|null $context
      *
      * @return array
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getSandboxSimulationStrings($context = null)
     {
-        return $this->config->getSandboxSimulationStrings($context);
+        $simulationStrings = [
+            'default' => null
+        ];
+
+        if (in_array($context, ['authorization', 'authorization_capture'])) {
+            $simulationStrings['Authorization:Declined:InvalidPaymentMethod']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"InvalidPaymentMethod", ' .
+                '"PaymentMethodUpdateTimeInMins":5}}';
+            $simulationStrings['Authorization:Declined:AmazonRejected']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
+            $simulationStrings['Authorization:Declined:TransactionTimedOut']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"TransactionTimedOut"}}';
+        }
+
+        if (in_array($context, ['capture', 'authorization_capture'])) {
+            $simulationStrings['Capture:Declined:AmazonRejected']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
+            $simulationStrings['Capture:Pending']
+                = '{"SandboxSimulation": {"State":"Pending"}}';
+        }
+
+        if (in_array($context, ['refund'])) {
+            $simulationStrings['Refund:Declined']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
+        }
+
+        return $simulationStrings;
     }
 
     /**
      * @return array
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getSandboxSimulationOptions()
     {
-        return $this->config->getSandboxSimulationOptions();
+        $simulationlabels = [
+            'default' => __('No Simulation'),
+            'Authorization:Declined:InvalidPaymentMethod' => __('Authorization soft decline'),
+            'Authorization:Declined:AmazonRejected' => __('Authorization hard decline'),
+            'Authorization:Declined:TransactionTimedOut' => __('Authorization timed out')
+        ];
+
+        return $simulationlabels;
     }
 
     /**
      * @param string $scope
      * @param null $scopeCode
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isPaymentButtonEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isPaymentButtonEnabled($scope, $scopeCode);
+        return ($this->isPwaEnabled($scope, $scopeCode) && $this->isCurrentCurrencySupportedByAmazon());
     }
 
     /**
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isLoginButtonEnabled()
     {
-        return $this->config->isLoginButtonEnabled();
+        return ($this->isLwaEnabled() && $this->isPwaEnabled() && $this->isCurrentCurrencySupportedByAmazon());
     }
 
     /**
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isCurrentCurrencySupportedByAmazon()
     {
-        return $this->config->isCurrentCurrencySupportedByAmazon();
+        return $this->config->getBaseCurrencyCode() == $this->getCurrencyCode();
     }
 
     /**
      * @param string $paymentRegion E.g. "uk", "us", "de", "jp".
      *
      * @return mixed
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAmazonAccountUrlByPaymentRegion($paymentRegion)
     {
-        return $this->config->getAmazonAccountUrlByPaymentRegion($paymentRegion);
+        $url = $this->getPaymentRegionUrl($paymentRegion);
+
+        if (!$url || empty($url)) {
+            throw new \InvalidArgumentException("$paymentRegion is not a valid payment region");
+        }
+
+        return $url;
     }
 
     /**
@@ -456,12 +636,14 @@ class Data extends AbstractHelper
      * @param $key
      * @param null $store
      * @return mixed
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getPaymentRegionUrl($key, $store = null)
     {
-        return $this->config->getPaymentRegionUrl($key, $store);
+        return $this->scopeConfig->getValue(
+            'region/country/' . $key,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            $store
+        );
     }
 
     /**
@@ -470,12 +652,14 @@ class Data extends AbstractHelper
      * @param $key
      * @param null $store
      * @return mixed
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getClientPath($key, $store = null)
     {
-        return $this->config->getClientPath($key, $store);
+        return $this->scopeConfig->getValue(
+            'client/paths/' . $key,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            $store
+        );
     }
 
     /**
@@ -483,12 +667,11 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return array
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getBlackListedTerms($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getBlackListedTerms($scope, $scopeCode);
+        $terms = $this->scopeConfig->getValue('payment/amazon_payment/packstation_terms', $scope, $scopeCode);
+        return explode(',', $terms);
     }
 
     /**
@@ -496,22 +679,19 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isBlacklistedTermValidationEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isBlacklistedTermValidationEnabled($scope, $scopeCode);
+        return $this->scopeConfig
+            ->isSetFlag('payment/amazon_payment/packstation_terms_validation_enabled', $scope, $scopeCode);
     }
 
     /**
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getOAuthRedirectUrl()
     {
-        return $this->config->getOAuthRedirectUrl();
+        return $this->_getUrl('amazon/login/processAuthHash', ['_secure' => true]);
     }
 
     /**
@@ -519,36 +699,35 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isPwaButtonVisibleOnProductPage($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isPwaButtonVisibleOnProductPage($scope, $scopeCode);
+        return $this->isPaymentButtonEnabled($scope, $scopeCode)
+            && $this->scopeConfig->isSetFlag('payment/amazon_payment/pwa_pp_button_is_visible', $scope, $scopeCode);
     }
 
     /**
      * @param string $scope
      * @param null $scopeCode
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isPayButtonAvailableInMinicart($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->isPayButtonAvailableInMinicart($scope, $scopeCode);
+        return $this->scopeConfig->isSetFlag('payment/amazon_payment/minicart_button_is_visible', $scope, $scopeCode);
     }
 
     /**
      * @param string $scope
      * @param null $scopeCode
      * @return bool
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function allowAmLoginLoading($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->allowAmLoginLoading($scope, $scopeCode);
+        return $this->scopeConfig->isSetFlag(
+            'payment/amazon_payment/amazon_login_in_popup',
+            $scope,
+            $scopeCode
+        );
     }
 
     /**
@@ -556,41 +735,64 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return string
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getCredentialsJson($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->config->getCredentialsJson($scope, $scopeCode);
+        return $this->scopeConfig
+            ->getValue('payment/amazon_payment/credentials_json', $scope, $scopeCode);
     }
 
     /**
      * @return array
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAmazonCredentialsFields()
     {
-        return $this->config->getAmazonCredentialsFields();
+        return [
+            $this->getClientPath('secretkey'),
+            $this->getClientPath('accesskey'),
+            $this->getClientPath('merchantid'),
+            $this->getClientPath('clientid'),
+            $this->getClientPath('clientsecret')
+        ];
     }
 
     /**
      * @return array
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAmazonCredentialsEncryptedFields()
     {
-        return $this->config->getAmazonCredentialsEncryptedFields();
+        return [
+            $this->getClientPath('secretkey'),
+            $this->getClientPath('clientsecret')
+        ];
     }
 
     /**
      * @return null
-     *
-     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getVersion()
     {
-        return $this->config->getVersion();
+        $version = $this->moduleList->getOne('Amazon_Core');
+        if ($version && isset($version['setup_version'])) {
+            return $version['setup_version'];
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Ensures all modules are disabled if one of them is disabled. Amazon Payment or Amazon Login modules will cause
+     * the frontend to break if they are in different enabled states.
+     */
+    private function updateModuleStatus()
+    {
+        $isDisabled = $this->moduleList->has('Amazon_Payment') ? 0 : 1;
+        $isDisabled += $this->moduleList->has('Amazon_Login') ? 0 : 1;
+        $isDisabled += $this->moduleList->has('Amazon_Core') ? 0 : 1;
+
+        // Make sure all of them are disabled if any one of them is disabled.
+        if ($isDisabled > 0 && $isDisabled != 3) {
+            $this->moduleStatusFactory->create()->setIsEnabled(false, ['Amazon_Payment', 'Amazon_Login', 'Amazon_Core']);
+        }
     }
 }

--- a/Logger/ExceptionLogger.php
+++ b/Logger/ExceptionLogger.php
@@ -21,10 +21,12 @@ class ExceptionLogger
 {
     private $logger;
 
-    public function __construct(LoggerInterface $logger) {
+    public function __construct(LoggerInterface $logger)
+    {
         $this->logger = $logger;
     }
-    public function logException(\Exception $e) {
+    public function logException(\Exception $e)
+    {
         $message = (string) $e;
         $this->logger->addError($message);
     }

--- a/Model/AmazonConfig.php
+++ b/Model/AmazonConfig.php
@@ -16,22 +16,12 @@
 
 namespace Amazon\Core\Model;
 
-use Magento\Framework\Profiler\Driver\Standard\Stat;
 use Magento\Store\Model\ScopeInterface;
 use Magento\Framework\App\Config\ScopeConfigInterface;
 use Magento\Store\Model\StoreManagerInterface;
-use Magento\Framework\UrlInterface;
-use Magento\Framework\Module\ModuleListInterface;
-use Magento\Framework\Encryption\EncryptorInterface;
-use Amazon\Core\Helper\ClientIp;
-use Magento\Framework\Module\StatusFactory;
-use Magento\Framework\App\ObjectManager;
 
 class AmazonConfig
 {
-
-    const AMAZON_ACTIVE = 'payment/amazon_payment/active';
-
     /**
      * @var \Magento\Framework\App\Config\ScopeConfigInterface
      */
@@ -42,58 +32,18 @@ class AmazonConfig
      */
     private $storeManager;
 
-    /**
-     * @var UrlInterface
-     */
-    private $urlBuilder;
-
-    /**
-     * @var ModuleListInterface
-     */
-    private $moduleList;
-
-    /**
-     * @var EncryptorInterface
-     */
-    private $encryptor;
-
-    /**
-     * @var ClientIp
-     */
-    private $clientIpHelper;
-
-    /**
-     * @var StatusFactory
-     */
-    private $moduleStatusFactory;
-
     /**
      * Config constructor.
      *
      * @param StoreManagerInterface $storeManager
      * @param ScopeConfigInterface $scopeConfig
-     * @param UrlInterface $urlBuilder
-     * @param ModuleListInterface $moduleList
-     * @param EncryptorInterface $encryptor
-     * @param ClientIp $clientIpHelper
-     * @param StatusFactory $moduleStatusFactory
      */
     public function __construct(
         StoreManagerInterface $storeManager,
-        ScopeConfigInterface $scopeConfig,
-        UrlInterface $urlBuilder = null,
-        ModuleListInterface $moduleList = null,
-        EncryptorInterface $encryptor = null,
-        ClientIp $clientIpHelper = null,
-        StatusFactory $moduleStatusFactory = null
+        ScopeConfigInterface $scopeConfig
     ) {
         $this->storeManager = $storeManager;
         $this->scopeConfig = $scopeConfig;
-        $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->create(UrlInterface::class);
-        $this->moduleList = $moduleList ?: ObjectManager::getInstance()->create(ModuleListInterface::class);
-        $this->encryptor = $encryptor ?: ObjectManager::getInstance()->create(EncryptorInterface::class);
-        $this->clientIpHelper = $clientIpHelper ?: ObjectManager::getInstance()->create(ClientIp::class);
-        $this->moduleStatusFactory = $moduleStatusFactory ?: ObjectManager::getInstance()->create(StatusFactory::class);
     }
 
     /**
@@ -108,6 +58,21 @@ class AmazonConfig
         return $this->storeManager->getStore()->getCurrentCurrency()->getCode();
     }
 
+    /**
+     * @param string $scope
+     * @param null $scopeCode
+     *
+     * @return mixed
+     */
+    public function getPaymentRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/payment_region',
+            $scope,
+            $scopeCode
+        );
+    }
+
     /**
      * Checks to see if store's selected region is a multicurrency region.
      * @param string $scope
@@ -208,701 +173,14 @@ class AmazonConfig
         );
     }
 
-    /*
-     * @return string
-     */
-    public function getMerchantId($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/merchant_id',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getAccessKey($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/access_key',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getSecretKey($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $secretKey = $this->scopeConfig->getValue(
-            'payment/amazon_payment/secret_key',
-            $scope,
-            $scopeCode
-        );
-        $secretKey = $this->encryptor->decrypt($secretKey);
-
-        return $secretKey;
-    }
-
-    /*
-     * @return string
-     */
-    public function getClientId($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/client_id',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getClientSecret($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $clientSecret = $this->scopeConfig->getValue(
-            'payment/amazon_payment/client_secret',
-            $scope,
-            $scopeCode
-        );
-        $clientSecret = $this->encryptor->decrypt($clientSecret);
-
-        return $clientSecret;
-    }
-
-    /*
-     * @return string
-     *
-     * @deprecated - use \Amazon\Core\Model\AmazonConfig::getPaymentRegion() instead
-     */
-    public function getPaymentRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/payment_region',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->getPaymentRegion($scope, $scopeCode);
-    }
-
-    /*
-     * @return string
-     */
-    public function getCurrencyCode($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
-
-        $currencyCodeMap = [
-            'de' => 'EUR',
-            'uk' => 'GBP',
-            'us' => 'USD',
-            'jp' => 'JPY'
-        ];
-
-        return array_key_exists($paymentRegion, $currencyCodeMap) ? $currencyCodeMap[$paymentRegion] : '';
-    }
-
-    /*
-     * @return string
-     */
-    public function getWidgetUrl($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
-        $sandboxEnabled = $this->isSandboxEnabled($scope, $scopeCode);
-
-        $widgetUrlMap = [
-            'de' => $this->getWidgetPath('production/de'),
-            'uk' => $this->getWidgetPath('production/uk'),
-            'us' => $this->getWidgetPath('production/us'),
-            'jp' => $this->getWidgetPath('production/jp')
-        ];
-
-        if ($sandboxEnabled) {
-            $widgetUrlMap = [
-                'de' => $this->getWidgetPath('sandbox/de'),
-                'uk' => $this->getWidgetPath('sandbox/uk'),
-                'us' => $this->getWidgetPath('sandbox/us'),
-                'jp' => $this->getWidgetPath('sandbox/jp')
-            ];
-        }
-
-        return array_key_exists($paymentRegion, $widgetUrlMap) ? $widgetUrlMap[$paymentRegion] : '';
-    }
-
-    /**
-     * Retrieves region path from config.xml settings
-     *
-     * @param $key
-     * @param null $store
-     * @return mixed
-     */
-    public function getWidgetPath($key, $store = null)
-    {
-        return $this->scopeConfig->getValue(
-            'widget/' . $key,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
-            $store
-        );
-    }
-
-    /**
-     * @param string $scope
-     * @param null|string $scopeCode
-     *
-     * @return string
-     */
-    public function getLoginScope($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
-
-        $scope = [
-            'profile',
-            'payments:widget',
-            'payments:shipping_address',
-            'payments:billing_address'
-        ];
-
-        return implode(' ', $scope);
-    }
-
-    /**
-     * @param string $scope
-     *
-     * @return boolean
-     */
-    public function isEuPaymentRegion($scope = ScopeInterface::SCOPE_STORE)
-    {
-        $paymentRegion = $this->getPaymentRegion($scope);
-
-        return (in_array($paymentRegion, ['uk', 'de']));
-    }
-
-    /*
-     * @return bool
-     */
-    public function isSandboxEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return (bool)$this->scopeConfig->getValue(
-            'payment/amazon_payment/sandbox',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return bool
-     */
-    public function isPwaEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
-            $this->updateModuleStatus();
-            return false;
-        }
-
-        if (!$this->clientIpHelper->clientHasAllowedIp()) {
-            return false;
-        }
-
-        return $this->scopeConfig->isSetFlag(
-            self::AMAZON_ACTIVE,
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return bool
-     */
-    public function isLwaEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
-            $this->updateModuleStatus();
-            return false;
-        }
-
-        if (!$this->clientIpHelper->clientHasAllowedIp()) {
-            return false;
-        }
-
-        return $this->scopeConfig->isSetFlag(
-            'payment/amazon_payment/lwa_enabled',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return bool
-     */
-    public function isLwaDisabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return !$this->isLwaEnabled($scope, $scopeCode);
-    }
-
-    /*
-     * @return bool
-     */
-    public function isEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
-            $this->updateModuleStatus();
-            return false;
-        }
-
-        return $this->isLwaEnabled($scope, $scopeCode) || $this->isPwaEnabled($scope, $scopeCode);
-    }
-
-    /*
-     * @return string
-     */
-    public function getPaymentAction($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/payment_action',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getAuthorizationMode($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/authorization_mode',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getUpdateMechanism($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/update_mechanism',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getButtonDisplayLanguage($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $buttonConfigLang = $this->scopeConfig
-            ->getValue('payment/amazon_payment/button_display_language', $scope, $scopeCode);
-
-        if (empty($buttonConfigLang)) {
-            $buttonConfigLang = $this->scopeConfig->getValue('general/locale/code', $scope, $scopeCode);
-        }
-
-        return str_replace('_', '-', $buttonConfigLang);
-    }
-
-    /*
-     * @return string
-     */
-    public function getButtonType($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/button_type',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getButtonTypePwa($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $buttonType = $this->getButtonType($scope, $scopeCode);
-
-        $buttonTypeMap = [
-            'full' => 'PwA',
-            'short' => 'Pay',
-            'logo' => 'A',
-        ];
-
-        return array_key_exists($buttonType, $buttonTypeMap) ? $buttonTypeMap[$buttonType] : '';
-    }
-
-    /*
-     * @return string
-     */
-    public function getButtonTypeLwa($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $buttonType = $this->getButtonType($scope, $scopeCode);
-
-        $buttonTypeMap = [
-            'full' => 'LwA',
-            'short' => 'Login',
-            'logo' => 'A',
-        ];
-
-        return array_key_exists($buttonType, $buttonTypeMap) ? $buttonTypeMap[$buttonType] : '';
-    }
-
-    /*
-     * @return string
-     */
-    public function getButtonColor($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/button_color',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getButtonSize($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/button_size',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getEmailStoreName($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/email_store_name',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getAdditionalAccessScope($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/additional_access_scope',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return bool
-     */
-    public function isLoggingEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return (bool)$this->scopeConfig->getValue(
-            'payment/amazon_payment/logging',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getStoreName($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/storename',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /*
-     * @return string
-     */
-    public function getStoreFrontName($storeId)
-    {
-        return $this->storeManager->getStore($storeId)->getName();
-    }
-
-    /*
-     * @return string
-     */
-    public function getRedirectUrl()
-    {
-        $urlPath = $this->isLwaEnabled() ? 'amazon/login/authorize' : 'amazon/login/guest';
-        return $this->urlBuilder->getUrl($urlPath, ['_secure' => true]);
-    }
-
-    /**
-     * @param string|null $context
-     *
-     * @return array
-     */
-    public function getSandboxSimulationStrings($context = null)
-    {
-        $simulationStrings = [
-            'default' => null
-        ];
-
-        if (in_array($context, ['authorization', 'authorization_capture'])) {
-            $simulationStrings['Authorization:Declined:InvalidPaymentMethod']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"InvalidPaymentMethod", ' .
-                '"PaymentMethodUpdateTimeInMins":5}}';
-            $simulationStrings['Authorization:Declined:AmazonRejected']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
-            $simulationStrings['Authorization:Declined:TransactionTimedOut']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"TransactionTimedOut"}}';
-        }
-
-        if (in_array($context, ['capture', 'authorization_capture'])) {
-            $simulationStrings['Capture:Declined:AmazonRejected']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
-            $simulationStrings['Capture:Pending']
-                = '{"SandboxSimulation": {"State":"Pending"}}';
-        }
-
-        if (in_array($context, ['refund'])) {
-            $simulationStrings['Refund:Declined']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
-        }
-
-        return $simulationStrings;
-    }
-
-    /**
-     * @return array
-     */
-    public function getSandboxSimulationOptions()
-    {
-        $simulationlabels = [
-            'default' => __('No Simulation'),
-            'Authorization:Declined:InvalidPaymentMethod' => __('Authorization soft decline'),
-            'Authorization:Declined:AmazonRejected' => __('Authorization hard decline'),
-            'Authorization:Declined:TransactionTimedOut' => __('Authorization timed out')
-        ];
-
-        return $simulationlabels;
-    }
-
-    /**
-     * @param string $scope
-     * @param null $scopeCode
-     * @return bool
-     */
-    public function isPaymentButtonEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return ($this->isPwaEnabled($scope, $scopeCode) && $this->isCurrentCurrencySupportedByAmazon());
-    }
-
-    /**
-     * @return bool
-     */
-    public function isLoginButtonEnabled()
-    {
-        return ($this->isLwaEnabled() && $this->isPwaEnabled() && $this->isCurrentCurrencySupportedByAmazon());
-    }
-
-    /**
-     * @return bool
-     */
-    public function isCurrentCurrencySupportedByAmazon()
-    {
-        return $this->getBaseCurrencyCode() == $this->getCurrencyCode();
-    }
-
-    /**
-     * @param string $paymentRegion E.g. "uk", "us", "de", "jp".
-     *
-     * @return mixed
-     */
-    public function getAmazonAccountUrlByPaymentRegion($paymentRegion)
-    {
-        $url = $this->getPaymentRegionUrl($paymentRegion);
-
-        if (!$url || empty($url)) {
-            throw new \InvalidArgumentException("$paymentRegion is not a valid payment region");
-        }
-
-        return $url;
-    }
-
-    /**
-     * Retrieves region path from config.xml settings
-     *
-     * @param $key
-     * @param null $store
-     * @return mixed
-     */
-    public function getPaymentRegionUrl($key, $store = null)
-    {
-        return $this->scopeConfig->getValue(
-            'region/country/' . $key,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
-            $store
-        );
-    }
-
-    /**
-     * Retrieves client path from config.xml settings
-     *
-     * @param $key
-     * @param null $store
-     * @return mixed
-     */
-    public function getClientPath($key, $store = null)
-    {
-        return $this->scopeConfig->getValue(
-            'client/paths/' . $key,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
-            $store
-        );
-    }
-
     /**
-     * @param string $scope
-     * @param null|string $scopeCode
-     *
-     * @return array
-     */
-    public function getBlackListedTerms($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        $terms = $this->scopeConfig->getValue('payment/amazon_payment/packstation_terms', $scope, $scopeCode);
-        return explode(',', $terms);
-    }
-
-    /**
-     * @param string $scope
-     * @param null|string $scopeCode
+     * Is AmazonWebapiException code a soft decline error?
      *
+     * @param $errorCode
      * @return bool
      */
-    public function isBlacklistedTermValidationEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    public function isSoftDecline($errorCode)
     {
-        return $this->scopeConfig
-            ->isSetFlag('payment/amazon_payment/packstation_terms_validation_enabled', $scope, $scopeCode);
-    }
-
-    /**
-     * @return string
-     */
-    public function getOAuthRedirectUrl()
-    {
-        return $this->urlBuilder->getUrl('amazon/login/processAuthHash', ['_secure' => true]);
-    }
-
-    /**
-     * @param string $scope
-     * @param null|string $scopeCode
-     *
-     * @return bool
-     */
-    public function isPwaButtonVisibleOnProductPage($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->isPaymentButtonEnabled($scope, $scopeCode)
-            && $this->scopeConfig->isSetFlag('payment/amazon_payment/pwa_pp_button_is_visible', $scope, $scopeCode);
-    }
-
-    /**
-     * @param string $scope
-     * @param null $scopeCode
-     * @return bool
-     */
-    public function isPayButtonAvailableInMinicart($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->isSetFlag('payment/amazon_payment/minicart_button_is_visible', $scope, $scopeCode);
-    }
-
-    /**
-     * @param string $scope
-     * @param null $scopeCode
-     * @return bool
-     */
-    public function allowAmLoginLoading($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->isSetFlag(
-            'payment/amazon_payment/amazon_login_in_popup',
-            $scope,
-            $scopeCode
-        );
-    }
-
-    /**
-     * @param string $scope
-     * @param null|string $scopeCode
-     *
-     * @return string
-     */
-    public function getCredentialsJson($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig
-            ->getValue('payment/amazon_payment/credentials_json', $scope, $scopeCode);
-    }
-
-    /**
-     * @return array
-     */
-    public function getAmazonCredentialsFields()
-    {
-        return [
-            $this->getClientPath('secretkey'),
-            $this->getClientPath('accesskey'),
-            $this->getClientPath('merchantid'),
-            $this->getClientPath('clientid'),
-            $this->getClientPath('clientsecret')
-        ];
-    }
-
-    /**
-     * @return array
-     */
-    public function getAmazonCredentialsEncryptedFields()
-    {
-        return [
-            $this->getClientPath('secretkey'),
-            $this->getClientPath('clientsecret')
-        ];
-    }
-
-    /**
-     * @return null
-     */
-    public function getVersion()
-    {
-        $version = $this->moduleList->getOne('Amazon_Core');
-        if ($version && isset($version['setup_version'])) {
-            return $version['setup_version'];
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Ensures all modules are disabled if one of them is disabled. Amazon Payment or Amazon Login modules will cause
-     * the frontend to break if they are in different enabled states.
-     */
-    private function updateModuleStatus()
-    {
-        $isDisabled = $this->moduleList->has('Amazon_Payment') ? 0 : 1;
-        $isDisabled += $this->moduleList->has('Amazon_Login') ? 0 : 1;
-        $isDisabled += $this->moduleList->has('Amazon_Core') ? 0 : 1;
-
-        // Make sure all of them are disabled if any one of them is disabled.
-        if ($isDisabled > 0 && $isDisabled != 3) {
-            $this->moduleStatusFactory->create()->setIsEnabled(false, ['Amazon_Payment', 'Amazon_Login', 'Amazon_Core']);
-        }
+        return $errorCode == $this->scopeConfig->getValue('payment/amazon_payment/soft_decline_code');
     }
 }

--- a/composer.json
+++ b/composer.json
@@ -1,32 +1 @@
-{
-  "name": "amzn/amazon-pay-and-login-with-amazon-core-module",
-  "description": "Shared functionality for Amazon Pay and Login with Amazon modules",
-  "type": "magento2-module",
-  "version": "3.2.11",
-  "license": [
-    "Apache-2.0"
-  ],
-  "require": {
-    "php": "~7.1.3||~7.2.0",
-    "magento/framework": "*",
-    "magento/module-sales": "*",
-    "magento/module-config": "*",
-    "magento/module-store": "*",
-    "magento/module-developer": "*",
-    "magento/module-quote": "*",
-    "magento/module-catalog": "*",
-    "magento/module-customer": "*",
-    "magento/module-checkout": "*",
-    "magento/module-backend": "*",
-    "magento/module-payment": "*",
-    "magento/module-paypal": "*",
-    "magento/module-eav": "*",
-    "amzn/amazon-pay-sdk-php": "^3.2.0"
-  },
-  "autoload": {
-    "files": ["registration.php"],
-    "psr-4": {
-      "Amazon\\Core\\": ""
-    }
-  }
-}
+{"name":"amzn/amazon-pay-and-login-with-amazon-core-module","description":"Shared functionality for Amazon Pay and Login with Amazon modules","type":"magento2-module","version":"3.4.1-p2","license":["Apache-2.0"],"require":{"php":"~7.1.3||~7.2.0||~7.3.0","magento/framework":"*","magento/module-sales":"*","magento/module-config":"*","magento/module-store":"*","magento/module-developer":"*","magento/module-quote":"*","magento/module-catalog":"*","magento/module-customer":"*","magento/module-checkout":"*","magento/module-backend":"*","magento/module-payment":"*","magento/module-paypal":"*","magento/module-eav":"*","amzn/amazon-pay-sdk-php":"^3.2.0"},"autoload":{"files":["registration.php"],"psr-4":{"Amazon\\Core\\":""}}}

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Core" setup_version="3.2.11">
+    <module name="Amazon_Core" setup_version="3.4.1">
         <sequence>
             <module name="Magento_Store"/>
             <module name="Magento_Customer"/>

--- a/view/adminhtml/web/js/simplepath.js
+++ b/view/adminhtml/web/js/simplepath.js
@@ -103,6 +103,13 @@ define(
                     });
 
                     $('#simplepath_form').on('submit', function () {
+                        // Remove the numeric indices added by Magento's form validation logic
+                        $('#simplepath_form :input').each(function() {
+                            if($(this).attr('orig-name')) {
+                                $(this).attr('name', $(this).attr('orig-name'));
+                                $(this).removeAttr('orig-name');
+                            }
+                        });
                         self.setupWindowLaunch();
                     });
 

