--- a/Block/Config.php
+++ b/Block/Config.php
@@ -103,13 +103,18 @@ class Config extends Template
             'oAuthHashRedirectUrl'     => $this->coreHelper->getOAuthRedirectUrl(),
             'isQuoteDirty'             => $this->categoryExclusionHelper->isQuoteDirty(),
             'region'                   => $this->coreHelper->getRegion(),
-            'useMultiCurrency'         => $this->config->useMultiCurrency()
+            'useMultiCurrency'         => $this->config->useMultiCurrency(),
+            'scaRegions'               => $this->coreHelper->getScaRegions()
         ];
 
         if ($this->coreHelper->isSandboxEnabled()) {
             $config['sandboxSimulationOptions'] = $this->transformSandboxSimulationOptions();
         }
 
+        if ($orderReferenceId = $this->getRequest()->getParam('orderReferenceId')) {
+            $config['orderReferenceId'] = preg_replace('/[^A-Z0-9-]/', '', $orderReferenceId);
+        }
+
         return $config;
     }
 

--- a/Controller/Adminhtml/Simplepath/Poll.php
+++ b/Controller/Adminhtml/Simplepath/Poll.php
@@ -77,7 +77,7 @@ class Poll extends System
             $result = $this->jsonResultFactory->create();
             $result->setData((int)$shouldRefresh);
             return $result;
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }

--- a/Controller/Simplepath/Listener.php
+++ b/Controller/Simplepath/Listener.php
@@ -103,7 +103,7 @@ class Listener extends \Magento\Framework\App\Action\Action implements CsrfAware
             $result->setData($return);
 
             return $result;
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }
@@ -149,8 +149,7 @@ class Listener extends \Magento\Framework\App\Action\Action implements CsrfAware
      */
     public function createCsrfValidationException(
         RequestInterface $request
-    ): ?InvalidRequestException
-    {
+    ): ?InvalidRequestException {
         return null;
     }
 

--- a/Exception/AmazonServiceUnavailableException.php
+++ b/Exception/AmazonServiceUnavailableException.php
@@ -21,8 +21,53 @@ class AmazonServiceUnavailableException extends LocalizedException
 {
     const ERROR_MESSAGE = 'Amazon could not process your request.';
 
-    public function __construct()
+    /**
+     * @var string
+     */
+    private $apiErrorType;
+
+    /**
+     * @var string
+     */
+    private $apiErrorCode;
+
+    /**
+     * @var string
+     */
+    private $apiErrorMessage;
+
+    /**
+     * AmazonServiceUnavailableException constructor.
+     * @param string $apiErrorType
+     * @param string $apiErrorCode
+     * @param string $apiErrorMessage
+     */
+    public function __construct($apiErrorType = '', $apiErrorCode = '', $apiErrorMessage = '')
     {
+        $this->apiErrorType = $apiErrorType;
+        $this->apiErrorCode = $apiErrorCode;
+        $this->apiErrorMessage = $apiErrorMessage;
         parent::__construct(__('Amazon could not process your request.'));
     }
+
+    /**
+     * @return string
+     */
+    public function getApiErrorType() {
+        return $this->apiErrorType;
+    }
+
+    /**
+     * @return string
+     */
+    public function getApiErrorCode() {
+        return $this->apiErrorCode;
+    }
+
+    /**
+     * @return string
+     */
+    public function getApiErrorMessage() {
+        return $this->apiErrorMessage;
+    }
 }

--- a/Helper/Data.php
+++ b/Helper/Data.php
@@ -24,8 +24,6 @@ use Magento\Store\Model\StoreManagerInterface;
 use Magento\Framework\Module\ModuleListInterface;
 use Magento\Framework\Module\StatusFactory;
 use Amazon\Core\Model\AmazonConfig;
-use Magento\Framework\App\Cache\TypeListInterface;
-use Magento\Framework\App\ObjectManager;
 
 /**
  * @SuppressWarnings(PHPMD.ExcessivePublicCount)
@@ -65,11 +63,6 @@ class Data extends AbstractHelper
      */
     private $config;
 
-    /**
-     * @var TypeListInterface
-     */
-    private $cacheTypeList;
-
     /**
      * Data constructor.
      *
@@ -80,7 +73,6 @@ class Data extends AbstractHelper
      * @param ClientIp $clientIpHelper
      * @param StatusFactory $moduleStatusFactory
      * @param AmazonConfig $config
-     * @param TypeListInterface $cacheTypeList
      */
     public function __construct(
         ModuleListInterface $moduleList,
@@ -89,8 +81,7 @@ class Data extends AbstractHelper
         StoreManagerInterface $storeManager,
         ClientIp $clientIpHelper,
         StatusFactory $moduleStatusFactory,
-        AmazonConfig $config,
-        TypeListInterface $cacheTypeList = null
+        AmazonConfig $config
     ) {
         parent::__construct($context);
         $this->moduleList = $moduleList;
@@ -99,7 +90,6 @@ class Data extends AbstractHelper
         $this->clientIpHelper = $clientIpHelper;
         $this->moduleStatusFactory = $moduleStatusFactory;
         $this->config = $config;
-        $this->cacheTypeList = $cacheTypeList ?: ObjectManager::getInstance()->get(TypeListInterface::class);
     }
 
     /*
@@ -207,6 +197,20 @@ class Data extends AbstractHelper
         return array_key_exists($paymentRegion, $currencyCodeMap) ? $currencyCodeMap[$paymentRegion] : '';
     }
 
+    /**
+     * @return array
+     */
+    public function getScaRegions($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $regionList = $this->scopeConfig->getValue(
+            'payment/amazon_payment/sca_regions',
+            $scope,
+            $scopeCode
+        );
+        $regions = explode(',', $regionList);
+        return is_array($regions) ? $regions : [];
+    }
+
     /*
      * @return string
      */
@@ -789,7 +793,6 @@ class Data extends AbstractHelper
         // Make sure all of them are disabled if any one of them is disabled.
         if ($isDisabled > 0 && $isDisabled != 3) {
             $this->moduleStatusFactory->create()->setIsEnabled(false, ['Amazon_Payment', 'Amazon_Login', 'Amazon_Core']);
-            $this->cacheTypeList->cleanType('config');
         }
     }
 }

--- a/Logger/ExceptionLogger.php
+++ b/Logger/ExceptionLogger.php
@@ -21,10 +21,12 @@ class ExceptionLogger
 {
     private $logger;
 
-    public function __construct(LoggerInterface $logger) {
+    public function __construct(LoggerInterface $logger)
+    {
         $this->logger = $logger;
     }
-    public function logException(\Exception $e) {
+    public function logException(\Exception $e)
+    {
         $message = (string) $e;
         $this->logger->addError($message);
     }

--- a/Model/AmazonConfig.php
+++ b/Model/AmazonConfig.php
@@ -67,9 +67,9 @@ class AmazonConfig
     public function getPaymentRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
         return $this->scopeConfig->getValue(
-          'payment/amazon_payment/payment_region',
-          $scope,
-          $scopeCode
+            'payment/amazon_payment/payment_region',
+            $scope,
+            $scopeCode
         );
     }
 
@@ -83,9 +83,9 @@ class AmazonConfig
     public function isMulticurrencyRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null, $store = null)
     {
         $mcRegions = $this->scopeConfig->getValue(
-          'multicurrency/regions',
-          $scope,
-          $store
+            'multicurrency/regions',
+            $scope,
+            $store
         );
 
         if ($mcRegions) {
@@ -111,9 +111,9 @@ class AmazonConfig
     public function multiCurrencyEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null, $store = null)
     {
         $enabled = $this->scopeConfig->getValue(
-          'payment/amazon_payment/multicurrency',
-          $scope,
-          $scopeCode
+            'payment/amazon_payment/multicurrency',
+            $scope,
+            $scopeCode
         );
 
         if ($enabled) {
@@ -134,9 +134,9 @@ class AmazonConfig
         if ($this->multiCurrencyEnabled()) {
             // get allowed presentment currencies from config.xml
             $currencies = $this->scopeConfig->getValue(
-              'multicurrency/currencies',
-              ScopeInterface::SCOPE_STORE,
-              $store
+                'multicurrency/currencies',
+                ScopeInterface::SCOPE_STORE,
+                $store
             );
 
             if ($currencies) {
@@ -167,10 +167,20 @@ class AmazonConfig
     public function getBaseCurrencyCode($store = null)
     {
         return $this->scopeConfig->getValue(
-          'currency/options/base',
-          ScopeInterface::SCOPE_STORE,
-          $store
+            'currency/options/base',
+            ScopeInterface::SCOPE_STORE,
+            $store
         );
     }
 
+    /**
+     * Is AmazonWebapiException code a soft decline error?
+     *
+     * @param $errorCode
+     * @return bool
+     */
+    public function isSoftDecline($errorCode)
+    {
+        return $errorCode == $this->scopeConfig->getValue('payment/amazon_payment/soft_decline_code');
+    }
 }

--- a/composer.json
+++ b/composer.json
@@ -1,32 +1 @@
-{
-  "name": "amzn/amazon-pay-and-login-with-amazon-core-module",
-  "description": "Shared functionality for Amazon Pay and Login with Amazon modules",
-  "type": "magento2-module",
-  "version": "3.2.12",
-  "license": [
-    "Apache-2.0"
-  ],
-  "require": {
-    "php": "~7.1.3||~7.2.0",
-    "magento/framework": "*",
-    "magento/module-sales": "*",
-    "magento/module-config": "*",
-    "magento/module-store": "*",
-    "magento/module-developer": "*",
-    "magento/module-quote": "*",
-    "magento/module-catalog": "*",
-    "magento/module-customer": "*",
-    "magento/module-checkout": "*",
-    "magento/module-backend": "*",
-    "magento/module-payment": "*",
-    "magento/module-paypal": "*",
-    "magento/module-eav": "*",
-    "amzn/amazon-pay-sdk-php": "^3.2.0"
-  },
-  "autoload": {
-    "files": ["registration.php"],
-    "psr-4": {
-      "Amazon\\Core\\": ""
-    }
-  }
-}
+{"name":"amzn/amazon-pay-and-login-with-amazon-core-module","description":"Shared functionality for Amazon Pay and Login with Amazon modules","type":"magento2-module","version":"3.4.1-p2","license":["Apache-2.0"],"require":{"php":"~7.1.3||~7.2.0||~7.3.0","magento/framework":"*","magento/module-sales":"*","magento/module-config":"*","magento/module-store":"*","magento/module-developer":"*","magento/module-quote":"*","magento/module-catalog":"*","magento/module-customer":"*","magento/module-checkout":"*","magento/module-backend":"*","magento/module-payment":"*","magento/module-paypal":"*","magento/module-eav":"*","amzn/amazon-pay-sdk-php":"^3.2.0"},"autoload":{"files":["registration.php"],"psr-4":{"Amazon\\Core\\":""}}}

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Core" setup_version="3.2.12">
+    <module name="Amazon_Core" setup_version="3.4.1">
         <sequence>
             <module name="Magento_Store"/>
             <module name="Magento_Customer"/>

