--- a/Model/OrderInformationManagement.php
+++ b/Model/OrderInformationManagement.php
@@ -144,11 +144,24 @@ class OrderInformationManagement implements OrderInformationManagementInterface
             ];
 
             $responseParser = $this->clientFactory->create($storeId)->setOrderReferenceDetails($data);
-            $response = $this->amazonSetOrderDetailsResponseFactory->create([
-                'response' => $responseParser
-            ]);
+            try {
+                $response       = $this->amazonSetOrderDetailsResponseFactory->create(
+                    [
+                    'response' => $responseParser
+                    ]
+                );
 
-            $this->validateConstraints($response, $allowedConstraints);
+                $this->validateConstraints($response, $allowedConstraints);
+            } catch (AmazonServiceUnavailableException $e) {
+                if($e->getApiErrorCode() == 'OrderReferenceNotModifiable') {
+                    $this->logger->warning(
+                        "Could not modify Amazon order details for $amazonOrderReferenceId: "
+                        . $e->getApiErrorMessage()
+                    );
+                } else {
+                    throw $e;
+                }
+            }
         } catch (LocalizedException $e) {
             throw $e;
         } catch (Exception $e) {

--- a/Plugin/ConfirmOrderReference.php
+++ b/Plugin/ConfirmOrderReference.php
@@ -25,7 +25,6 @@ use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
 use Amazon\Payment\Model\OrderInformationManagement;
 use Magento\Quote\Api\Data\PaymentInterface;
 use Magento\Quote\Api\Data\AddressInterface;
-use Magento\Framework\Webapi\Rest\Request;
 use Magento\Framework\Exception\LocalizedException;
 use Amazon\Payment\Gateway\Config\Config as GatewayConfig;
 use Magento\Quote\Api\CartRepositoryInterface;
@@ -42,11 +41,6 @@ class ConfirmOrderReference
      */
     private $checkoutSession;
 
-    /**
-     * @var Request
-     */
-    private $request;
-
     /**
      * @var OrderInformationManagement
      */
@@ -60,31 +54,19 @@ class ConfirmOrderReference
     /**
      * ConfirmOrderReference constructor.
      * @param Session $checkoutSession
-     * @param Request $request
      * @param OrderInformationManagement $orderInformationManagement
      * @param CartRepositoryInterface $quoteRepository
      */
     public function __construct(
         Session $checkoutSession,
-        Request $request,
         OrderInformationManagement $orderInformationManagement,
         CartRepositoryInterface $quoteRepository
     ) {
         $this->checkoutSession = $checkoutSession;
-        $this->request = $request;
         $this->orderInformationManagement = $orderInformationManagement;
         $this->quoteRepository = $quoteRepository;
     }
 
-    /**
-     * @return boolean
-     */
-    protected function canConfirmOrderReference()
-    {
-        $data = $this->request->getRequestData();
-        return !empty($data['confirmOrder']);
-    }
-
     /**
      * @param PaymentMethodManagementInterface $subject
      * @param $result
@@ -112,12 +94,10 @@ class ConfirmOrderReference
                     $this->orderInformationManagement->saveOrderInformation($amazonOrderReferenceId);
                 }
 
-                if ($this->canConfirmOrderReference()) {
-                    $this->orderInformationManagement->confirmOrderReference(
-                        $amazonOrderReferenceId,
-                        $quote->getStoreId()
-                    );
-                }
+                $this->orderInformationManagement->confirmOrderReference(
+                    $amazonOrderReferenceId,
+                    $quote->getStoreId()
+                );
             }
         }
 

--- a/composer.json
+++ b/composer.json
@@ -1 +1,37 @@
-{"name":"amzn/amazon-pay-module","description":"Amazon Pay module","type":"magento2-module","version":"3.4.1-p2","license":["Apache-2.0"],"require":{"php":"~7.1.3||~7.2.0||~7.3.0","amzn/amazon-pay-and-login-with-amazon-core-module":"^3.4.1-p2","amzn/login-with-amazon-module":"^3.4.1-p2","magento/framework":"^102","magento/module-customer":"^102","magento/module-eav":"^102","magento/module-sales":"^102","magento/module-quote":"^101.1","magento/module-payment":"^100.3","magento/module-backend":"^101","magento/module-store":"^101","magento/module-checkout":"^100.3","magento/module-catalog":"^103","magento/module-paypal":"*","magento/module-directory":"^100.3"},"suggest":{"magento/module-customer":"*","magento/module-scalable-checkout":"*","magento/module-scalable-oms":"*"},"autoload":{"files":["registration.php"],"psr-4":{"Amazon\\Payment\\":""}}}
+{
+  "name": "amzn/amazon-pay-module",
+  "description": "Amazon Pay module",
+  "type": "magento2-module",
+  "version": "3.4.2",
+  "license": [
+    "Apache-2.0"
+  ],
+  "require": {
+    "php": "~7.1.3||~7.2.0||~7.3.0",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.4.2",
+    "amzn/login-with-amazon-module": "^3.4.2",
+    "magento/framework": "^102",
+    "magento/module-customer": "^102",
+    "magento/module-eav": "^102",
+    "magento/module-sales": "^102",
+    "magento/module-quote": "^101.1",
+    "magento/module-payment": "^100.3",
+    "magento/module-backend": "^101",
+    "magento/module-store": "^101",
+    "magento/module-checkout": "^100.3",
+    "magento/module-catalog": "^103",
+    "magento/module-paypal": "*",
+    "magento/module-directory": "^100.3"
+  },
+  "suggest": {
+    "magento/module-customer": "*",
+    "magento/module-scalable-checkout": "*",
+    "magento/module-scalable-oms": "*"
+  },
+  "autoload": {
+    "files": ["registration.php"],
+    "psr-4": {
+      "Amazon\\Payment\\": ""
+    }
+  }
+}

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Payment" setup_version="3.4.1" >
+    <module name="Amazon_Payment" setup_version="3.4.2" >
         <sequence>
             <module name="Amazon_Core"/>
             <module name="Amazon_Login"/>

--- a/view/frontend/web/js/action/place-order.js
+++ b/view/frontend/web/js/action/place-order.js
@@ -40,7 +40,6 @@ define(
                     quoteId: quote.getQuoteId()
                 });
                 payload = {
-                    confirmOrder: true,
                     cartId: quote.getQuoteId(),
                     email: quote.guestEmail,
                     paymentMethod: paymentData,
@@ -49,7 +48,6 @@ define(
             } else {
                 serviceUrl = urlBuilder.createUrl('/carts/mine/set-payment-information', {});
                 payload = {
-                    confirmOrder: true,
                     cartId: quote.getQuoteId(),
                     paymentMethod: paymentData,
                     billingAddress: quote.billingAddress()

--- a/view/frontend/web/js/model/storage.js
+++ b/view/frontend/web/js/model/storage.js
@@ -50,7 +50,8 @@ define(
             isLoginRedirectPage = $('body').hasClass('amazon-login-login-processauthhash'),
             amazonCustomerEmail = ko.computed(function () {
                 // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
-                if (window.checkoutConfig.hasOwnProperty('amazonLogin') &&
+                if (window.hasOwnProperty('checkoutConfig') &&
+                    window.checkoutConfig.hasOwnProperty('amazonLogin') &&
                     typeof window.checkoutConfig.amazonLogin.amazon_customer_email === 'string'
                 ) {
                     return window.checkoutConfig.amazonLogin.amazon_customer_email;

--- a/view/frontend/web/js/view/shipping.js
+++ b/view/frontend/web/js/view/shipping.js
@@ -2,14 +2,22 @@
 define(
     [
         'jquery',
+        'underscore',
+        'ko',
         'Magento_Checkout/js/view/shipping',
         'Magento_Customer/js/model/customer',
+        'Magento_Checkout/js/action/set-shipping-information',
+        'Magento_Checkout/js/model/step-navigator',
         'Amazon_Payment/js/model/storage'
     ],
     function (
         $,
+        _,
+        ko,
         Component,
         customer,
+        setShippingInformationAction,
+        stepNavigator,
         amazonStorage
     ) {
         'use strict';
@@ -41,20 +49,32 @@ define(
             },
 
             /**
-             * Overridden validateShippingInformation for Amazon Pay to bypass validation
-             *
-             * @inheritDoc
+             * New setShipping Action for Amazon Pay to bypass validation
              */
-            validateShippingInformation: function () {
-                if (!amazonStorage.isAmazonAccountLoggedIn()) {
-                    return this._super();
-                }
+            setShippingInformation: function () {
 
-                if (!customer.isLoggedIn()) {
-                    return this.validateGuestEmail();
+                /**
+                 * Set Amazon shipping info
+                 */
+                function setShippingInformationAmazon() {
+                    setShippingInformationAction().done(
+                        function () {
+                            stepNavigator.next();
+                        }
+                    );
                 }
 
-                return true;
+                if (amazonStorage.isAmazonAccountLoggedIn() && customer.isLoggedIn()) {
+                    setShippingInformationAmazon();
+                } else if (amazonStorage.isAmazonAccountLoggedIn() && !customer.isLoggedIn()) {
+
+                    if (this.validateGuestEmail()) {
+                        setShippingInformationAmazon();
+                    }
+                    //if using guest checkout or guest checkout with amazon pay we need to use the main validation
+                } else if (this.validateShippingInformation()) {
+                    setShippingInformationAmazon();
+                }
             }
         });
     }

