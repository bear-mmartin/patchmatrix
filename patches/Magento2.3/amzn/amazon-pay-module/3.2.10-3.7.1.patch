--- a/Block/Widget/ResetPassword.php
+++ b/Block/Widget/ResetPassword.php
@@ -10,7 +10,7 @@ namespace Amazon\Payment\Block\Widget;
 
 use Magento\Framework\View\Element\Template;
 use Magento\Framework\View\Element\Template\Context;
-use Magento\Framework\UrlFactory;
+use Magento\Customer\Model\Url;
 use Magento\Customer\Model\Session;
 use Amazon\Login\Api\CustomerLinkRepositoryInterface;
 
@@ -28,13 +28,13 @@ class ResetPassword extends Template
 
     public function __construct(
         Context $context,
-        UrlFactory $urlFactory,
+        Url $urlModel,
         Session $session,
         CustomerLinkRepositoryInterface $customerLink,
         array $data = []
     ) {
         parent::__construct($context, $data);
-        $this->urlModel = $urlFactory->create();
+        $this->urlModel = $urlModel;
         $this->session = $session;
         $this->customerLink = $customerLink;
     }
@@ -63,7 +63,7 @@ class ResetPassword extends Template
 
     public function getLink()
     {
-        $url = $this->urlModel->getUrl('customer/account/forgotpassword');
+        $url = $this->urlModel->getLogoutUrl();
 
         return $url;
     }

--- a/Controller/Payment/CompleteCheckout.php
+++ b/Controller/Payment/CompleteCheckout.php
@@ -15,11 +15,15 @@
  */
 namespace Amazon\Payment\Controller\Payment;
 
+use Amazon\Core\Exception\AmazonServiceUnavailableException;
+use Amazon\Core\Helper\Data as AmazonHelper;
 use Amazon\Core\Model\AmazonConfig;
 use Amazon\Core\Exception\AmazonWebapiException;
 use Amazon\Core\Logger\ExceptionLogger;
+use Amazon\Payment\Api\OrderInformationManagementInterface;
 use Magento\Framework\App\Action\Action;
 use Magento\Framework\App\Action\Context;
+use Magento\Framework\Exception\NotFoundException;
 use Magento\Quote\Api\CartManagementInterface;
 use Magento\Quote\Api\GuestCartManagementInterface;
 use Magento\Checkout\Model\Session as CheckoutSession;
@@ -41,6 +45,11 @@ class CompleteCheckout extends Action
      */
     private $amazonConfig;
 
+    /**
+     * @var AmazonHelper
+     */
+    private $amazonHelper;
+
     /**
      * @var CheckoutSession
      */
@@ -61,11 +70,17 @@ class CompleteCheckout extends Action
      */
     private $exceptionLogger;
 
+    /**
+     * @var OrderInformationManagementInterface
+     */
+    private $orderInformationManagement;
+
     /**
      * CompleteCheckout constructor.
      *
      * @param Context $context
      * @param AmazonConfig $amazonConfig
+     * @param AmazonHelper $amazonHelper
      * @param CartManagementInterface $cartManagement
      * @param GuestCartManagementInterface $guestCartManagement
      * @param CheckoutSession $checkoutSession
@@ -73,26 +88,32 @@ class CompleteCheckout extends Action
      * @param PageFactory $pageFactory
      * @param MessageManager $messageManager
      * @param ExceptionLogger $exceptionLogger
+     * @param OrderInformationManagementInterface $orderInformationManagement
      */
     public function __construct(
         Context $context,
         AmazonConfig $amazonConfig,
+        AmazonHelper $amazonHelper,
         CartManagementInterface $cartManagement,
         GuestCartManagementInterface $guestCartManagement,
         CheckoutSession $checkoutSession,
         Session $session,
         PageFactory $pageFactory,
         MessageManager $messageManager,
-        ExceptionLogger $exceptionLogger = null
+        ExceptionLogger $exceptionLogger = null,
+        OrderInformationManagementInterface $orderInformationManagement = null
     ) {
         parent::__construct($context);
         $this->amazonConfig = $amazonConfig;
+        $this->amazonHelper = $amazonHelper;
         $this->cartManagement = $cartManagement;
         $this->checkoutSession = $checkoutSession;
         $this->session = $session;
         $this->pageFactory = $pageFactory;
         $this->messageManager = $messageManager;
         $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
+        $this->orderInformationManagement = $orderInformationManagement ?: ObjectManager::getInstance()
+            ->get(OrderInformationManagementInterface::class);
     }
 
     /*
@@ -102,6 +123,8 @@ class CompleteCheckout extends Action
     {
         try {
             $authenticationStatus = $this->getRequest()->getParam('AuthenticationStatus');
+            // Bypass cache check in \Magento\PageCache\Model\DepersonalizeChecker
+            $this->getRequest()->setParams(['ajax' => 1]);
             switch ($authenticationStatus) {
                 case 'Success':
                     try {
@@ -109,8 +132,20 @@ class CompleteCheckout extends Action
                             $this->checkoutSession->getQuote()->setCheckoutMethod(CartManagementInterface::METHOD_GUEST);
                         }
                         $this->cartManagement->placeOrder($this->checkoutSession->getQuoteId());
+                        if ($this->amazonHelper->getAuthorizationMode() == 'synchronous_possible') {
+                            $this->messageManager->addNoticeMessage(__(
+                                'Your transaction with Amazon Pay is currently being validated. ' .
+                                'Please be aware that we will inform you shortly as needed.'
+                            ));
+                        }
                         return $this->_redirect('checkout/onepage/success');
                     } catch (AmazonWebapiException $e) {
+                        if ($this->amazonConfig->isSoftDecline($e->getCode())) {
+                            return $this->_redirect('checkout', [
+                                '_query' => 'orderReferenceId=' . $this->getOrderReferenceId(),
+                                '_fragment' => 'payment',
+                            ]);
+                        }
                         $this->exceptionLogger->logException($e);
                         $this->messageManager->addErrorMessage($e->getMessage());
                     }
@@ -127,11 +162,47 @@ class CompleteCheckout extends Action
                         'The SCA challenge was not completed successfully.  '
                         . 'Please try again, or use a different payment method.'
                     ));
+                    return $this->_redirect('checkout', [
+                        '_query' => 'orderReferenceId=' . $this->getOrderReferenceId(),
+                        '_fragment' => 'payment',
+                    ]);
             }
+
+            $orderReferenceId = $this->getOrderReferenceId();
+
+            if ($orderReferenceId) {
+                // Cancel the order to prevent confusion when the merchant views Transactions in Seller Central
+                try {
+                    $this->orderInformationManagement->cancelOrderReference($orderReferenceId, $this->checkoutSession->getQuote()->getStoreId());
+                } catch (AmazonServiceUnavailableException $e) {
+                    $this->exceptionLogger->logException($e);
+                }
+            }
+
             return $this->_redirect('checkout/cart');
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }
     }
+
+    /**
+     * Return Amazon order reference ID
+     *
+     * @return string
+     * @throws NotFoundException
+     * @throws \Magento\Framework\Exception\LocalizedException
+     * @throws \Magento\Framework\Exception\NoSuchEntityException
+     */
+    private function getOrderReferenceId()
+    {
+        $quote = $this->checkoutSession->getQuote();
+        if (!$quote) {
+            throw new NotFoundException(__('Failed to retrieve quote from checkoutSession'));
+        }
+        return $quote
+            ->getExtensionAttributes()
+            ->getAmazonOrderReferenceId()
+            ->getAmazonOrderReferenceId();
+    }
 }

--- a/Domain/AmazonConstraint.php
+++ b/Domain/AmazonConstraint.php
@@ -66,10 +66,11 @@ class AmazonConstraint
     {
         switch ($this->getId()) {
             case static::PAYMENT_METHOD_NOT_ALLOWED_ID:
+                return __('The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.');
             case static::PAYMENT_PLAN_NOT_SET_ID:
-                return 'Please select a payment method.';
+                return __('No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.');
             default:
-                return 'Amazon could not process your request.';
+                return __('The order failed due to a technical error, please select another payment method or contact our support.');
         }
     }
 }

--- a/Domain/AmazonSetOrderDetailsResponse.php
+++ b/Domain/AmazonSetOrderDetailsResponse.php
@@ -30,7 +30,11 @@ class AmazonSetOrderDetailsResponse
         $data = $response->toArray();
 
         if (200 != $data['ResponseStatus']) {
-            throw new AmazonServiceUnavailableException();
+            throw new AmazonServiceUnavailableException(
+                $data['Error']['Type'],
+                $data['Error']['Code'],
+                $data['Error']['Message']
+            );
         }
 
         $details = $data['SetOrderReferenceDetailsResult']['OrderReferenceDetails'];

--- a/Domain/Validator/AmazonAuthorization.php
+++ b/Domain/Validator/AmazonAuthorization.php
@@ -63,9 +63,9 @@ class AmazonAuthorization
     {
         switch ($status->getReasonCode()) {
             case AmazonAuthorizationStatus::REASON_TRANSACTION_TIMEOUT:
-                return 'timeout';
-            case AmazonAuthorizationStatus::REASON_AMAZON_REJECTED:
             case AmazonAuthorizationStatus::REASON_PROCESSING_FAILURE:
+                return 'temporary';
+            case AmazonAuthorizationStatus::REASON_AMAZON_REJECTED:
                 return 'hard_decline';
             case AmazonAuthorizationStatus::REASON_INVALID_PAYMENT_METHOD:
                 return 'soft_decline';

--- a/Gateway/Command/AmazonAuthCommand.php
+++ b/Gateway/Command/AmazonAuthCommand.php
@@ -154,7 +154,7 @@ class AmazonAuthCommand implements CommandInterface
                     $response
                 );
             }
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }

--- a/Gateway/Command/CaptureStrategyCommand.php
+++ b/Gateway/Command/CaptureStrategyCommand.php
@@ -108,7 +108,6 @@ class CaptureStrategyCommand implements CommandInterface
     public function execute(array $commandSubject)
     {
         try {
-            throw new \Exception('failed');
             if (isset($commandSubject['payment'])) {
                 $paymentDO = $commandSubject['payment'];
                 $paymentInfo = $paymentDO->getPayment();
@@ -134,7 +133,7 @@ class CaptureStrategyCommand implements CommandInterface
                     $this->commandPool->get($command)->execute($commandSubject);
                 }
             }
-        } catch(\Exception $e) {
+        } catch (\Exception $e) {
             $this->exceptionLogger->logException($e);
             throw $e;
         }

--- a/Gateway/Config/Config.php
+++ b/Gateway/Config/Config.php
@@ -5,12 +5,78 @@
  */
 namespace Amazon\Payment\Gateway\Config;
 
+/**
+ * Class Config
+ * @package Amazon\Payment\Gateway\Config
+ */
 class Config extends \Magento\Payment\Gateway\Config\Config
 {
     const CODE = 'amazon_payment';
-    
+
     const KEY_ACTIVE = 'active';
 
+    /**
+     * @var \Amazon\Core\Model\AmazonConfig
+     */
+    protected $amazonConfig;
+
+    /**
+     * @var \Magento\Framework\App\RequestInterface
+     */
+    protected $request;
+
+    /**
+     * @var \Magento\Sales\Api\OrderRepositoryInterface
+     */
+    protected $orderRepository;
+
+    /**
+     * Config constructor.
+     * @param \Amazon\Core\Model\AmazonConfig $amazonConfig
+     * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
+     * @param \Magento\Framework\App\RequestInterface $request
+     * @param \Magento\Sales\Api\OrderRepositoryInterface $orderRepository
+     */
+    public function __construct(
+        \Amazon\Core\Model\AmazonConfig $amazonConfig,
+        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
+        \Magento\Framework\App\RequestInterface $request,
+        \Magento\Sales\Api\OrderRepositoryInterface $orderRepository
+    ) {
+        $this->amazonConfig = $amazonConfig;
+        $this->request = $request;
+        $this->orderRepository = $orderRepository;
+        parent::__construct($scopeConfig, self::CODE);
+    }
+
+    /**
+     * @param int|null $storeId
+     * @return boolean
+     */
+    protected function canCapturePartial($storeId = null)
+    {
+        // get the order store id if not provided
+        if (empty($storeId)) {
+            $orderId = $this->request->getParam('order_id');
+            if ($orderId) {
+                $order = $this->orderRepository->get($orderId);
+                $storeId = $order->getStoreId();
+            }
+        }
+
+        $region = $this->amazonConfig->getPaymentRegion(\Magento\Store\Model\ScopeInterface::SCOPE_STORE, $storeId);
+        switch ($region) {
+            case 'de':
+            case 'uk':
+                $result = false;
+                break;
+            default:
+                $result = parent::getValue('can_capture_partial', $storeId);
+                break;
+        }
+        return $result;
+    }
+
     /**
      * Gets Payment configuration status.
      *
@@ -21,4 +87,22 @@ class Config extends \Magento\Payment\Gateway\Config\Config
     {
         return (bool) $this->getValue(self::KEY_ACTIVE, $storeId);
     }
+
+    /**
+     * @param string $field
+     * @param int|null $storeId
+     * @return mixed
+     */
+    public function getValue($field, $storeId = null)
+    {
+        switch ($field) {
+            case 'can_capture_partial':
+                $result = $this->canCapturePartial($storeId);
+                break;
+            default:
+                $result = parent::getValue($field, $storeId);
+                break;
+        }
+        return $result;
+    }
 }

--- a/Gateway/Http/Client/SettlementClient.php
+++ b/Gateway/Http/Client/SettlementClient.php
@@ -37,8 +37,12 @@ class SettlementClient extends AbstractClient
                 'currency_code' => $data['currency_code'],
                 'capture_reference_id' => $data['amazon_order_reference_id'] . '-C' . time()
             ];
+            if (isset($data['seller_note'])) {
+                $captureData['seller_capture_note'] = $data['seller_note'];
+            }
 
-            $response = $this->adapter->completeCapture($captureData, $data['store_id']);
+            $response = $this->adapter->completeCapture($captureData, $data['store_id'], $data['amazon_order_reference_id']);
+            $response['reauthorized'] = false;
         } else {
             // if invalid - reauthorize and capture
             $captureData = [
@@ -49,6 +53,9 @@ class SettlementClient extends AbstractClient
                 'custom_information' => $data['custom_information'],
                 'platform_id' => $data['platform_id']
             ];
+            if (isset($data['seller_note'])) {
+                $captureData['seller_authorization_note'] = $data['seller_note'];
+            }
             $response = $this->adapter->authorize($data, true);
             $response['reauthorized'] = true;
         }

--- a/Gateway/Request/AuthorizationRequestBuilder.php
+++ b/Gateway/Request/AuthorizationRequestBuilder.php
@@ -18,7 +18,6 @@ namespace Amazon\Payment\Gateway\Request;
 
 use Magento\Payment\Gateway\ConfigInterface;
 use Magento\Payment\Gateway\Request\BuilderInterface;
-use Magento\Framework\App\ProductMetadata;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
 use Amazon\Core\Model\AmazonConfig;
@@ -34,11 +33,6 @@ class AuthorizationRequestBuilder implements BuilderInterface
      */
     private $config;
 
-    /**
-     * @var ProductMetadata
-     */
-    private $productMetaData;
-
     /**
      * @var SubjectReader
      */
@@ -68,7 +62,6 @@ class AuthorizationRequestBuilder implements BuilderInterface
      * AuthorizationRequestBuilder constructor.
      *
      * @param ConfigInterface $config
-     * @param ProductMetadata $productMetadata
      * @param SubjectReader $subjectReader
      * @param Data $coreHelper
      * @param AmazonConfig $amazonConfig
@@ -77,7 +70,6 @@ class AuthorizationRequestBuilder implements BuilderInterface
      */
     public function __construct(
         ConfigInterface $config,
-        ProductMetaData $productMetadata,
         SubjectReader $subjectReader,
         Data $coreHelper,
         AmazonConfig $amazonConfig,
@@ -87,7 +79,6 @@ class AuthorizationRequestBuilder implements BuilderInterface
         $this->config = $config;
         $this->coreHelper = $coreHelper;
         $this->amazonConfig = $amazonConfig;
-        $this->productMetaData = $productMetadata;
         $this->subjectReader = $subjectReader;
         $this->eventManager = $eventManager;
         $this->categoryExclusion = $categoryExclusion;
@@ -109,8 +100,13 @@ class AuthorizationRequestBuilder implements BuilderInterface
         $storeId = $orderDO->getStoreId();
         $storeName = '';
 
-        $currencyCode = $orderDO->getCurrencyCode();
-        $total = $buildSubject['amount'];
+        $currencyCode = $payment->getOrder()->getOrderCurrencyCode();
+        if ($payment->getAmazonDisplayInvoiceAmount()) {
+            $total = $payment->getAmazonDisplayInvoiceAmount();
+        }
+        else {
+            $total = $payment->getAmountOrdered();
+        }
 
         // capture sale or new auth/capture for partial capture
         if (isset($buildSubject['multicurrency']) && $buildSubject['multicurrency']['multicurrency']) {
@@ -152,7 +148,7 @@ class AuthorizationRequestBuilder implements BuilderInterface
                     'currency_code' => $currencyCode,
                     'store_name' => $storeName,
                     'custom_information' =>
-                        'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
+                        'Magento Version : 2, ' .
                         'Plugin Version : ' . $this->coreHelper->getVersion(),
                     'platform_id' => $this->config->getValue('platform_id'),
                     'request_payment_authorization' => true
@@ -163,15 +159,7 @@ class AuthorizationRequestBuilder implements BuilderInterface
             $data['additional_information'] =
                 $payment->getAdditionalInformation(AdditionalInformation::KEY_SANDBOX_SIMULATION_REFERENCE);
 
-            $eventData = [
-                'amazon_order_reference_id' => $amazonId,
-                'authorization_amount' => $total,
-                'currency_code' => $currencyCode,
-                'authorization_reference_id' => $amazonId . '-A' . time(),
-                'capture_now' => false,
-            ];
-
-            $transport = new DataObject($eventData);
+            $transport = new DataObject($data);
             $this->eventManager->dispatch(
                 'amazon_payment_authorize_before',
                 [
@@ -180,6 +168,7 @@ class AuthorizationRequestBuilder implements BuilderInterface
                     'transport' => $transport
                 ]
             );
+            $data = $transport->getData();
         }
 
         return $data;

--- a/Gateway/Request/RefundRequestBuilder.php
+++ b/Gateway/Request/RefundRequestBuilder.php
@@ -91,8 +91,8 @@ class RefundRequestBuilder implements BuilderInterface
 
         $orderDO = $paymentDO->getOrder();
 
-        $currencyCode = $orderDO->getCurrencyCode();
-        $total = $buildSubject['amount'];
+        $currencyCode = $payment->getOrder()->getOrderCurrencyCode();
+        $total = $payment->getCreditMemo()->getGrandTotal();
         $storeId = $orderDO->getStoreId();
 
         // The magento order adapter doesn't expose everything we need to send a request to the AP API so we

--- a/Gateway/Request/SettlementRequestBuilder.php
+++ b/Gateway/Request/SettlementRequestBuilder.php
@@ -18,7 +18,6 @@ namespace Amazon\Payment\Gateway\Request;
 
 use Amazon\Payment\Gateway\Config\Config;
 use Magento\Payment\Gateway\Request\BuilderInterface;
-use Magento\Framework\App\ProductMetadata;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
 use Magento\Payment\Model\Method\Logger;
@@ -37,11 +36,6 @@ class SettlementRequestBuilder implements BuilderInterface
      */
     private $logger;
 
-    /**
-     * @var ProductMetadata
-     */
-    private $productMetaData;
-
     /**
      * @var SubjectReader
      */
@@ -66,7 +60,6 @@ class SettlementRequestBuilder implements BuilderInterface
      * SettlementRequestBuilder constructor.
      *
      * @param Config $config
-     * @param ProductMetadata $productMetadata
      * @param OrderRepositoryInterface $orderRepository
      * @param CartRepositoryInterface $quoteRepository
      * @param SubjectReader $subjectReader
@@ -75,7 +68,6 @@ class SettlementRequestBuilder implements BuilderInterface
      */
     public function __construct(
         Config $config,
-        ProductMetaData $productMetadata,
         OrderRepositoryInterface $orderRepository,
         CartRepositoryInterface $quoteRepository,
         SubjectReader $subjectReader,
@@ -86,11 +78,45 @@ class SettlementRequestBuilder implements BuilderInterface
         $this->orderRepository = $orderRepository;
         $this->quoteRepository = $quoteRepository;
         $this->coreHelper = $coreHelper;
-        $this->productMetaData = $productMetadata;
         $this->subjectReader = $subjectReader;
         $this->logger = $logger;
     }
 
+    /**
+     * @param \Magento\Sales\Model\Order\Payment $payment
+     * @return \Magento\Sales\Model\Order\Invoice
+     */
+    protected function getCurrentInvoice($payment)
+    {
+        $result = null;
+        $order = $payment->getOrder();
+        foreach ($order->getInvoiceCollection() as $invoice) {
+            if (!$invoice->getId()) {
+                $result = $invoice;
+                break;
+            }
+        }
+        return $result;
+    }
+
+    /**
+     * @param \Magento\Sales\Model\Order\Payment $payment
+     * @return string
+     */
+    protected function getSellerNote($payment)
+    {
+        $result = '';
+        $invoice = $this->getCurrentInvoice($payment);
+        if ($invoice && $invoice->getComments()) {
+            foreach ($invoice->getComments() as $comment) {
+                if ($comment->getComment()) {
+                    $result = $comment->getComment();
+                    break;
+                }
+            }
+        }
+        return $result;
+    }
 
     /**
      * @param array $buildSubject
@@ -102,11 +128,17 @@ class SettlementRequestBuilder implements BuilderInterface
         $data = [];
 
         $paymentDO = $this->subjectReader->readPayment($buildSubject);
-
         $orderDO = $paymentDO->getOrder();
+        $order = $paymentDO->getPayment()->getOrder();
+        $payment = $paymentDO->getPayment();
 
-        $currencyCode = $orderDO->getCurrencyCode();
-        $total = $buildSubject['amount'];
+        $currencyCode = $order->getOrderCurrencyCode();
+        if ($payment->getAmazonDisplayInvoiceAmount()) {
+            $total = $payment->getAmazonDisplayInvoiceAmount();
+        }
+        else {
+            $total = $payment->getAmountOrdered();
+        }
 
         if ($buildSubject['multicurrency']['multicurrency']) {
             $currencyCode = $buildSubject['multicurrency']['order_currency'];
@@ -123,7 +155,7 @@ class SettlementRequestBuilder implements BuilderInterface
                     'store_id' => $buildSubject['multicurrency']['store_id'],
                     'store_name' => $buildSubject['multicurrency']['store_name'],
                     'custom_information' =>
-                        'Magento Version : ' . $this->productMetaData->getVersion() . ' ' .
+                        'Magento Version : 2, ' .
                         'Plugin Version : ' . $this->coreHelper->getVersion(),
                     'platform_id' => $this->config->getValue('platform_id'),
                     'request_payment_authorization' => false
@@ -134,6 +166,10 @@ class SettlementRequestBuilder implements BuilderInterface
                 }
         }
 
+        if ($this->coreHelper->isSandboxEnabled('store', $orderDO->getStoreId())) {
+            $data['seller_note'] = $this->getSellerNote($paymentDO->getPayment());
+        }
+
         return $data;
     }
 }

--- a/Gateway/Response/SettlementHandler.php
+++ b/Gateway/Response/SettlementHandler.php
@@ -18,8 +18,8 @@ namespace Amazon\Payment\Gateway\Response;
 
 use Magento\Payment\Gateway\Response\HandlerInterface;
 use Magento\Payment\Model\Method\Logger;
+use Amazon\Payment\Api\Data\PendingCaptureInterfaceFactory;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
-use Amazon\Core\Helper\Data;
 use Magento\Sales\Api\OrderRepositoryInterface;
 use Magento\Quote\Api\CartRepositoryInterface;
 
@@ -37,9 +37,9 @@ class SettlementHandler implements HandlerInterface
     private $subjectReader;
 
     /**
-     * @var Data
+     * @var PendingCaptureInterfaceFactory
      */
-    private $coreHelper;
+    private $pendingCaptureFactory;
 
     /**
      * @var OrderRepositoryInterface
@@ -56,20 +56,20 @@ class SettlementHandler implements HandlerInterface
      *
      * @param Logger                   $logger
      * @param SubjectReader            $subjectReader
-     * @param Data                     $coreHelper
+     * @param PendingCaptureInterfaceFactory $pendingCaptureFactory
      * @param OrderRepositoryInterface $orderRepository
      * @param CartRepositoryInterface  $quoteRepository
      */
     public function __construct(
         Logger $logger,
         SubjectReader $subjectReader,
-        Data $coreHelper,
+        PendingCaptureInterfaceFactory $pendingCaptureFactory,
         OrderRepositoryInterface $orderRepository,
         CartRepositoryInterface $quoteRepository
     ) {
         $this->logger = $logger;
         $this->subjectReader = $subjectReader;
-        $this->coreHelper = $coreHelper;
+        $this->pendingCaptureFactory = $pendingCaptureFactory;
         $this->orderRepository = $orderRepository;
         $this->quoteRepository = $quoteRepository;
     }
@@ -98,6 +98,16 @@ class SettlementHandler implements HandlerInterface
                 $quoteLink->setConfirmed(true)->save();
             }
         } else {
+            if ($response['pending']) {
+                $this->pendingCaptureFactory->create()
+                    ->setCaptureId($response['transaction_id'])
+                    ->setOrderId($paymentDO->getOrder()->getId())
+                    ->setPaymentId($payment->getId())
+                    ->save();
+
+                $payment->setIsTransactionPending(true);
+                $payment->setIsTransactionClosed(false);
+            }
             // finish capture
             $payment->setTransactionId($response['transaction_id']);
         }

--- a/Gateway/Validator/CurrencyValidator.php
+++ /dev/null
@@ -1,79 +0,0 @@
-<?php
-/**
- * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License").
- * You may not use this file except in compliance with the License.
- * A copy of the License is located at
- *
- *  http://aws.amazon.com/apache2.0
- *
- * or in the "license" file accompanying this file. This file is distributed
- * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied. See the License for the specific language governing
- * permissions and limitations under the License.
- */
-
-namespace Amazon\Payment\Gateway\Validator;
-
-use Magento\Payment\Gateway\Validator\AbstractValidator;
-use Magento\Payment\Gateway\ConfigInterface;
-use Magento\Payment\Gateway\Validator\ResultInterfaceFactory;
-use Amazon\Core\Helper\Data;
-
-/**
- * Class CurrencyValidator
- * Validates allowable currencies for Amazon Pay
- */
-class CurrencyValidator extends AbstractValidator
-{
-
-    /**
-     * @var \Magento\Payment\Gateway\ConfigInterface
-     */
-    private $config;
-
-    /**
-     * @var Data
-     */
-    private $coreHelper;
-
-    /**
-     * CurrencyValidator constructor.
-     *
-     * @param ResultInterfaceFactory $resultFactory
-     * @param ConfigInterface        $config
-     * @param Data                   $coreHelper
-     */
-    public function __construct(
-        ResultInterfaceFactory $resultFactory,
-        ConfigInterface $config,
-        Data $coreHelper
-    ) {
-        $this->coreHelper = $coreHelper;
-        $this->config = $config;
-        parent::__construct($resultFactory);
-    }
-
-    /**
-     * @param array $validationSubject
-     * @return \Magento\Payment\Gateway\Validator\ResultInterface
-     */
-    public function validate(array $validationSubject)
-    {
-
-        $allowedCurrency = $this->coreHelper->getCurrencyCode('store', $validationSubject['storeId']);
-
-        if ($allowedCurrency == $validationSubject['currency']) {
-            return $this->createResult(
-                true,
-                ['status' => 200]
-            );
-        }
-
-        return $this->createResult(
-            false,
-            [__('The currency selected is not supported by Amazon Pay.')]
-        );
-    }
-}

--- a/Helper/Address.php
+++ b/Helper/Address.php
@@ -79,6 +79,9 @@ class Address
         $address->setTelephone($amazonAddress->getTelephone());
         $address->setCountryId($this->getCountryId($amazonAddress));
 
+        $company = !empty($amazonAddress->getCompany()) ? $amazonAddress->getCompany() : '';
+        $address->setCompany($company);
+
         /*
          * The number of lines in a street address is configurable via 'customer/address/street_lines'.
          * To avoid discarding information, we'll concatenate additional lines so that they fit within the configured
@@ -95,9 +98,6 @@ class Address
         }
         $address->setStreet(array_values($lines));
 
-        $company = !empty($amazonAddress->getCompany()) ? $amazonAddress->getCompany() : '';
-        $address->setCompany($company);
-
         if ($amazonAddress->getState()) {
             $address->setRegion($this->getRegionData($amazonAddress, $address->getCountryId()));
         }

--- a/Model/Adapter/AmazonPaymentAdapter.php
+++ b/Model/Adapter/AmazonPaymentAdapter.php
@@ -24,8 +24,6 @@ use Amazon\Payment\Domain\AmazonAuthorizationResponseFactory;
 use Amazon\Payment\Domain\AmazonCaptureResponseFactory;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
-use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
-use Amazon\Payment\Api\Data\PendingCaptureInterfaceFactory;
 use Magento\Framework\UrlInterface;
 use Magento\Sales\Model\OrderRepository;
 use Magento\Framework\App\ObjectManager;
@@ -39,6 +37,8 @@ class AmazonPaymentAdapter
 {
     const SUCCESS_CODES = ['Open', 'Closed', 'Completed'];
 
+    const PENDING_CODE = 'Pending';
+
     /**
      * @var Logger
      */
@@ -74,16 +74,6 @@ class AmazonPaymentAdapter
      */
     private $coreHelper;
 
-    /**
-     * @var PendingCaptureInterfaceFactory
-     */
-    private $pendingCaptureFactory;
-
-    /**
-     * @var PendingAuthorizationInterfaceFactory
-     */
-    private $pendingAuthorizationFactory;
-
     /**
      * @var UrlInterface
      */
@@ -105,8 +95,6 @@ class AmazonPaymentAdapter
      * @param AmazonCaptureResponseFactory $amazonCaptureResponseFactory
      * @param AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory
      * @param AmazonAuthorizationResponseFactory $amazonAuthorizationResponseFactory
-     * @param PendingCaptureInterfaceFactory $pendingCaptureFactory
-     * @param PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory
      * @param SubjectReader $subjectReader
      * @param Data $coreHelper
      * @param Logger $logger
@@ -119,8 +107,6 @@ class AmazonPaymentAdapter
         AmazonCaptureResponseFactory $amazonCaptureResponseFactory,
         AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory,
         AmazonAuthorizationResponseFactory $amazonAuthorizationResponseFactory,
-        PendingCaptureInterfaceFactory $pendingCaptureFactory,
-        PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory,
         SubjectReader $subjectReader,
         Data $coreHelper,
         Logger $logger,
@@ -135,8 +121,6 @@ class AmazonPaymentAdapter
         $this->amazonAuthorizationResponseFactory = $amazonAuthorizationResponseFactory;
         $this->subjectReader = $subjectReader;
         $this->coreHelper = $coreHelper;
-        $this->pendingCaptureFactory = $pendingCaptureFactory;
-        $this->pendingAuthorizationFactory = $pendingAuthorizationFactory;
         $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
         $this->orderLinkFactory = $orderLinkFactory ?: ObjectManager::getInstance()->get(OrderLinkFactory::class);
         $this->orderRepository = $orderRepository ?: ObjectManager::getInstance()->get(OrderRepository::class);
@@ -241,7 +225,6 @@ class AmazonPaymentAdapter
     public function authorize($data, $captureNow = false, $attempts = 0)
     {
         $response = [];
-        $confirmResponse = null;
         $order = $this->getOrderByReference($data['amazon_order_reference_id']);
         if ($order) {
             $storeId = $order->getStoreId();
@@ -269,6 +252,10 @@ class AmazonPaymentAdapter
             'transaction_timeout' => 0
         ];
 
+        if (isset($data['seller_authorization_note'])) {
+            $authorizeData['seller_authorization_note'] = $data['seller_authorization_note'];
+        }
+
         /** if first synchronous attempt failed, on second attempt try an asynchronous attempt. */
         if ($authMode != 'synchronous' && $attempts) {
             $authorizeData['transaction_timeout'] = 1440;
@@ -280,56 +267,38 @@ class AmazonPaymentAdapter
         $response['constraints'] = [];
         $response['amazon_order_reference_id'] = $data['amazon_order_reference_id'];
 
-        $confirmResponse = $this->confirmOrderReference($storeId, $data['amazon_order_reference_id']);
-
-        if ($confirmResponse->response['Status'] == 200) {
-            $authorizeResponse = $this->getAuthorization($storeId, $authorizeData);
-
-            if ($authorizeResponse) {
-                if ($authorizeResponse->getCaptureTransactionId() || $authorizeResponse->getAuthorizeTransactionId()) {
-                    $response['authorize_transaction_id'] = $authorizeResponse->getAuthorizeTransactionId();
-
-                    if ($authorizeResponse->getStatus()->getState() == 'Pending' && $authMode == 'synchronous_possible') {
-                        if ($captureNow) {
-                            $response['capture_transaction_id'] = $authorizeResponse->getCaptureTransactionId();
-                        }
-                        $response['response_code'] = 'TransactionTimedOut';
-                    } elseif (!in_array($authorizeResponse->getStatus()->getState(), self::SUCCESS_CODES)) {
-                        $response['response_code'] = $authorizeResponse->getStatus()->getReasonCode();
-                        if ($authMode == 'synchronous' && $authorizeResponse->getStatus()->getReasonCode() == 'TransactionTimedOut') {
-                            $cancelData = [
-                                'store_id' => $storeId,
-                                'amazon_order_reference_id' => $data['amazon_order_reference_id']
-                            ];
-                            $this->clientFactory->create($storeId)->cancelOrderReference($cancelData);
-                        }
-                    } else {
-                        $response['status'] = true;
-
-                        if ($captureNow) {
-                            $response['capture_transaction_id'] = $authorizeResponse->getCaptureTransactionId();
-                        }
-                    }
-                } else {
-                    $response['status'] = false;
-                    $response['response_status'] = $authorizeResponse->getStatus()->getState();
-                    $response['response_code'] = $authorizeResponse->getStatus()->getReasonCode();
-                    $log['error'] = $authorizeResponse->getStatus()->getState() . ': ' . $authorizeResponse->getStatus()->getReasonCode();
-                    $this->logger->debug($log);
-                }
-            }
-        } else {
-            /** something went wrong, parse response body for use by authorization validator */
-            $response['response_status'] = $confirmResponse->response['Status'];
+        $authorizeResponse = $this->getAuthorization($storeId, $authorizeData);
 
-            $xml = simplexml_load_string($confirmResponse->response['ResponseBody']);
-            $code = $xml->Error->Code[0];
-            if ($code) {
-                $response['response_code'] = (string)$code;
+        if ($authorizeResponse->getCaptureTransactionId() || $authorizeResponse->getAuthorizeTransactionId()) {
+            $response['authorize_transaction_id'] = $authorizeResponse->getAuthorizeTransactionId();
+
+            if ($authorizeResponse->getStatus()->getState() == self::PENDING_CODE && $authMode == 'synchronous_possible') {
+                if ($captureNow) {
+                    $response['capture_transaction_id'] = $authorizeResponse->getCaptureTransactionId();
+                }
+                $response['response_code'] = 'TransactionTimedOut';
+            } elseif (!in_array($authorizeResponse->getStatus()->getState(), self::SUCCESS_CODES)) {
+                $response['response_code'] = $authorizeResponse->getStatus()->getReasonCode();
+                if ($authMode == 'synchronous' && $authorizeResponse->getStatus()->getReasonCode() == 'TransactionTimedOut') {
+                    $cancelData = [
+                        'store_id' => $storeId,
+                        'amazon_order_reference_id' => $data['amazon_order_reference_id']
+                    ];
+                    $this->clientFactory->create($storeId)->cancelOrderReference($cancelData);
+                }
             } else {
-                $log['error'] = __('AmazonPaymentAdapter: Improperly formatted XML response, no response code available.');
-                $this->logger->debug($log);
+                $response['status'] = true;
+
+                if ($captureNow) {
+                    $response['capture_transaction_id'] = $authorizeResponse->getCaptureTransactionId();
+                }
             }
+        } else {
+            $response['status'] = false;
+            $response['response_status'] = $authorizeResponse->getStatus()->getState();
+            $response['response_code'] = $authorizeResponse->getStatus()->getReasonCode();
+            $log['error'] = $authorizeResponse->getStatus()->getState() . ': ' . $authorizeResponse->getStatus()->getReasonCode();
+            $this->logger->debug($log);
         }
 
         if ($additionalInformation) {
@@ -340,8 +309,8 @@ class AmazonPaymentAdapter
     }
 
     /**
-     * @param $data
-     * @param $storeId
+     * @param array $data
+     * @param string $storeId
      * @return array
      */
     public function completeCapture($data, $storeId)
@@ -355,25 +324,14 @@ class AmazonPaymentAdapter
             $captureResponse = $this->amazonCaptureResponseFactory->create(['response' => $responseParser]);
             $capture = $captureResponse->getDetails();
 
-            if (in_array($capture->getStatus()->getState(), self::SUCCESS_CODES)) {
+            $captureCode = $capture->getStatus()->getState();
+            $successCodes = array_merge(self::SUCCESS_CODES, [self::PENDING_CODE]);
+            if (in_array($captureCode, $successCodes)) {
                 $response = [
                     'status' => true,
                     'transaction_id' => $capture->getTransactionId(),
-                    'reauthorized' => false
+                    'pending' => $captureCode == self::PENDING_CODE,
                 ];
-            } elseif ($capture->getStatus()->getState() == 'Pending') {
-                $order = $this->subjectReader->getOrder();
-
-                try {
-                    $this->pendingCaptureFactory->create()
-                        ->setCaptureId($capture->getTransactionId())
-                        ->setOrderId($order->getId())
-                        ->setPaymentId($order->getPayment()->getEntityId())
-                        ->save();
-                } catch (\Exception $e) {
-                    $log['error'] = __('AmazonPaymentAdapter: Unable to capture pending information for capture.');
-                    $this->logger->debug($log);
-                }
             } else {
                 $response['response_code'] = $capture->getReasonCode();
             }

--- a/Model/AddressManagement.php
+++ b/Model/AddressManagement.php
@@ -21,8 +21,11 @@ use Amazon\Core\Exception\AmazonServiceUnavailableException;
 use Amazon\Payment\Api\AddressManagementInterface;
 use Amazon\Payment\Api\Data\QuoteLinkInterfaceFactory;
 use Amazon\Payment\Helper\Address;
+use Amazon\Payment\Domain\AmazonOrderStatus;
+use Amazon\Payment\Domain\AmazonAuthorizationStatus;
 use Exception;
 use Magento\Checkout\Model\Session;
+use Magento\Customer\Model\AddressFactory;
 use Magento\Directory\Model\ResourceModel\Country\CollectionFactory;
 use Magento\Framework\Exception\SessionException;
 use Magento\Framework\Validator\Exception as ValidatorException;
@@ -77,6 +80,11 @@ class AddressManagement implements AddressManagementInterface
      */
     private $logger;
 
+    /**
+     * @var AddressFactory
+     */
+    private $addressFactory;
+
     /**
      * @param ClientFactoryInterface    $clientFactory
      * @param Address                   $addressHelper
@@ -86,6 +94,7 @@ class AddressManagement implements AddressManagementInterface
      * @param AmazonAddressFactory      $amazonAddressFactory
      * @param Factory                   $validatorFactory
      * @param LoggerInterface           $logger
+     * @param AddressFactory            $addressFactory
      */
     public function __construct(
         ClientFactoryInterface $clientFactory,
@@ -95,7 +104,8 @@ class AddressManagement implements AddressManagementInterface
         CollectionFactory $countryCollectionFactory,
         AmazonAddressFactory $amazonAddressFactory,
         Factory $validatorFactory,
-        LoggerInterface $logger
+        LoggerInterface $logger,
+        AddressFactory $addressFactory
     ) {
         $this->clientFactory            = $clientFactory;
         $this->addressHelper            = $addressHelper;
@@ -105,6 +115,7 @@ class AddressManagement implements AddressManagementInterface
         $this->amazonAddressFactory     = $amazonAddressFactory;
         $this->validatorFactory         = $validatorFactory;
         $this->logger                   = $logger;
+        $this->addressFactory           = $addressFactory;
     }
 
     /**
@@ -115,10 +126,18 @@ class AddressManagement implements AddressManagementInterface
         try {
             $data = $this->getOrderReferenceDetails($amazonOrderReferenceId, $addressConsentToken);
 
+            if ($this->isSuspendedStatus($data)) {
+                throw new WebapiException(__('There has been a problem with the selected payment method on your ' .
+                    'Amazon account. Please choose another one.'));
+            }
+
             $this->updateQuoteLink($amazonOrderReferenceId);
 
             if (isset($data['OrderReferenceDetails']['Destination']['PhysicalDestination'])) {
                 $shippingAddress = $data['OrderReferenceDetails']['Destination']['PhysicalDestination'];
+                if (!isset($shippingAddress['Phone']) || empty($shippingAddress['Phone'])) {
+                    $shippingAddress['Phone'] = '000-000-0000';
+                }
 
                 return $this->convertToMagentoAddress($shippingAddress, true);
             }
@@ -146,6 +165,9 @@ class AddressManagement implements AddressManagementInterface
 
             $this->updateQuoteLink($amazonOrderReferenceId);
 
+            // Re-open suspended InvalidPaymentMethod decline during ConfirmOrderReference
+            $this->session->setData('is_amazon_suspended', $this->isSuspendedStatus($data));
+
             if (isset($data['OrderReferenceDetails']['BillingAddress']['PhysicalAddress'])) {
                 $billingAddress = $data['OrderReferenceDetails']['BillingAddress']['PhysicalAddress'];
                 if (!isset($billingAddress['Phone']) || !$billingAddress['Phone']) {
@@ -199,6 +221,13 @@ class AddressManagement implements AddressManagementInterface
             if (1 != $collectionSize) {
                 throw new WebapiException(__('the country for your address is not allowed for this store'));
             }
+
+            // Validate address
+            $validate = $this->addressFactory->create()->updateData($magentoAddress)->validate();
+            if (is_array($validate)) {
+                $validate[] = __('Your address may be updated in your Amazon account.');
+                throw new ValidatorException(null, null, [$validate]);
+            }
         }
 
         return [$this->addressHelper->convertToArray($magentoAddress)];
@@ -245,4 +274,11 @@ class AddressManagement implements AddressManagementInterface
                 ->save();
         }
     }
+
+    protected function isSuspendedStatus($data)
+    {
+        $orderStatus = $data['OrderReferenceDetails']['OrderReferenceStatus'] ?? false;
+
+        return $orderStatus && $orderStatus['State'] == AmazonOrderStatus::STATE_SUSPENDED;
+    }
 }

--- a/Model/OrderInformationManagement.php
+++ b/Model/OrderInformationManagement.php
@@ -18,6 +18,7 @@ namespace Amazon\Payment\Model;
 use Amazon\Core\Client\ClientFactoryInterface;
 use Amazon\Core\Exception\AmazonServiceUnavailableException;
 use Amazon\Core\Helper\Data as CoreHelper;
+use Amazon\Core\Model\AmazonConfig;
 use Amazon\Payment\Gateway\Config\Config;
 use Amazon\Payment\Api\Data\QuoteLinkInterfaceFactory;
 use Amazon\Payment\Api\OrderInformationManagementInterface;
@@ -25,7 +26,6 @@ use Amazon\Payment\Domain\AmazonSetOrderDetailsResponse;
 use Amazon\Payment\Domain\AmazonSetOrderDetailsResponseFactory;
 use Exception;
 use Magento\Checkout\Model\Session;
-use Magento\Framework\App\ProductMetadata;
 use Magento\Framework\Exception\LocalizedException;
 use Magento\Framework\Exception\ValidatorException;
 use Magento\Quote\Model\Quote;
@@ -55,6 +55,11 @@ class OrderInformationManagement implements OrderInformationManagementInterface
      */
     private $coreHelper;
 
+    /**
+     * @var AmazonConfig
+     */
+    private $amazonConfig;
+
     /**
      * @var AmazonSetOrderDetailsResponseFactory
      */
@@ -75,41 +80,36 @@ class OrderInformationManagement implements OrderInformationManagementInterface
      */
     private $config;
 
-    /**
-     * @var ProductMetadata
-     */
-    private $productMetadata;
-
     /**
      * OrderInformationManagement constructor.
      * @param Session $session
      * @param ClientFactoryInterface $clientFactory
      * @param CoreHelper $coreHelper
+     * @param AmazonConfig $amazonConfig
      * @param Config $config
      * @param AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory
      * @param QuoteLinkInterfaceFactory $quoteLinkFactory
      * @param LoggerInterface $logger
-     * @param ProductMetadata $productMetadata
      */
     public function __construct(
         Session $session,
         ClientFactoryInterface $clientFactory,
         CoreHelper $coreHelper,
+        AmazonConfig $amazonConfig,
         Config $config,
         AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory,
         QuoteLinkInterfaceFactory $quoteLinkFactory,
         LoggerInterface $logger,
-        ProductMetadata $productMetadata,
         UrlInterface $urlBuilder = null
     ) {
         $this->session                              = $session;
         $this->clientFactory                        = $clientFactory;
         $this->coreHelper                           = $coreHelper;
+        $this->amazonConfig                         = $amazonConfig;
         $this->config                               = $config;
         $this->amazonSetOrderDetailsResponseFactory = $amazonSetOrderDetailsResponseFactory;
         $this->quoteLinkFactory                     = $quoteLinkFactory;
         $this->logger                               = $logger;
-        $this->productMetadata                      = $productMetadata;
         $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
     }
 
@@ -127,9 +127,6 @@ class OrderInformationManagement implements OrderInformationManagementInterface
             $this->setReservedOrderId($quote);
 
             $storeName = $this->coreHelper->getStoreName(ScopeInterface::SCOPE_STORE, $storeId);
-            if (!$storeName) {
-                $storeName = $quote->getStore()->getName();
-            }
 
             $data = [
                 'amazon_order_reference_id' => $amazonOrderReferenceId,
@@ -137,18 +134,16 @@ class OrderInformationManagement implements OrderInformationManagementInterface
                 'currency_code'             => $quote->getQuoteCurrencyCode(),
                 'store_name'                => $storeName,
                 'custom_information'        =>
-                    'Magento Version : ' . $this->productMetadata->getVersion() . ' ' .
+                    'Magento Version : 2, ' .
                     'Plugin Version : ' . $this->coreHelper->getVersion()
                 ,
                 'platform_id'               => $this->config->getValue('platform_id')
             ];
 
             $responseParser = $this->clientFactory->create($storeId)->setOrderReferenceDetails($data);
-            $response       = $this->amazonSetOrderDetailsResponseFactory->create(
-                [
+            $response = $this->amazonSetOrderDetailsResponseFactory->create([
                 'response' => $responseParser
-                ]
-            );
+            ]);
 
             $this->validateConstraints($response, $allowedConstraints);
         } catch (LocalizedException $e) {
@@ -161,7 +156,7 @@ class OrderInformationManagement implements OrderInformationManagementInterface
 
     protected function validateCurrency($code)
     {
-        if ($this->coreHelper->getCurrencyCode() !== $code) {
+        if ($this->coreHelper->getCurrencyCode() !== $code && !$this->amazonConfig->canUseCurrency($code)) {
             throw new LocalizedException(__('The currency selected is not supported by Amazon Pay'));
         }
     }

--- a/Model/PaymentManagement/Authorization.php
+++ b/Model/PaymentManagement/Authorization.php
@@ -19,6 +19,7 @@ namespace Amazon\Payment\Model\PaymentManagement;
 use Amazon\Core\Client\ClientFactoryInterface;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterface;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
+use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
 use Amazon\Payment\Model\PaymentManagement;
 use Amazon\Payment\Domain\AmazonAuthorizationDetailsResponseFactory;
 use Amazon\Payment\Domain\AmazonGetOrderDetailsResponseFactory;
@@ -88,11 +89,6 @@ class Authorization extends AbstractOperation
      */
     private $amazonGetOrderDetailsResponseFactory;
 
-    /**
-     * @var StoreManagerInterface
-     */
-    private $storeManager;
-
     /**
      * @var PaymentManagement
      */
@@ -108,6 +104,8 @@ class Authorization extends AbstractOperation
      */
     private $throwExceptions = false;
 
+    private $amazonPaymentAdapter;
+
     /**
      * Authorization constructor.
      *
@@ -123,7 +121,6 @@ class Authorization extends AbstractOperation
      * @param OrderRepositoryInterface $orderRepository
      * @param ManagerInterface $eventManager
      * @param AmazonGetOrderDetailsResponseFactory $amazonGetOrderDetailsResponseFactory
-     * @param StoreManagerInterface $storeManager
      * @param PaymentManagement $paymentManagement
      * @param LoggerInterface $logger
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
@@ -141,9 +138,9 @@ class Authorization extends AbstractOperation
         OrderRepositoryInterface $orderRepository,
         ManagerInterface $eventManager,
         AmazonGetOrderDetailsResponseFactory $amazonGetOrderDetailsResponseFactory,
-        StoreManagerInterface $storeManager,
         PaymentManagement $paymentManagement,
-        LoggerInterface $logger
+        LoggerInterface $logger,
+        AmazonPaymentAdapter $adapter
     ) {
         $this->clientFactory = $clientFactory;
         $this->pendingAuthorizationFactory = $pendingAuthorizationFactory;
@@ -153,9 +150,9 @@ class Authorization extends AbstractOperation
         $this->orderRepository = $orderRepository;
         $this->eventManager = $eventManager;
         $this->amazonGetOrderDetailsResponseFactory = $amazonGetOrderDetailsResponseFactory;
-        $this->storeManager = $storeManager;
         $this->paymentManagement = $paymentManagement;
         $this->logger = $logger;
+        $this->amazonPaymentAdapter = $adapter;
 
         parent::__construct($notifier, $urlBuilder, $searchCriteriaBuilderFactory, $invoiceRepository);
     }
@@ -221,7 +218,6 @@ class Authorization extends AbstractOperation
         $order->setData(OrderInterface::PAYMENT, $payment);
 
         $storeId = $order->getStoreId();
-        $this->storeManager->setCurrentStore($storeId);
 
         $authorizationId = $pendingAuthorization->getAuthorizationId();
 
@@ -246,10 +242,8 @@ class Authorization extends AbstractOperation
             } else {
                 if (!$validation['result']) {
                     switch ($validation['reason']) {
-                        case 'timeout':
-                            throw new TransactionTimeoutException(
-                                __('Amazon authorize invalid state : Transaction timed out.')
-                            );
+                        case 'temporary':
+                            $this->resubmitPendingAuthorization($order, $payment, $pendingAuthorization, $capture);
                             break;
                         case 'hard_decline':
                             $this->hardDeclinePendingAuthorization($order, $payment, $pendingAuthorization, $capture);
@@ -296,6 +290,9 @@ class Authorization extends AbstractOperation
             }
 
             $formattedAmount = $order->getBaseCurrency()->formatTxt($invoice->getBaseGrandTotal());
+            if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+                $formattedAmount = $formattedAmount .' ['. $order->formatPriceTxt($payment->getGrandTotal()) .']';
+            }
             $message = __('Captured amount of %1 online', $formattedAmount);
             $payment->setDataUsingMethod(
                 'base_amount_paid_online',
@@ -303,7 +300,10 @@ class Authorization extends AbstractOperation
             );
         } else {
             $formattedAmount = $order->getBaseCurrency()->formatTxt($payment->getBaseAmountAuthorized());
-            $message = __('Authorized amount of %1 online', $formattedAmount);
+            if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+                $formattedAmount = $formattedAmount .' ['. $order->formatPriceTxt($payment->getAmountOrdered()) .']';
+            }
+            $message = __('Authorized amount of %1', $formattedAmount);
         }
 
         $transaction = ($newTransaction) ?: $this->paymentManagement->getTransaction($transactionId, $payment, $order);
@@ -313,6 +313,42 @@ class Authorization extends AbstractOperation
         $order->save();
     }
 
+    /**
+     * Handles reauthorization in the case of a soft failure
+     *
+     * @param OrderInterface $order
+     * @param OrderPaymentInterface $payment
+     * @param PendingAuthorizationInterface $pendingAuthorization
+     * @param $capture
+     * @throws Exception
+     * @throws \Magento\Framework\Exception\NoSuchEntityException
+     */
+    protected function resubmitPendingAuthorization(
+        OrderInterface $order,
+        OrderPaymentInterface $payment,
+        PendingAuthorizationInterface $pendingAuthorization,
+        $capture
+    ) {
+        $transactionId = ($capture) ? $pendingAuthorization->getCaptureId()
+            : $pendingAuthorization->getAuthorizationId();
+
+        if ($capture) {
+            $invoice = $this->getInvoice($transactionId, $order);
+            $this->setPaymentReview($order);
+            $formattedAmount = $order->getBaseCurrency()->formatTxt($invoice->getBaseGrandTotal());
+        } else {
+            $formattedAmount = $order->getBaseCurrency()->formatTxt($payment->getBaseAmountAuthorized());
+        }
+
+        $this->paymentManagement->closeTransaction($transactionId, $payment, $order);
+
+        $this->processNewAuthorization($pendingAuthorization);
+
+        $pendingAuthorization->setProcessed(true);
+        $pendingAuthorization->save();
+        $order->save();
+    }
+
     /**
      * Handles authorization soft decline during cron
      *
@@ -336,8 +372,14 @@ class Authorization extends AbstractOperation
             $invoice = $this->getInvoice($transactionId, $order);
             $this->setPaymentReview($order);
             $formattedAmount = $order->getBaseCurrency()->formatTxt($invoice->getBaseGrandTotal());
+            if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+                $formattedAmount = $formattedAmount .' ['. $order->formatPriceTxt($payment->getGrandTotal()) .']';
+            }
         } else {
             $formattedAmount = $order->getBaseCurrency()->formatTxt($payment->getBaseAmountAuthorized());
+            if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+                $formattedAmount = $formattedAmount .' ['. $order->formatPriceTxt($payment->getAmountOrdered()) .']';
+            }
         }
 
         $message = __('Declined amount of %1 online', $formattedAmount);
@@ -379,9 +421,15 @@ class Authorization extends AbstractOperation
         if ($capture) {
             $invoice = $this->getInvoiceAndSetCancelled($transactionId, $order);
             $formattedAmount = $order->getBaseCurrency()->formatTxt($invoice->getBaseGrandTotal());
+            if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+                $formattedAmount = $formattedAmount .' ['. $order->formatPriceTxt($payment->getGrandTotal()) .']';
+            }
             $this->addCaptureDeclinedNotice($order);
         } else {
             $formattedAmount = $order->getBaseCurrency()->formatTxt($payment->getBaseAmountAuthorized());
+            if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+                $formattedAmount = $formattedAmount .' ['. $order->formatPriceTxt($payment->getAmountOrdered()) .']';
+            }
         }
 
         $message = __('Declined amount of %1 online', $formattedAmount);
@@ -419,12 +467,13 @@ class Authorization extends AbstractOperation
         $order->setData(OrderInterface::PAYMENT, $payment);
 
         $storeId = $order->getStoreId();
-        $this->storeManager->setCurrentStore($storeId);
 
         if (null === $orderDetails) {
             $responseParser = $this->clientFactory->create($storeId)->getOrderReferenceDetails(
                 [
-                    'amazon_order_reference_id' => $order->getExtensionAttributes()->getAmazonOrderReferenceId()
+                    'amazon_order_reference_id' => $order->getExtensionAttributes()
+                        ->getAmazonOrderReferenceId()
+                        ->getAmazonOrderReferenceId()
                 ]
             );
 
@@ -434,12 +483,7 @@ class Authorization extends AbstractOperation
 
         if (AmazonOrderStatus::STATE_OPEN == $orderDetails->getStatus()->getState()) {
             $capture = $pendingAuthorization->isCapture();
-
-            if ($capture) {
-                $this->requestNewAuthorizationAndCapture($order, $payment, $pendingAuthorization);
-            } else {
-                $this->requestNewAuthorization($order, $payment, $pendingAuthorization);
-            }
+            $this->requestNewAuthorization($order, $payment, $pendingAuthorization, $capture);
         }
     }
 
@@ -449,74 +493,54 @@ class Authorization extends AbstractOperation
      * @param OrderInterface $order
      * @param OrderPaymentInterface $payment
      * @param PendingAuthorizationInterface $pendingAuthorization
+     * @param $capture
      * @throws \Magento\Framework\Exception\NoSuchEntityException
      */
     protected function requestNewAuthorization(
         OrderInterface $order,
         OrderPaymentInterface $payment,
-        PendingAuthorizationInterface $pendingAuthorization
-    ) {
-        $capture = false;
-
-        try {
-            $baseAmount = $payment->formatAmount($payment->getBaseAmountAuthorized());
-
-            $method = $payment->getMethodInstance();
-            $method->setStore($order->getStoreId());
-            $method->authorizeInCron($payment, $baseAmount, $capture);
-
-            $transaction = $payment->addTransaction(Transaction::TYPE_AUTH);
-
-            $this->completePendingAuthorization(
-                $order,
-                $payment,
-                $pendingAuthorization,
-                $capture,
-                $transaction
-            );
-        } catch (SoftDeclineException $e) {
-            $this->softDeclinePendingAuthorization($order, $payment, $pendingAuthorization, $capture);
-        } catch (\Exception $e) {
-            $this->hardDeclinePendingAuthorization($order, $payment, $pendingAuthorization, $capture);
-        }
-    }
-
-    /**
-     * Attempts to authorize and capture a pending transaction during cron.
-     *
-     * @param OrderInterface $order
-     * @param OrderPaymentInterface $payment
-     * @param PendingAuthorizationInterface $pendingAuthorization
-     * @throws Exception
-     * @throws \Magento\Framework\Exception\NoSuchEntityException
-     */
-    protected function requestNewAuthorizationAndCapture(
-        OrderInterface $order,
-        OrderPaymentInterface $payment,
-        PendingAuthorizationInterface $pendingAuthorization
+        PendingAuthorizationInterface $pendingAuthorization,
+        $capture = false
     ) {
-        $capture = true;
-
         try {
-            $invoice = $this->getInvoice($pendingAuthorization->getCaptureId(), $order);
-
-            $baseAmount = $payment->formatAmount($invoice->getBaseGrandTotal());
-
-            $method = $payment->getMethodInstance();
-            $method->setStore($order->getStoreId());
-            $method->authorizeInCron($payment, $baseAmount, $capture);
+            if ($capture) {
+                $invoice = $this->getInvoice($pendingAuthorization->getCaptureId(), $order);
+                $baseAmount = $payment->formatAmount($invoice->getBaseGrandTotal());
+            } else {
+                $baseAmount = $payment->formatAmount($payment->getBaseAmountAuthorized());
+            }
 
-            $transaction = $payment->addTransaction(Transaction::TYPE_CAPTURE, $invoice, true);
+            $data = [
+                'amazon_order_reference_id' => $order->getExtensionAttributes()
+                    ->getAmazonOrderReferenceId()
+                    ->getAmazonOrderReferenceId(),
+                'amount' => $baseAmount,
+                'currency_code' => $order->getOrderCurrencyCode()
+            ];
+            $response = $this->amazonPaymentAdapter->authorize($data, $capture, 1);
+            if ($response['response_code'] != 'TransactionTimedOut') {
+                throw new Exception('Unexpected Authorization status for asynchronous authorization');
+            }
+            $newAuthorization = $this->pendingAuthorizationFactory->create()
+                ->setAuthorizationId($response['authorize_transaction_id'])
+                ->setCapture($capture);
+            if ($capture) {
+                $newAuthorization->setCaptureId($response['capture_transaction_id']);
+                $invoice->setTransactionId($response['capture_transaction_id'])
+                    ->save();
+                $payment->setTransactionId($response['capture_transaction_id']);
+                $payment->setParentTransactionId($response['authorize_transaction_id']);
+                $payment->addTransaction(Transaction::TYPE_CAPTURE, $invoice, true)
+                    ->save();
+            } else {
+                $payment->setTransactionId($response['authorize_transaction_id']);
+                $payment->addTransaction(Transaction::TYPE_AUTH, null, true)
+                    ->save();
+            }
+            $payment->save();
+            $newAuthorization->save();
+            $pendingAuthorization->delete();
 
-            $this->completePendingAuthorization(
-                $order,
-                $payment,
-                $pendingAuthorization,
-                $capture,
-                $transaction
-            );
-        } catch (SoftDeclineException $e) {
-            $this->softDeclinePendingAuthorization($order, $payment, $pendingAuthorization, $capture);
         } catch (\Exception $e) {
             $this->hardDeclinePendingAuthorization($order, $payment, $pendingAuthorization, $capture);
         }

--- a/Model/PaymentManagement/Capture.php
+++ b/Model/PaymentManagement/Capture.php
@@ -221,6 +221,9 @@ class Capture extends AbstractOperation
         $transaction = $this->paymentManagement->getTransaction($transactionId, $payment, $order);
         $invoice = $this->getInvoice($transactionId, $order);
         $formattedAmount = $order->getBaseCurrency()->formatTxt($invoice->getBaseGrandTotal());
+        if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+            $formattedAmount = $formattedAmount .' ['. $order->formatPriceTxt($payment->getGrandTotal()) .']';
+        }
         $message = __('Captured amount of %1 online', $formattedAmount);
 
         $this->getInvoiceAndSetPaid($transactionId, $order);
@@ -242,6 +245,9 @@ class Capture extends AbstractOperation
         $transaction = $this->paymentManagement->getTransaction($transactionId, $payment, $order);
         $invoice = $this->getInvoice($transactionId, $order);
         $formattedAmount = $order->getBaseCurrency()->formatTxt($invoice->getBaseGrandTotal());
+        if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+            $formattedAmount = $formattedAmount .' ['. $order->formatPriceTxt($payment->getGrandTotal()) .']';
+        }
         $message = __('Declined amount of %1 online', $formattedAmount);
 
         $this->getInvoiceAndSetCancelled($transactionId, $order);

--- a/Observer/IgnoreBillingAddressValidation.php
+++ b/Observer/IgnoreBillingAddressValidation.php
@@ -26,6 +26,7 @@ class IgnoreBillingAddressValidation implements ObserverInterface
         $quote = $observer->getEvent()->getQuote();
         if (AmazonPayment::CODE === $quote->getPayment()->getMethod()) {
             $quote->getBillingAddress()->setShouldIgnoreValidation(true);
+            $quote->getShippingAddress()->setShouldIgnoreValidation(true);
         }
     }
 }

--- /dev/null
+++ b/Observer/OrderPaymentCapture.php
@@ -0,0 +1,39 @@
+<?php
+/**
+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Observer;
+
+
+use Magento\Framework\Event\Observer;
+use Magento\Framework\Event\ObserverInterface;
+
+/**
+ * Class OrderPaymentCapture
+ * @package Amazon\Payment\Observer
+ */
+class OrderPaymentCapture implements ObserverInterface
+{
+    /**
+     * @param Observer $observer
+     */
+    public function execute(Observer $observer)
+    {
+        $payment = $observer->getPayment();
+        $invoice = $observer->getInvoice();
+
+        // set custom invoice amount on the payment in the display currency, as Magento does everything on the base currency
+        $payment->setAmazonDisplayInvoiceAmount($invoice->getGrandTotal());
+    }
+}

--- a/Plugin/CheckoutProcessor.php
+++ b/Plugin/CheckoutProcessor.php
@@ -62,12 +62,6 @@ class CheckoutProcessor
         ['children']['payment'];
 
         if (!$quote->isVirtual() && $this->amazonHelper->isPwaEnabled()) {
-            $shippingConfig['component'] = 'Amazon_Payment/js/view/shipping';
-            $shippingConfig['children']['customer-email']['component'] = 'Amazon_Payment/js/view/form/element/email';
-            $shippingConfig['children']['address-list']['component'] = 'Amazon_Payment/js/view/shipping-address/list';
-            $shippingConfig['children']['shipping-address-fieldset']['children']
-            ['inline-form-manipulator']['component'] = 'Amazon_Payment/js/view/shipping-address/inline-form';
-
             $paymentConfig['children']['payments-list']['component'] = 'Amazon_Payment/js/view/payment/list';
         } else {
             unset($shippingConfig['children']['customer-email']['children']['amazon-button-region']);

--- a/Plugin/ConfirmOrderReference.php
+++ b/Plugin/ConfirmOrderReference.php
@@ -25,11 +25,11 @@ use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
 use Amazon\Payment\Model\OrderInformationManagement;
 use Magento\Quote\Api\Data\PaymentInterface;
 use Magento\Quote\Api\Data\AddressInterface;
+use Magento\Framework\Webapi\Rest\Request;
 use Magento\Framework\Exception\LocalizedException;
 use Amazon\Payment\Gateway\Config\Config as GatewayConfig;
 use Magento\Quote\Api\CartRepositoryInterface;
 
-
 /**
  * Class ConfirmOrderReference
  *
@@ -42,6 +42,11 @@ class ConfirmOrderReference
      */
     private $checkoutSession;
 
+    /**
+     * @var Request
+     */
+    private $request;
+
     /**
      * @var OrderInformationManagement
      */
@@ -55,19 +60,31 @@ class ConfirmOrderReference
     /**
      * ConfirmOrderReference constructor.
      * @param Session $checkoutSession
+     * @param Request $request
      * @param OrderInformationManagement $orderInformationManagement
      * @param CartRepositoryInterface $quoteRepository
      */
     public function __construct(
         Session $checkoutSession,
+        Request $request,
         OrderInformationManagement $orderInformationManagement,
         CartRepositoryInterface $quoteRepository
     ) {
         $this->checkoutSession = $checkoutSession;
+        $this->request = $request;
         $this->orderInformationManagement = $orderInformationManagement;
         $this->quoteRepository = $quoteRepository;
     }
 
+    /**
+     * @return boolean
+     */
+    protected function canConfirmOrderReference()
+    {
+        $data = $this->request->getRequestData();
+        return !empty($data['confirmOrder']);
+    }
+
     /**
      * @param PaymentMethodManagementInterface $subject
      * @param $result
@@ -83,19 +100,24 @@ class ConfirmOrderReference
         $cartId,
         PaymentInterface $paymentMethod
     ) {
-        if($paymentMethod->getMethod() == GatewayConfig::CODE) {
+        if ($paymentMethod->getMethod() == GatewayConfig::CODE) {
             $quote = $this->quoteRepository->get($cartId);
             $quoteExtensionAttributes = $quote->getExtensionAttributes();
-            if ($quoteExtensionAttributes) {
+            if ($quoteExtensionAttributes && $quoteExtensionAttributes->getAmazonOrderReferenceId()) {
                 $amazonOrderReferenceId = $quoteExtensionAttributes
                     ->getAmazonOrderReferenceId()
                     ->getAmazonOrderReferenceId();
 
-                $this->orderInformationManagement->saveOrderInformation($amazonOrderReferenceId);
-                $this->orderInformationManagement->confirmOrderReference(
-                    $amazonOrderReferenceId,
-                    $quote->getStoreId()
-                );
+                if (!$this->checkoutSession->getData('is_amazon_suspended')) {
+                    $this->orderInformationManagement->saveOrderInformation($amazonOrderReferenceId);
+                }
+
+                if ($this->canConfirmOrderReference()) {
+                    $this->orderInformationManagement->confirmOrderReference(
+                        $amazonOrderReferenceId,
+                        $quote->getStoreId()
+                    );
+                }
             }
         }
 

--- /dev/null
+++ b/Plugin/OrderCurrencyComment.php
@@ -0,0 +1,77 @@
+<?php
+/**
+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Plugin;
+
+use Magento\Framework\Phrase;
+use Magento\Sales\Model\Order\Payment;
+use Amazon\Payment\Gateway\Config\Config;
+
+/**
+ * Class OrderCurrencyComment
+ * @package Amazon\Payment\Plugin
+ */
+class OrderCurrencyComment
+{
+    /**
+     * @param Payment $subject
+     * @param $messagePrependTo
+     * @return array|null
+     */
+    public function beforePrependMessage(Payment $subject, $messagePrependTo)
+    {
+        if ($subject->getMethod() == Config::CODE) {
+            $order = $subject->getOrder();
+            if ($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()) {
+                if ($subject->getOrder()->getPayment()->getCreditmemo()) {
+                    $displayCurrencyAmount = $subject->getCreditmemo()->getGrandTotal();
+                }
+                else {
+                    $displayCurrencyAmount = $subject->getOrder()->getPayment()->getAmazonDisplayInvoiceAmount() ?: $subject->getAmountOrdered();
+                }
+                $messagePrependTo = __(
+                    $messagePrependTo->getText(),
+                    $order->getBaseCurrency()
+                        ->formatTxt($messagePrependTo->getArguments()[0]) .' ['. $order->formatPriceTxt($displayCurrencyAmount) .']'
+                );
+
+                return [$messagePrependTo];
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * @param Payment $subject
+     * @param $result
+     * @return string
+     */
+    public function afterFormatPrice(Payment $subject, $result)
+    {
+        if ($subject->getMethod() == Config::CODE) {
+            $order = $subject->getOrder();
+            if (($order->getBaseCurrencyCode() != $order->getOrderCurrencyCode()
+                && $subject->getMessage() instanceof Phrase
+                && $subject->getMessage()->getText() == 'Canceled order online')
+                || strpos($subject->getTransactionId(), '-void') !== FALSE
+            ) {
+                return $result .' ['. $order->formatPriceTxt($subject->getCreditmemo()->getGrandTotal()) .']';
+            }
+        }
+
+        return $result;
+    }
+}

--- a/Plugin/ShippingInformationManagement.php
+++ b/Plugin/ShippingInformationManagement.php
@@ -80,6 +80,10 @@ class ShippingInformationManagement
             return $return;
         }
 
+        if (!$quote->getExtensionAttributes()->getAmazonOrderReferenceId()) {
+            return $return;
+        }
+
         $amazonOrderReferenceId = $quote->getExtensionAttributes()
             ->getAmazonOrderReferenceId()
             ->getAmazonOrderReferenceId();
@@ -100,7 +104,7 @@ class ShippingInformationManagement
          *  the region_id is explicitly emptied, to prevent the old one being used.
          */
         $shippingAddress = $shippingInformation->getShippingAddress();
-        if(!$shippingAddress->hasData('region_id')) {
+        if (!$shippingAddress->hasData('region_id')) {
             $shippingAddress->setRegionId("");
         }
 

--- /dev/null
+++ b/Test/Mftf/ActionGroup/AmazonConfigActionGroup.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+/**
+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+-->
+<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
+    <actionGroup name="ConfigureEuroCurrency">
+        <magentoCLI command="config:set currency/options/base EUR" stepKey="setBaseCurrency"/>
+        <magentoCLI command="config:set currency/options/default EUR" stepKey="setDisplayCurrency"/>
+        <magentoCLI command="config:set currency/options/allow EUR,USD" stepKey="setAllowedCurrencies"/>
+    </actionGroup>
+</actionGroups>

--- a/Test/Mftf/ActionGroup/AmazonLoginActionGroup.xml
+++ b/Test/Mftf/ActionGroup/AmazonLoginActionGroup.xml
@@ -13,11 +13,11 @@
         <!--Save opener window name since popup auto-closes-->
         <executeJS function="return window.name;" stepKey="openerName"/>
 
-        <waitForPageLoad stepKey="waitForPageLoadPopup"/>
         <switchToWindow userInput="amazonloginpopup" stepKey="switchToWindowLoginpopup"/>
+        <waitForPageLoad stepKey="waitForPageLoadPopup"/>
 
         <!-- Fill in login form -->
-        <waitForElement selector="{{AmazonLoginSection.apEmail}}" time="10" stepKey="apWaitForLogin"/>
+        <waitForElement selector="{{AmazonLoginSection.apEmail}}" time="30" stepKey="apWaitForLogin"/>
         <fillField selector="{{AmazonLoginSection.apEmail}}" userInput="{{AmazonLogin.email}}" stepKey="apEnterEmail"/>
         <fillField selector="{{AmazonLoginSection.apPassword}}" userInput="{{AmazonLogin.password}}" stepKey="apEnterPassword"/>
         <click selector="{{AmazonLoginSection.apSignin}}" stepKey="clickSigninButton"/>
@@ -35,4 +35,4 @@
         <waitForPageLoad stepKey="waitForPageLoadLogin"/>
         <conditionalClick selector="{{AmazonLoginSection.apConsent}}" dependentSelector="{{AmazonLoginSection.apConsent}}" visible="true" stepKey="clickLoginConsent"/>
     </actionGroup>
-</actionGroups>
\ No newline at end of file
+</actionGroups>

--- /dev/null
+++ b/Test/Mftf/Data/AmazonAddressData.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+          xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataProfileSchema.xsd">
+    <!--"Fail Address" to trigger Magento shipping address validation error-->
+    <entity name="AmazonAddressFail" type="amazon_address">
+        <data key="country">BQ</data>
+        <data key="name">Bonaire International Airport</data>
+        <data key="address">Plasa Medardo SV Thielman 1</data>
+        <data key="city">Kralendijk</data>
+        <data key="region">Caribbean Netherlands</data>
+        <data key="postal">12345</data>
+        <data key="phone">+555 555 5555</data>
+    </entity>
+</entities>

--- /dev/null
+++ b/Test/Mftf/Data/AmazonCountryData.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataProfileSchema.xsd">
+    <entity name="SingleCountryAllowConfig" type="amazon_country_allow_config">
+        <requiredEntity type="allow">SingleCountryAllowValue</requiredEntity>
+    </entity>
+    <entity name="SingleCountryAllowValue" type="allow">
+        <data key="value">US</data>
+    </entity>
+    <entity name="DefaultCountryAllowConfig" type="default_amazon_country_allow_config">
+        <requiredEntity type="amazonCountryAllowFlagZero">DefaultCountryAllowFlagZero</requiredEntity>
+    </entity>
+    <entity name="DefaultCountryAllowFlagZero" type="amazonCountryAllowFlagZero">
+        <data key="value">1</data>
+    </entity>
+</entities>

--- /dev/null
+++ b/Test/Mftf/Data/AmazonCurrencyData.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataProfileSchema.xsd">
+    <entity name="AmazonAllowCurrencyValue" type="allow">
+        <array key="value">
+            <item>USD</item>
+            <item>EUR</item>
+        </array>
+    </entity>
+    <entity name="MultiInvoiceAmazonCurrencyConfig" type="amazon_currency_config">
+        <requiredEntity type="base">MultiInvoiceAmazonBaseCurrencyValue</requiredEntity>
+        <requiredEntity type="default">MultiInvoiceAmazonDefaultCurrencyValue</requiredEntity>
+        <requiredEntity type="allow">AmazonAllowCurrencyValue</requiredEntity>
+    </entity>
+    <entity name="MultiInvoiceAmazonBaseCurrencyValue" type="base">
+        <data key="value">USD</data>
+    </entity>
+    <entity name="MultiInvoiceAmazonDefaultCurrencyValue" type="default">
+        <data key="value">USD</data>
+    </entity>
+    <entity name="SingleInvoiceAmazonCurrencyConfig" type="amazon_currency_config">
+        <requiredEntity type="base">SingleInvoiceAmazonBaseCurrencyValue</requiredEntity>
+        <requiredEntity type="default">SingleInvoiceAmazonDefaultCurrencyValue</requiredEntity>
+        <requiredEntity type="allow">AmazonAllowCurrencyValue</requiredEntity>
+    </entity>
+    <entity name="SingleInvoiceAmazonBaseCurrencyValue" type="base">
+        <data key="value">EUR</data>
+    </entity>
+    <entity name="SingleInvoiceAmazonDefaultCurrencyValue" type="default">
+        <data key="value">EUR</data>
+    </entity>
+    <entity name="DefaultAmazonCurrencyConfig" type="default_amazon_currency_config">
+        <requiredEntity type="amazonCurrencyBaseFlagZero">DefaultAmazonCurrencyBaseFlagZero</requiredEntity>
+        <requiredEntity type="amazonCurrencyDefaultFlagZero">DefaultAmazonCurrencyDefaultFlagZero</requiredEntity>
+        <requiredEntity type="amazonCurrencyAllowFlagZero">DefaultAmazonCurrencyAllowFlagZero</requiredEntity>
+    </entity>
+    <entity name="DefaultAmazonCurrencyBaseFlagZero" type="amazonCurrencyBaseFlagZero">
+        <data key="value">1</data>
+    </entity>
+    <entity name="DefaultAmazonCurrencyDefaultFlagZero" type="amazonCurrencyDefaultFlagZero">
+        <data key="value">1</data>
+    </entity>
+    <entity name="DefaultAmazonCurrencyAllowFlagZero" type="amazonCurrencyAllowFlagZero">
+        <data key="value">1</data>
+    </entity>
+</entities>

--- a/Test/Mftf/Data/AmazonLoginData.xml
+++ b/Test/Mftf/Data/AmazonLoginData.xml
@@ -2,7 +2,7 @@
 <entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:noNamespaceSchemaLocation="../../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/DataGenerator/etc/dataProfileSchema.xsd">
     <entity name="AmazonLogin" type="amazon_login">
-        <data key="email">payment-test@amazon.com</data>
-        <data key="password">test123</data>
+        <data key="email">{{_CREDS.amazon/test_account_eu_email}}</data>
+        <data key="password">{{_CREDS.amazon/test_account_eu_password}}</data>
     </entity>
 </entities>

--- a/Test/Mftf/Data/AmazonPaymentData.xml
+++ b/Test/Mftf/Data/AmazonPaymentData.xml
@@ -11,24 +11,26 @@
         <requiredEntity type="sandbox">SampleAmazonSandbox</requiredEntity>
         <requiredEntity type="payment_action">SampleAmazonPaymentAction</requiredEntity>
         <requiredEntity type="authorization_mode">SampleAmazonAuthorizationMode</requiredEntity>
+        <requiredEntity type="amazon_pay_active">SampleAmazonPayActive</requiredEntity>
+        <requiredEntity type="lwa_enabled">SampleAmazonLwaEnabled</requiredEntity>
     </entity>
     <entity name="SampleAmazonMerchantId" type="merchant_id">
-        <data key="value">someMerchantId</data>
+        <data key="value">{{_CREDS.amazon/v1_merchant_id}}</data>
     </entity>
     <entity name="SampleAmazonAccessKey" type="access_key">
-        <data key="value">someAccessKey</data>
+        <data key="value">{{_CREDS.amazon/v1_access_key}}</data>
     </entity>
     <entity name="SampleAmazonSecretKey" type="secret_key">
-        <data key="value">someSecretKey</data>
+        <data key="value">{{_CREDS.amazon/v1_secret_key}}</data>
     </entity>
     <entity name="SampleAmazonClientId" type="client_id">
-        <data key="value">someClientId</data>
+        <data key="value">{{_CREDS.amazon/v1_client_id}}</data>
     </entity>
     <entity name="SampleAmazonClientSecret" type="client_secret">
-        <data key="value">someClientSecretKey</data>
+        <data key="value">{{_CREDS.amazon/v1_client_secret}}</data>
     </entity>
     <entity name="SampleAmazonPaymentRegion" type="payment_region">
-        <data key="value">us</data>
+        <data key="value">{{_CREDS.amazon/v1_region}}</data>
     </entity>
     <entity name="SampleAmazonSandbox" type="sandbox">
         <data key="value">1</data>
@@ -39,6 +41,76 @@
     <entity name="SampleAmazonAuthorizationMode" type="authorization_mode">
         <data key="value">synchronous</data>
     </entity>
+    <entity name="SampleAmazonPayActive" type="amazon_pay_active">
+        <data key="value">1</data>
+    </entity>
+    <entity name="SampleAmazonLwaEnabled" type="lwa_enabled">
+        <data key="value">1</data>
+    </entity>
+    <!-- Partial capture support configuration -->
+    <entity name="MultiInvoiceAmazonPaymentConfig" type="amazon_payment_config_state">
+        <requiredEntity type="merchant_id">MultiInvoiceAmazonMerchantId</requiredEntity>
+        <requiredEntity type="access_key">MultiInvoiceAmazonAccessKey</requiredEntity>
+        <requiredEntity type="secret_key">MultiInvoiceAmazonSecretKey</requiredEntity>
+        <requiredEntity type="client_id">MultiInvoiceAmazonClientId</requiredEntity>
+        <requiredEntity type="client_secret">MultiInvoiceAmazonClientSecret</requiredEntity>
+        <requiredEntity type="payment_region">MultiInvoiceAmazonPaymentRegion</requiredEntity>
+        <requiredEntity type="sandbox">SampleAmazonSandbox</requiredEntity>
+        <requiredEntity type="payment_action">SampleAmazonPaymentAction</requiredEntity>
+        <requiredEntity type="authorization_mode">SampleAmazonAuthorizationMode</requiredEntity>
+        <requiredEntity type="amazon_pay_active">SampleAmazonPayActive</requiredEntity>
+        <requiredEntity type="lwa_enabled">DefaultAmazonLwaEnabled</requiredEntity>
+    </entity>
+    <entity name="MultiInvoiceAmazonMerchantId" type="merchant_id">
+        <data key="value">{{_CREDS.amazon/v1_multi_invoice_merchant_id}}</data>
+    </entity>
+    <entity name="MultiInvoiceAmazonAccessKey" type="access_key">
+        <data key="value">{{_CREDS.amazon/v1_multi_invoice_access_key}}</data>
+    </entity>
+    <entity name="MultiInvoiceAmazonSecretKey" type="secret_key">
+        <data key="value">{{_CREDS.amazon/v1_multi_invoice_secret_key}}</data>
+    </entity>
+    <entity name="MultiInvoiceAmazonClientId" type="client_id">
+        <data key="value">{{_CREDS.amazon/v1_multi_invoice_client_id}}</data>
+    </entity>
+    <entity name="MultiInvoiceAmazonClientSecret" type="client_secret">
+        <data key="value">{{_CREDS.amazon/v1_multi_invoice_client_secret}}</data>
+    </entity>
+    <entity name="MultiInvoiceAmazonPaymentRegion" type="payment_region">
+        <data key="value">{{_CREDS.amazon/v1_multi_invoice_region}}</data>
+    </entity>
+    <!-- No partial capture support configuration -->
+    <entity name="SingleInvoiceAmazonPaymentConfig" type="amazon_payment_config_state">
+        <requiredEntity type="merchant_id">SingleInvoiceAmazonMerchantId</requiredEntity>
+        <requiredEntity type="access_key">SingleInvoiceAmazonAccessKey</requiredEntity>
+        <requiredEntity type="secret_key">SingleInvoiceAmazonSecretKey</requiredEntity>
+        <requiredEntity type="client_id">SingleInvoiceAmazonClientId</requiredEntity>
+        <requiredEntity type="client_secret">SingleInvoiceAmazonClientSecret</requiredEntity>
+        <requiredEntity type="payment_region">SingleInvoiceAmazonPaymentRegion</requiredEntity>
+        <requiredEntity type="sandbox">SampleAmazonSandbox</requiredEntity>
+        <requiredEntity type="payment_action">SampleAmazonPaymentAction</requiredEntity>
+        <requiredEntity type="authorization_mode">SampleAmazonAuthorizationMode</requiredEntity>
+        <requiredEntity type="amazon_pay_active">SampleAmazonPayActive</requiredEntity>
+        <requiredEntity type="lwa_enabled">DefaultAmazonLwaEnabled</requiredEntity>
+    </entity>
+    <entity name="SingleInvoiceAmazonMerchantId" type="merchant_id">
+        <data key="value">{{_CREDS.amazon/v1_single_invoice_merchant_id}}</data>
+    </entity>
+    <entity name="SingleInvoiceAmazonAccessKey" type="access_key">
+        <data key="value">{{_CREDS.amazon/v1_single_invoice_access_key}}</data>
+    </entity>
+    <entity name="SingleInvoiceAmazonSecretKey" type="secret_key">
+        <data key="value">{{_CREDS.amazon/v1_single_invoice_secret_key}}</data>
+    </entity>
+    <entity name="SingleInvoiceAmazonClientId" type="client_id">
+        <data key="value">{{_CREDS.amazon/v1_single_invoice_client_id}}</data>
+    </entity>
+    <entity name="SingleInvoiceAmazonClientSecret" type="client_secret">
+        <data key="value">{{_CREDS.amazon/v1_single_invoice_client_secret}}</data>
+    </entity>
+    <entity name="SingleInvoiceAmazonPaymentRegion" type="payment_region">
+        <data key="value">{{_CREDS.amazon/v1_single_invoice_region}}</data>
+    </entity>
     <!-- default configuration used to restore Magento config -->
     <entity name="DefaultAmazonPaymentConfig" type="amazon_payment_config_state">
         <requiredEntity type="merchant_id">DefaultAmazonMerchantId</requiredEntity>
@@ -50,6 +122,8 @@
         <requiredEntity type="sandbox">DefaultAmazonSandbox</requiredEntity>
         <requiredEntity type="payment_action">DefaultAmazonPaymentAction</requiredEntity>
         <requiredEntity type="authorization_mode">DefaultAmazonAuthorizationMode</requiredEntity>
+        <requiredEntity type="amazon_pay_active">DefaultAmazonPayActive</requiredEntity>
+        <requiredEntity type="lwa_enabled">DefaultAmazonLwaEnabled</requiredEntity>
     </entity>
     <entity name="DefaultAmazonMerchantId" type="merchant_id">
         <data key="value"/>
@@ -78,4 +152,10 @@
     <entity name="DefaultAmazonAuthorizationMode" type="authorization_mode">
         <data key="value">synchronous</data>
     </entity>
+    <entity name="DefaultAmazonPayActive" type="amazon_pay_active">
+        <data key="value">0</data>
+    </entity>
+    <entity name="DefaultAmazonLwaEnabled" type="lwa_enabled">
+        <data key="value">0</data>
+    </entity>
 </entities>

--- /dev/null
+++ b/Test/Mftf/Metadata/amazon_country_config-meta.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<operations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataOperation.xsd">
+    <operation name="AmazonCountryAllowConfig" dataType="amazon_country_allow_config" type="create" auth="adminFormKey" url="/admin/system_config/save/section/general/" method="POST">
+        <object key="groups" dataType="amazon_country_allow_config">
+            <object key="country" dataType="amazon_country_allow_config">
+                <object key="fields" dataType="amazon_country_allow_config">
+                    <object key="allow" dataType="allow">
+                        <field key="value">string</field>
+                    </object>
+                </object>
+            </object>
+        </object>
+    </operation>
+    <operation name="DefaultAmazonCountryAllowConfig" dataType="default_amazon_country_allow_config" type="create" auth="adminFormKey" url="/admin/system_config/save/section/general/" method="POST">
+        <object key="groups" dataType="default_amazon_country_allow_config">
+            <object key="country" dataType="default_amazon_country_allow_config">
+                <object key="fields" dataType="default_amazon_country_allow_config">
+                    <object key="allow" dataType="default_amazon_country_allow_config">
+                        <object key="inherit" dataType="amazonCountryAllowFlagZero">
+                            <field key="value">integer</field>
+                        </object>
+                    </object>
+                </object>
+            </object>
+        </object>
+    </operation>
+</operations>

--- /dev/null
+++ b/Test/Mftf/Metadata/amazon_currency_config-meta.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<operations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:DataGenerator/etc/dataOperation.xsd">
+    <operation name="AmazonCurrencyConfig" dataType="amazon_currency_config" type="create" auth="adminFormKey" url="/admin/system_config/save/section/currency/" method="POST">
+        <object key="groups" dataType="amazon_currency_config">
+            <object key="options" dataType="amazon_currency_config">
+                <object key="fields" dataType="amazon_currency_config">
+                    <object key="base" dataType="base">
+                        <field key="value">string</field>
+                    </object>
+                    <object key="default" dataType="default">
+                        <field key="value">string</field>
+                    </object>
+                    <object key="allow" dataType="allow">
+                        <array key="value">
+                            <value>string</value>
+                        </array>
+                    </object>
+                </object>
+            </object>
+        </object>
+    </operation>
+    <operation name="DefaultAmazonCurrencyConfig" dataType="default_amazon_currency_config" type="create" auth="adminFormKey" url="/admin/system_config/save/section/currency/" method="POST">
+        <object key="groups" dataType="default_amazon_currency_config">
+            <object key="options" dataType="default_amazon_currency_config">
+                <object key="fields" dataType="default_amazon_currency_config">
+                    <object key="base" dataType="default_amazon_currency_config">
+                        <object key="inherit" dataType="amazonCurrencyBaseFlagZero">
+                            <field key="value">integer</field>
+                        </object>
+                    </object>
+                    <object key="default" dataType="default_amazon_currency_config">
+                        <object key="inherit" dataType="amazonCurrencyDefaultFlagZero">
+                            <field key="value">integer</field>
+                        </object>
+                    </object>
+                    <object key="allow" dataType="default_amazon_currency_config">
+                        <object key="inherit" dataType="amazonCurrencyAllowFlagZero">
+                            <field key="value">integer</field>
+                        </object>
+                    </object>
+                </object>
+            </object>
+        </object>
+    </operation>
+</operations>

--- a/Test/Mftf/Metadata/amazon_payment_config-meta.xml
+++ b/Test/Mftf/Metadata/amazon_payment_config-meta.xml
@@ -36,8 +36,18 @@
                             </object>
                         </object>
                     </object>
+                    <object key="options" dataType="amazon_payment_config_state">
+                        <object key="fields" dataType="amazon_payment_config_state">
+                            <object key="active" dataType="amazon_pay_active">
+                                <field key="value">string</field>
+                            </object>
+                            <object key="lwa_enabled" dataType="lwa_enabled">
+                                <field key="value">string</field>
+                            </object>
+                        </object>
+                    </object>
                 </object>
             </object>
         </object>
     </operation>
-</operations>
\ No newline at end of file
+</operations>

--- /dev/null
+++ b/Test/Mftf/Section/AmazonAddressSection.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ /**
+  * Copyright © Magento, Inc. All rights reserved.
+  * See COPYING.txt for license details.
+  */
+-->
+
+<sections xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/sectionObjectSchema.xsd">
+    <!--Amazon New Address Widget-->
+    <section name="AmazonAddressSection">
+        <element name="country" type="select" selector="address-ui-widgets-countryCode-dropdown-nativeId"/>
+        <element name="name" type="input" selector="#address-ui-widgets-enterAddressFullName"/>
+        <element name="address" type="input" selector="#address-ui-widgets-enterAddressLine1"/>
+        <element name="city" type="input" selector="#address-ui-widgets-enterAddressCity"/>
+        <element name="region" type="input" selector="#address-ui-widgets-enterAddressStateOrRegion"/>
+        <element name="postal" type="input" selector="#address-ui-widgets-enterAddressPostalCode"/>
+        <element name="phone" type="input" selector="#address-ui-widgets-enterAddressPhoneNumber"/>
+        <element name="submit" type="button" selector="[type=submit]"/>
+    </section>
+</sections>

--- a/Test/Mftf/Section/AmazonCheckoutSection.xml
+++ b/Test/Mftf/Section/AmazonCheckoutSection.xml
@@ -9,10 +9,11 @@
 <sections xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/sectionObjectSchema.xsd">
     <section name="AmazonCheckoutSection">
-        <element name="cartPayButton" type="img" selector="#PayWithAmazon-checkout-cart-shortcut-buttons img"/>
-        <element name="miniCartPayButton" type="img" selector="#minicart-amazon-pay-button img"/>
-        <element name="productPayButton" type="div" selector="#amazon-addtoCart-amazon-pay-button-product"/>
-        <element name="checkoutPayButton" type="img" selector=".amazon-button-container img"/>
-        <element name="loginButton" type="img" selector="#LoginWithAmazon-amazon-login img"/>
+        <element name="cartPayButton" type="button" selector="#PayWithAmazon-checkout-cart-shortcut-buttons img"/>
+        <element name="miniCartPayButton" type="button" selector="#minicart-amazon-pay-button img"/>
+        <element name="productPayButton" type="button" selector="#amazon-addtoCart-amazon-pay-button-product"/>
+        <element name="checkoutPayButton" type="button" selector=".amazon-button-container img"/>
+        <element name="loginButton" type="button" selector="#LoginWithAmazon-amazon-login img"/>
+        <element name="addNewAddress" type="block" selector=".footer .info a"/>
     </section>
 </sections>

--- a/Test/Mftf/Section/AmazonLoginSection.xml
+++ b/Test/Mftf/Section/AmazonLoginSection.xml
@@ -11,7 +11,7 @@
     <section name="AmazonLoginSection">
         <element name="apEmail" type="input" selector="#ap_email"/>
         <element name="apPassword" type="input" selector="#ap_password"/>
-        <element name="apSignin" type="button" selector="#signInSubmit button"/>
+        <element name="apSignin" type="button" selector="#signInSubmit"/>
         <element name="apConsent" type="button" selector="[name=consentApproved]"/>
     </section>
 </sections>

--- a/Test/Mftf/Test/AmazonCheckoutDeclineTest.xml
+++ b/Test/Mftf/Test/AmazonCheckoutDeclineTest.xml
@@ -15,10 +15,19 @@
             <description value="Test CC decline message and then success page elements for placed order with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
         <!--Place order with invalid test CC#-->
@@ -26,7 +35,7 @@
             <argument name="cc" value="4545" />
         </actionGroup>
         <!--Decline Error Message-->
-        <waitForText userInput="Invalid payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+        <waitForText userInput="Please select a payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
         <!--Use default CC#-->
         <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupGood"/>
         <!--See success message-->
@@ -39,9 +48,6 @@
             <description value="Test CC decline message and then success page elements for placed order with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
@@ -51,16 +57,6 @@
         </actionGroup>
         <!--Decline Error Message-->
         <waitForText userInput="There has been a problem with the selected payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
-        <!--Verify iframe wallet message-->
-        <executeJS function="return window.name;" stepKey="topName"/>
-        <executeJS function="return jQuery('#walletWidgetDiv iframe').attr('name');" stepKey="iframeName"/>
-        <switchToIFrame userInput="{$iframeName}" stepKey="switchToIFramePaymentWidget"/>
-        <see selector=".action a" userInput="Verify card info or use another card" stepKey="seeVerify"/>
-        <switchToWindow userInput="{$topName}" stepKey="switchToWindowTop" />
-        <!--Use default CC# using reloaded iframe-->
-        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupGood"/>
-        <!--See success message-->
-        <see selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
     </test>
     <test name="AmazonCheckoutDeclineAmazonRejected" extends="AmazonCheckoutAddProductDetail">
         <annotations>
@@ -69,10 +65,19 @@
             <description value="Test CC decline message, logout, and redirect to cart with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
         <!--Place order with invalid test CC#-->
@@ -81,28 +86,29 @@
         </actionGroup>
         <!--Decline Error Message-->
         <waitForText userInput="please choose another payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>        <!--Verify iframe wallet message-->
-        <!--Wait for redirect to cart-->
-        <wait time="5" stepKey="waitRedirect"/>
         <seeInCurrentUrl url="{{CheckoutCartPage.url}}" stepKey="assertUrl"/>
-        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
-        <!--Confirm logged out from Amazon by logging in (popup)-->
-        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
-        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
     </test>
     <test name="AmazonCheckoutDeclineTransactionTimedOutInstant" extends="AmazonCheckoutAddProductDetail">
-        <before>
-            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode synchronous" />
-        </before>
         <annotations>
             <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
             <title value="Amazon Pay Decline TransactionTimedOut with Instant Authorization"/>
             <description value="Test CC timeout message with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
+
+        <before>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode synchronous" />
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
         <!--Place order with invalid test CC#-->
@@ -116,22 +122,27 @@
         <seeInCurrentUrl url="{{CheckoutCartPage.url}}" stepKey="assertUrl"/>
     </test>
     <test name="AmazonCheckoutDeclineTransactionTimedOutAutomatic" extends="AmazonCheckoutAddProductDetail">
-        <before>
-            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode asynchronous" />
-        </before>
-        <after>
-            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode synchronous" />
-        </after>
         <annotations>
             <stories value="Test decline error messages using sandbox CC# with Amazon Pay"/>
             <title value="Amazon Pay Decline TransactionTimedOut with Automatic Authorization)"/>
             <description value="Test CC timeout message with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
+
+        <before>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode asynchronous" />
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI stepKey="setAuthMode" command="config:set payment/amazon_payment/authorization_mode synchronous" />
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
         <!--Place order with invalid test CC#-->
@@ -149,10 +160,19 @@
             <description value="Perform checkout from cart page and ensure SCA Abandoned page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_sca"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
         <!--Go to Cart-->
         <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
 
@@ -169,7 +189,7 @@
             <argument name="cc" value="4440" />
         </actionGroup>
         <!--Transaction declined error message-->
-        <waitForText userInput="The SCA challenge was not completed successfully." selector="#checkoutError" stepKey="waitForText"/>
+        <waitForText userInput="Something's wrong with your payment method." selector=".message" stepKey="waitForText"/>
     </test>
     <test name="AmazonCheckoutSCAFailure" extends="AmazonCheckoutAddProduct">
         <annotations>
@@ -179,10 +199,19 @@
             <description value="Perform checkout from cart page and ensure SCA Failure page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_sca"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
         <!--Go to Cart-->
         <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
 
@@ -199,6 +228,53 @@
             <argument name="cc" value="8320" />
         </actionGroup>
         <!--Transaction declined error message-->
-        <waitForText userInput="Amazon Pay was unable to authenticate the payment instrument." selector="#checkoutError" stepKey="waitForText"/>
+        <waitForText userInput="There was a problem with your payment." selector=".message" stepKey="waitForText"/>
+    </test>
+    <test name="AmazonCheckoutAddressFailure" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <stories value="Test new shipping address validation"/>
+            <title value="Amazon Pay Invalid Shipping Address"/>
+            <description value="Adds an invalid address to Amazon Address widget to test Magento shipping address validation"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_decline"/>
+        </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <createData entity="SingleCountryAllowConfig" stepKey="SingleCountryAllowConfig"/>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultCountryAllowConfig" stepKey="DefaultCountryAllowConfig"/>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
+        <!--Save opener window name since popup auto-closes-->
+        <executeJS function="return window.name;" stepKey="openerName"/>
+        <!--Get address widget iframe name (dynamic)-->
+        <executeJS function="return jQuery('#addressBookWidgetDiv iframe').attr('name');" stepKey="iframeName"/>
+        <switchToIFrame userInput="{$iframeName}" stepKey="switchToIFrameWidget"/>
+        <!--Open new address pop-up-->
+        <click selector="{{AmazonCheckoutSection.addNewAddress}}" stepKey="clickAddNew"/>
+        <waitForPageLoad stepKey="waitForPageLoadPopup"/>
+        <executeJS function="return document.getElementById('addShippingAddressForm').target;" stepKey="windowAddressName"/>
+        <switchToWindow userInput="{$windowAddressName}" stepKey="switchToWindowAddress"/>
+        <waitForElement selector="{{AmazonAddressSection.name}}" time="10" stepKey="apWait"/>
+        <!--Add new address-->
+        <!--Select is hidden, so must change with JS-->
+        <executeJS function="document.getElementById('{{AmazonAddressSection.country}}').value = '{{AmazonAddressFail.country}}'" stepKey="apcountry"/>
+        <fillField selector="{{AmazonAddressSection.name}}" userInput="{{AmazonAddressFail.name}}" stepKey="enterName"/>
+        <fillField selector="{{AmazonAddressSection.address}}" userInput="{{AmazonAddressFail.address}}" stepKey="enterAddress"/>
+        <fillField selector="{{AmazonAddressSection.city}}" userInput="{{AmazonAddressFail.city}}" stepKey="enterCity"/>
+        <fillField selector="{{AmazonAddressSection.region}}" userInput="{{AmazonAddressFail.region}}" stepKey="enterRegion"/>
+        <fillField selector="{{AmazonAddressSection.postal}}" userInput="{{AmazonAddressFail.postal}}" stepKey="enterPostal"/>
+        <fillField selector="{{AmazonAddressSection.phone}}" userInput="{{AmazonAddressFail.phone}}" stepKey="enterPhone"/>
+        <click selector="{{AmazonAddressSection.submit}}" stepKey="clickAddAddressButton"/>
+        <!--Switch back to Magento and detect error from new address-->
+        <switchToWindow userInput="{$openerName}" stepKey="switchToWindowOpener" />
+        <waitForText userInput="The country associated with your address is not allowed" selector=".message" stepKey="waitForText"/>
     </test>
 </tests>

--- a/Test/Mftf/Test/AmazonCheckoutSuccessTest.xml
+++ b/Test/Mftf/Test/AmazonCheckoutSuccessTest.xml
@@ -16,26 +16,27 @@
             <description value="Creates and loads simple product and adds it to cart using Amazon Pay button on product detail page."/>
             <severity value="BLOCKER"/>
             <group value="amazon_checkout"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
 
         <before>
             <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
             <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
         </before>
 
         <after>
             <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
         </after>
 
         <!--Go to product page-->
         <amOnPage url="$$createSimpleProduct.custom_attributes[url_key]$$.html" stepKey="navigateToSimpleProductPage"/>
-        <waitForPageLoad stepKey="waitForPageLoadCatalog"/>
+        <waitForPageLoad stepKey="waitForPageLoadCatalog" time="30"/>
 
         <!--Add to cart via Amazon Pay button on product page-->
-        <waitForElement selector="{{AmazonCheckoutSection.productPayButton}}" time="5" stepKey="apWaitForPayButton"/>
+        <waitForElement selector="{{AmazonCheckoutSection.productPayButton}}" time="30" stepKey="apWaitForPayButton"/>
+        <waitForElement selector="#OffAmazonPaymentsWidgets0" time="30" stepKey="apWaitForPayButton2"/>
+        <waitForJS function="return document.getElementById('{{AmazonCheckoutSection.productPayButton}}'.substr(1)).clientHeight > 10;" stepKey="waitForPayButtonClickable" />
         <click selector="{{AmazonCheckoutSection.productPayButton}}" stepKey="clickProductPayButton"/>
 
         <!--Login (redirect)-->
@@ -49,18 +50,17 @@
             <description value="Adds product to cart."/>
             <severity value="BLOCKER"/>
             <group value="amazon_checkout"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
 
         <before>
             <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
             <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
         </before>
 
         <after>
             <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
         </after>
 
         <!--Go to product page-->
@@ -80,14 +80,267 @@
             <description value="Perform checkout from product details page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
 
         <!--Place order-->
         <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
     </test>
+    <test name="AmazonCheckoutDisplayLanguage" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Complete checkout with non-default display language setting"/>
+            <title value="Amazon Pay Checkout Display Language"/>
+            <description value="Perform checkout with non-default display language and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+        </annotations>
+
+        <before>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <magentoCLI command="config:set payment/amazon_payment/button_display_language de_DE" stepKey="setDeDisplayLanguage"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="config:set payment/amazon_payment/button_display_language ''" stepKey="setDeDisplayLanguage"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutFreeShipping" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Complete checkout with free shipping"/>
+            <title value="Amazon Pay Checkout Free Shipping"/>
+            <description value="Perform checkout with free shipping"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+        </annotations>
+
+        <before>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
+            <magentoCLI command="config:set carriers/freeshipping/active 1" stepKey="enableFreeShipping"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <magentoCLI command="config:set carriers/freeshipping/active 0" stepKey="disableFreeShipping"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutConfigurableProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Complete checkout with configurable product"/>
+            <title value="Amazon Pay Checkout Configurable Product"/>
+            <description value="Perform checkout with configurable product and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+        </annotations>
+
+        <before>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <!-- Create Default Category -->
+            <createData entity="_defaultCategory" stepKey="createCategory"/>
+
+            <!-- Create an attribute with three options to be used in the first child product -->
+            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>
+            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+            </createData>
+            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOption2">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+            </createData>
+            <createData entity="productAttributeOption3" stepKey="createConfigProductAttributeOption3">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+            </createData>
+
+            <!-- Add the attribute just created to default attribute set -->
+            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+            </createData>
+
+            <!-- Get the first option of the attribute created -->
+            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+            </getData>
+
+            <!-- Get the second option of the attribute created -->
+            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeOption2">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+            </getData>
+
+            <!-- Get the third option of the attribute created -->
+            <getData entity="ProductAttributeOptionGetter" index="3" stepKey="getConfigAttributeOption3">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+            </getData>
+
+            <!-- Create Configurable product -->
+            <createData entity="BaseConfigurableProduct" stepKey="createConfigProduct">
+                <requiredEntity createDataKey="createCategory"/>
+            </createData>
+
+            <!-- Create a simple product and give it the attribute with the first option -->
+            <createData entity="ApiSimpleOne" stepKey="createConfigChildProduct1">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+                <requiredEntity createDataKey="getConfigAttributeOption1"/>
+                <field key="price">10.00</field>
+            </createData>
+
+            <!--Create a simple product and give it the attribute with the second option -->
+            <createData entity="ApiSimpleTwo" stepKey="createConfigChildProduct2">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+                <requiredEntity createDataKey="getConfigAttributeOption2"/>
+                <field key="price">20.00</field>
+            </createData>
+
+            <!--Create a simple product and give it the attribute with the Third option -->
+            <createData entity="ApiSimpleTwo" stepKey="createConfigChildProduct3">
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+                <requiredEntity createDataKey="getConfigAttributeOption3"/>
+                <field key="price">30.00</field>
+            </createData>
+
+            <!-- Create the configurable product -->
+            <createData entity="ConfigurableProductThreeOptions" stepKey="createConfigProductOption">
+                <requiredEntity createDataKey="createConfigProduct"/>
+                <requiredEntity createDataKey="createConfigProductAttribute"/>
+                <requiredEntity createDataKey="getConfigAttributeOption1"/>
+                <requiredEntity createDataKey="getConfigAttributeOption2"/>
+                <requiredEntity createDataKey="getConfigAttributeOption3"/>
+            </createData>
+
+            <!-- Add the first simple product to the configurable product -->
+            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild1">
+                <requiredEntity createDataKey="createConfigProduct"/>
+                <requiredEntity createDataKey="createConfigChildProduct1"/>
+            </createData>
+
+            <!-- Add the second simple product to the configurable product -->
+            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild2">
+                <requiredEntity createDataKey="createConfigProduct"/>
+                <requiredEntity createDataKey="createConfigChildProduct2"/>
+            </createData>
+
+            <!-- Add the third simple product to the configurable product -->
+            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild3">
+                <requiredEntity createDataKey="createConfigProduct"/>
+                <requiredEntity createDataKey="createConfigChildProduct3"/>
+            </createData>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
+        </before>
+
+        <after>
+            <deleteData createDataKey="createConfigChildProduct1" stepKey="deleteSimpleProduct1"/>
+            <deleteData createDataKey="createConfigChildProduct2" stepKey="deleteSimpleProduct2"/>
+            <deleteData createDataKey="createConfigChildProduct3" stepKey="deleteSimpleProduct3"/>
+            <deleteData createDataKey="createConfigProduct" stepKey="deleteProduct"/>
+            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
+            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteProductAttribute"/>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+        </after>
+
+        <!-- Add Configurable Product to the cart -->
+        <actionGroup ref="StorefrontAddConfigurableProductToTheCartActionGroup" stepKey="addConfigurableProductToCart">
+            <argument name="urlKey" value="$$createConfigProduct.custom_attributes[url_key]$$" />
+            <argument name="productAttribute" value="$$createConfigProductAttribute.default_value$$"/>
+            <argument name="productOption" value="$$getConfigAttributeOption2.label$$"/>
+            <argument name="qty" value="2"/>
+        </actionGroup>
+
+        <!--Open minicart-->
+        <waitForElement selector="{{StorefrontMinicartSection.showCart}}" stepKey="waitForShowMinicart" />
+        <waitForElement selector="{{StorefrontMinicartSection.viewAndEditCart}}" stepKey="waitForCartLink" />
+        <click selector="{{StorefrontMinicartSection.showCart}}" stepKey="clickShowMinicart" />
+
+        <!--Login (redirect)-->
+        <click selector="{{AmazonCheckoutSection.miniCartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginRedirectActionGroup" stepKey="AmazonLoginRedirectActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutGroupedProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="Complete checkout with bundled product"/>
+            <title value="Amazon Pay Checkout Bundled Product"/>
+            <description value="Perform checkout with bundled product and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+        </annotations>
+
+        <before>
+            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
+            <!--Create Grouped product with three simple product -->
+            <createData entity="ApiProductWithDescription" stepKey="simple1" before="simple2">
+                <field key="price">100.00</field>
+            </createData>
+            <createData entity="ApiProductWithDescription" stepKey="simple2" before="simple3">
+                <field key="price">200.00</field>
+            </createData>
+            <createData entity="ApiProductWithDescription" stepKey="simple3" before="product">
+                <field key="price">300.00</field>
+            </createData>
+            <createData entity="ApiGroupedProduct" stepKey="product"/>
+            <createData entity="OneSimpleProductLink" stepKey="addProductOne">
+                <requiredEntity createDataKey="product"/>
+                <requiredEntity createDataKey="simple1"/>
+            </createData>
+            <updateData entity="OneMoreSimpleProductLink" createDataKey="addProductOne" stepKey="addProductTwo">
+                <requiredEntity createDataKey="product"/>
+                <requiredEntity createDataKey="simple2"/>
+            </updateData>
+            <updateData entity="OneMoreSimpleProductLink" createDataKey="addProductOne" stepKey="addProductThree">
+                <requiredEntity createDataKey="product"/>
+                <requiredEntity createDataKey="simple3"/>
+            </updateData>
+            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <deleteData createDataKey="simple1" stepKey="deleteProduct1"/>
+            <deleteData createDataKey="simple2" stepKey="deleteProduct2"/>
+            <deleteData createDataKey="simple3" stepKey="deleteProduct3"/>
+            <deleteData createDataKey="product" stepKey="deleteGroupProduct"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
+        <!-- Fill Quantity and add Product to the cart -->
+        <actionGroup ref="StorefrontAddThreeGroupedProductToTheCartActionGroup" stepKey="addGropedProductsToTheCart">
+            <argument name="urlKey" value="$$product.custom_attributes[url_key]$$"/>
+            <argument name="product1" value="$$simple1.name$$"/>
+            <argument name="product2" value="$$simple2.name$$"/>
+            <argument name="product3" value="$$simple3.name$$"/>
+            <argument name="qty1" value="1"/>
+            <argument name="qty2" value="2"/>
+            <argument name="qty3" value="3"/>
+        </actionGroup>
+
+        <!--Open minicart-->
+        <waitForElement selector="{{StorefrontMinicartSection.showCart}}" stepKey="waitForShowMinicart" />
+        <waitForElement selector="{{StorefrontMinicartSection.viewAndEditCart}}" stepKey="waitForCartLink" />
+        <click selector="{{StorefrontMinicartSection.showCart}}" stepKey="clickShowMinicart" />
+
+        <!--Login (redirect)-->
+        <click selector="{{AmazonCheckoutSection.miniCartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginRedirectActionGroup" stepKey="AmazonLoginRedirectActionGroup" />
+
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
     <test name="AmazonCheckoutCart" extends="AmazonCheckoutAddProduct">
         <annotations>
             <features value="Amazon Pay"/>
@@ -96,9 +349,6 @@
             <description value="Perform checkout from cart page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
 
         <!--Go to Cart-->
@@ -121,9 +371,6 @@
             <description value="Perform checkout from minicart and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
 
         <!--Open minicart-->
@@ -146,9 +393,6 @@
             <description value="Perform checkout from checkout page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
 
         <!--Go to Checkout-->
@@ -171,9 +415,6 @@
             <description value="Perform checkout after logging in from customer account page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
 
         <!--Go to Customer page-->
@@ -194,9 +435,6 @@
             <description value="Perform checkout from cart page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_sca"/>
-            <skip>
-                <issueId>AmazonPayCredentialSupport</issueId>
-            </skip>
         </annotations>
 
         <!--Go to Cart-->
@@ -211,4 +449,61 @@
         <!--Place order-->
         <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
     </test>
+    <test name="AmazonCheckoutSuccessAfterDeclined" extends="AmazonCheckoutAddProductDetail">
+        <annotations>
+            <stories value="Amazon Pay Success After being Declined by InvalidPaymentMethod error"/>
+            <title value="Amazon Pay Success After being Declined by InvalidPaymentMethod error"/>
+            <description value="Test user ability to placed order with different CC after being declined"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_checkout"/>
+        </annotations>
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup"/>
+        <!--Place order with invalid test CC#-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="3434"/>
+        </actionGroup>
+        <!--Decline Error Message-->
+        <waitForText userInput="There has been a problem with the selected payment method" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Place order again with normal CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupGood"/>
+        <waitForText selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
+    </test>
+    <test name="AmazonCheckoutSuccessAfterSCAAbandoned" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Amazon SCA Success After Abandoned"/>
+            <title value="(SCA) Amazon SCA Success After Abandoned"/>
+            <description value="Perform checkout from cart page and ensure SCA can succeed after being Abandoned."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+        </annotations>
+
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart"/>
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup"/>
+
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup"/>
+        <!--Place order with SCA Abandoned CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="4440"/>
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="Something's wrong with your payment method." selector=".message" stepKey="waitForText"/>
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad2"/>
+
+        <!--Placing order again with normal CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupGood"/>
+        <waitForText selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
+    </test>
 </tests>

--- /dev/null
+++ b/Test/Mftf/Test/AmazonInvoiceTest.xml
@@ -0,0 +1,147 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
+    <test name="AmazonMultiInvoice">
+        <annotations>
+            <stories value="Amazon Pay Invoice"/>
+            <title value="Admin user must be able to split invoices when configuration allows"/>
+            <description value="Admin user must be able to split invoices when configuration allows"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_invoice"/>
+        </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct1"/>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct2"/>
+            <createData entity="MultiInvoiceAmazonPaymentConfig" stepKey="MultiInvoiceAmazonPaymentConfig"/>
+            <createData entity="MultiInvoiceAmazonCurrencyConfig" stepKey="MultiInvoiceAmazonCurrencyConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <createData entity="DefaultAmazonCurrencyConfig" stepKey="DefaultAmazonCurrencyConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
+        <!-- Go to product 1 page and add to cart -->
+        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openProduct1StoreFront">
+            <argument name="productUrl" value="$$createSimpleProduct1.custom_attributes[url_key]$$"/>
+        </actionGroup>
+        <actionGroup ref="StorefrontAddToTheCartActionGroup" stepKey="addProduct1ToCart"/>
+
+        <!-- Go to product 2 page and add to cart -->
+        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openProduct2StoreFront">
+            <argument name="productUrl" value="$$createSimpleProduct2.custom_attributes[url_key]$$"/>
+        </actionGroup>
+        <actionGroup ref="StorefrontAddToTheCartActionGroup" stepKey="addProduct2ToCart"/>
+
+        <!-- Click on mini cart -->
+        <actionGroup ref="StorefrontClickOnMiniCartActionGroup" stepKey="clickOnMiniCart"/>
+
+        <!-- Login (redirect) -->
+        <click selector="{{AmazonCheckoutSection.miniCartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginRedirectActionGroup" stepKey="AmazonLoginRedirectActionGroup" />
+
+        <!-- Place order -->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber}}" stepKey="grabOrderNumber"/>
+
+        <!-- Login as admin -->
+        <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
+
+        <!-- Open created order in backend -->
+        <amOnPage url="{{AdminOrdersPage.url}}" stepKey="goToOrders"/>
+        <waitForPageLoad stepKey="waitForOrdersPageLoad"/>
+        <actionGroup ref="OpenOrderById" stepKey="filterOrderGridById">
+            <argument name="orderId" value="$grabOrderNumber"/>
+        </actionGroup>
+
+        <!-- Create Invoice 1 -->
+        <click selector="{{AdminOrderDetailsMainActionsSection.invoice}}" stepKey="clickInvoice1"/>
+        <waitForPageLoad stepKey="waitForInvoicePage1"/>
+        <fillField stepKey="fillQty" userInput="1" selector="{{AdminInvoiceItemsSection.itemQtyToInvoice('1')}}"/>
+        <fillField stepKey="fillNoQty" userInput="0" selector="{{AdminInvoiceItemsSection.itemQtyToInvoice('2')}}"/>
+        <click selector="{{AdminInvoiceItemsSection.updateQty}}" stepKey="updateQty"/>
+        <waitForPageLoad stepKey="waitPageToBeLoaded"/>
+        <click selector="{{AdminInvoiceMainActionsSection.submitInvoice}}" stepKey="submitInvoice1"/>
+        <waitForPageLoad stepKey="waitForLoadPage1"/>
+        <see userInput="The invoice has been created." stepKey="seeMessage1"/>
+
+        <!-- Create Invoice 2 -->
+        <click selector="{{AdminOrderDetailsMainActionsSection.invoice}}" stepKey="clickInvoice2"/>
+        <waitForPageLoad stepKey="waitForInvoicePage2"/>
+        <click selector="{{AdminInvoiceMainActionsSection.submitInvoice}}" stepKey="submitInvoice2"/>
+        <waitForPageLoad stepKey="waitForLoadPage2"/>
+        <see userInput="The invoice has been created." stepKey="seeMessage2"/>
+    </test>
+    <test name="AmazonSingleInvoice">
+        <annotations>
+            <stories value="Amazon Pay Invoice"/>
+            <title value="Admin user must be unable to split invoices when configuration disallows"/>
+            <description value="Admin user must be unable to split invoices when configuration disallows"/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_invoice"/>
+        </annotations>
+
+        <before>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct1"/>
+            <createData entity="SimpleTwo" stepKey="createSimpleProduct2"/>
+            <createData entity="SingleInvoiceAmazonPaymentConfig" stepKey="SingleInvoiceAmazonPaymentConfig"/>
+            <createData entity="SingleInvoiceAmazonCurrencyConfig" stepKey="SingleInvoiceAmazonCurrencyConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </before>
+
+        <after>
+            <createData entity="DefaultAmazonPaymentConfig" stepKey="DefaultAmazonPaymentConfig"/>
+            <createData entity="DefaultAmazonCurrencyConfig" stepKey="DefaultAmazonCurrencyConfig"/>
+            <magentoCLI command="cache:flush" stepKey="flushCache"/>
+        </after>
+
+        <!-- Go to product 1 page and add to cart -->
+        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openProduct1StoreFront">
+            <argument name="productUrl" value="$$createSimpleProduct1.custom_attributes[url_key]$$"/>
+        </actionGroup>
+        <actionGroup ref="StorefrontAddToTheCartActionGroup" stepKey="addProduct1ToCart"/>
+
+        <!-- Go to product 2 page and add to cart -->
+        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openProduct2StoreFront">
+            <argument name="productUrl" value="$$createSimpleProduct2.custom_attributes[url_key]$$"/>
+        </actionGroup>
+        <actionGroup ref="StorefrontAddToTheCartActionGroup" stepKey="addProduct2ToCart"/>
+
+        <!-- Click on mini cart -->
+        <actionGroup ref="StorefrontClickOnMiniCartActionGroup" stepKey="clickOnMiniCart"/>
+
+        <!-- Login (redirect) -->
+        <click selector="{{AmazonCheckoutSection.miniCartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginRedirectActionGroup" stepKey="AmazonLoginRedirectActionGroup" />
+
+        <!-- Place order -->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber}}" stepKey="grabOrderNumber"/>
+
+        <!-- Login as admin -->
+        <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
+
+        <!-- Open created order in backend -->
+        <amOnPage url="{{AdminOrdersPage.url}}" stepKey="goToOrders"/>
+        <waitForPageLoad stepKey="waitForOrdersPageLoad"/>
+        <actionGroup ref="OpenOrderById" stepKey="filterOrderGridById">
+            <argument name="orderId" value="$grabOrderNumber"/>
+        </actionGroup>
+
+        <!-- Create Invoice -->
+        <click selector="{{AdminOrderDetailsMainActionsSection.invoice}}" stepKey="clickInvoice"/>
+        <waitForPageLoad stepKey="waitForInvoicePage"/>
+
+        <!-- Verify invoice item qtys cannot be changed -->
+        <dontSeeElement stepKey="dontSeeItemQtyToInvoice1" selector="{{AdminInvoiceItemsSection.itemQtyToInvoice('1')}}"/>
+        <dontSeeElement stepKey="dontSeeItemQtyToInvoice2" selector="{{AdminInvoiceItemsSection.itemQtyToInvoice('2')}}"/>
+        <dontSeeElement stepKey="dontSeeUpdateQty" selector="{{AdminInvoiceItemsSection.updateQty}}"/>
+
+        <!-- Submit and verify the invoice created -->
+        <click selector="{{AdminInvoiceMainActionsSection.submitInvoice}}" stepKey="submitInvoice"/>
+        <waitForPageLoad stepKey="waitForLoadPage"/>
+        <see userInput="The invoice has been created." stepKey="seeMessage"/>
+    </test>
+</tests>

--- a/Test/Mftf/composer.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-  "name": "amzn/login-with-amazon-module",
-  "description": "Login with Amazon module",
-  "type": "magento2-module",
-  "version": "2.2.2",
-  "license": [
-    "Apache-2.0"
-  ],
-  "require": {
-    "php": "~7.0.13|~7.1.0|~7.2.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^2.2.2",
-    "magento/module-customer": "^101.0",
-    "magento/module-store": "^100.1",
-    "magento/module-eav": "101.0.*",
-    "magento/module-checkout": "100.2.*",
-    "magento/module-checkout-agreements": "100.2.*"
-
-  },
-  "suggest": {
-    "magento/module-sales": "101.0.*"
-  },
-  "autoload": {
-    "files": ["registration.php"],
-    "psr-4": {
-      "Amazon\\Login\\": ""
-    }
-  }
-}

--- a/composer.json
+++ b/composer.json
@@ -2,14 +2,14 @@
   "name": "amzn/amazon-pay-module",
   "description": "Amazon Pay module",
   "type": "magento2-module",
-  "version": "3.2.10",
+  "version": "3.7.1",
   "license": [
     "Apache-2.0"
   ],
   "require": {
-    "php": "~7.1.3||~7.2.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.2.10",
-    "amzn/login-with-amazon-module": "^3.2.10",
+    "php": "~7.1.3||~7.2.0||~7.3.0",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.7.1",
+    "amzn/login-with-amazon-module": "^3.7.1",
     "magento/framework": "^102",
     "magento/module-customer": "^102",
     "magento/module-eav": "^102",

--- a/etc/config.xml
+++ b/etc/config.xml
@@ -54,6 +54,7 @@
                 <platform_id>A2ZAYEJU54T1BM</platform_id>
                 <hard_decline_code>4273</hard_decline_code>
                 <soft_decline_code>7638</soft_decline_code>
+                <sca_regions>de,uk</sca_regions>
             </amazon_payment>
         </payment>
     </default>

--- /dev/null
+++ b/etc/csp_whitelist.xml
@@ -0,0 +1,110 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<csp_whitelist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:module:Magento_Csp:etc/csp_whitelist.xsd">
+    <policies>
+        <policy id="connect-src">
+            <values>
+                <value id="amazon_com" type="host">*.amazon.com</value>
+                <value id="amazon_co_uk" type="host">*.amazon.co.uk</value>
+                <value id="amazon_co_jp" type="host">*.amazon.co.jp</value>
+                <value id="amazon_jp" type="host">*.amazon.jp</value>
+                <value id="amazon_it" type="host">*.amazon.it</value>
+                <value id="amazon_fr" type="host">*.amazon.fr</value>
+                <value id="amazon_es" type="host">*.amazon.es</value>
+                <value id="amazonpay_com" type="host">*.amazonpay.com</value>
+                <value id="amazonpay_co_uk" type="host">*.amazonpay.co.uk</value>
+                <value id="amazonpay_co_jp" type="host">*.amazonpay.co.jp</value>
+                <value id="amazonpay_jp" type="host">*.amazonpay.jp</value>
+                <value id="amazonpay_it" type="host">*.amazonpay.it</value>
+                <value id="amazonpay_fr" type="host">*.amazonpay.fr</value>
+                <value id="amazonpay_es" type="host">*.amazonpay.es</value>
+                <value id="amazonservices_com" type="host">mws.amazonservices.com</value>
+                <value id="amazonservices_co_uk" type="host">mws.amazonservices.co.uk</value>
+                <value id="amazonservices_co_jp" type="host">mws.amazonservices.co.jp</value>
+                <value id="amazonservices_jp" type="host">mws.amazonservices.jp</value>
+                <value id="amazonservices_it" type="host">mws.amazonservices.it</value>
+                <value id="amazonservices_fr" type="host">mws.amazonservices.fr</value>
+                <value id="amazonservices_es" type="host">mws.amazonservices.es</value>
+            </values>
+        </policy>
+        <policy id="script-src">
+            <values>
+                <value id="amazon_payment_widget_com" type="host">*.payments-amazon.com</value>
+                <value id="amazon_payment_widget_co_uk" type="host">*.payments-amazon.co.uk</value>
+                <value id="amazon_payment_widget_co_jp" type="host">*.payments-amazon.co.jp</value>
+                <value id="amazon_payment_widget_jp" type="host">*.payments-amazon.jp</value>
+                <value id="amazon_payment_widget_it" type="host">*.payments-amazon.it</value>
+                <value id="amazon_payment_widget_fr" type="host">*.payments-amazon.fr</value>
+                <value id="amazon_payment_widget_es" type="host">*.payments-amazon.es</value>
+            </values>
+        </policy>
+        <policy id="img-src">
+            <values>
+                <value id="amazon_cloudfront01" type="host">d3sbl0c71oxeok.cloudfront.net</value>
+                <value id="amazon_cloudfront02" type="host">dhkkzdfmpzvap.cloudfront.net</value>
+                <value id="amazon_cloudfront03" type="host">d2bpzs5y44q6e0.cloudfront.net</value>
+                <value id="amazon_cloudfront04" type="host">d37shgu97oizpd.cloudfront.net</value>
+                <value id="amazon_cloudfront05" type="host">d1zlqll3enr74n.cloudfront.net</value>
+                <value id="amazon_cloudfront06" type="host">d1jynp0fpwn93a.cloudfront.net</value>
+                <value id="amazon_cloudfront07" type="host">d2cb3tokgpwh3v.cloudfront.net</value>
+                <value id="amazon_cloudfront08" type="host">d1re8bfxx3pw6e.cloudfront.net</value>
+                <value id="amazon_cloudfront09" type="host">d35u8xwkxs8vpe.cloudfront.net</value>
+                <value id="amazon_cloudfront10" type="host">d13s9xffygp5o.cloudfront.net</value>
+                <value id="amazon_cloudfront11" type="host">d388nbw0dwi1jm.cloudfront.net</value>
+                <value id="amazon_cloudfront12" type="host">d11p2vtu3dppaw.cloudfront.net</value>
+                <value id="amazon_cloudfront13" type="host">d3r89hiip86hka.cloudfront.net</value>
+                <value id="amazon_cloudfront14" type="host">dc7snq0c8ipyk.cloudfront.net</value>
+                <value id="amazon_cloudfront15" type="host">d5c7kvljggzso.cloudfront.net</value>
+                <value id="amazon_cloudfront16" type="host">d2h8yg3ypfzua1.cloudfront.net</value>
+                <value id="amazon_cloudfront17" type="host">d1b556x7apj5fb.cloudfront.net</value>
+                <value id="amazon_cloudfront18" type="host">draz1ib3z71v2.cloudfront.net</value>
+                <value id="amazon_cloudfront19" type="host">dr6hdp4s5yzfc.cloudfront.net</value>
+                <value id="amazon_cloudfront20" type="host">d2bomicxw8p7ii.cloudfront.net</value>
+                <value id="amazon_cloudfront21" type="host">d3aypcdgvjnnam.cloudfront.net</value>
+                <value id="amazon_cloudfront22" type="host">d2a3iuf10348gy.cloudfront.net</value>
+                <value id="ssl_images_amazon_com" type="host">*.ssl-images-amazon.com</value>
+                <value id="ssl_images_amazon_co_uk" type="host">*.ssl-images-amazon.co.uk</value>
+                <value id="ssl_images_amazon_co_jp" type="host">*.ssl-images-amazon.co.jp</value>
+                <value id="ssl_images_amazon_jp" type="host">*.ssl-images-amazon.jp</value>
+                <value id="ssl_images_amazon_it" type="host">*.ssl-images-amazon.it</value>
+                <value id="ssl_images_amazon_fr" type="host">*.ssl-images-amazon.fr</value>
+                <value id="ssl_images_amazon_es" type="host">*.ssl-images-amazon.es</value>
+                <value id="media_amazon_com" type="host">*.media-amazon.com</value>
+                <value id="media_amazon_co_uk" type="host">*.media-amazon.co.uk</value>
+                <value id="media_amazon_co_jp" type="host">*.media-amazon.co.jp</value>
+                <value id="media_amazon_jp" type="host">*.media-amazon.jp</value>
+                <value id="media_amazon_it" type="host">*.media-amazon.it</value>
+                <value id="media_amazon_fr" type="host">*.media-amazon.fr</value>
+                <value id="media_amazon_es" type="host">*.media-amazon.es</value>
+            </values>
+        </policy>
+        <policy id="form-action">
+            <values>
+                <value id="amazon_com" type="host">*.amazon.com</value>
+                <value id="amazon_co_uk" type="host">*.amazon.co.uk</value>
+                <value id="amazon_co_jp" type="host">*.amazon.co.jp</value>
+                <value id="amazon_jp" type="host">*.amazon.jp</value>
+                <value id="amazon_it" type="host">*.amazon.it</value>
+                <value id="amazon_fr" type="host">*.amazon.fr</value>
+                <value id="amazon_es" type="host">*.amazon.es</value>
+            </values>
+        </policy>
+        <policy id="frame-src">
+            <values>
+                <value id="amazon_com" type="host">*.amazon.com</value>
+                <value id="amazon_co_uk" type="host">*.amazon.co.uk</value>
+                <value id="amazon_co_jp" type="host">*.amazon.co.jp</value>
+                <value id="amazon_jp" type="host">*.amazon.jp</value>
+                <value id="amazon_it" type="host">*.amazon.it</value>
+                <value id="amazon_fr" type="host">*.amazon.fr</value>
+                <value id="amazon_es" type="host">*.amazon.es</value>
+                <value id="amazon_payment_widget_com" type="host">*.payments-amazon.com</value>
+                <value id="amazon_payment_widget_co_uk" type="host">*.payments-amazon.co.uk</value>
+                <value id="amazon_payment_widget_co_jp" type="host">*.payments-amazon.co.jp</value>
+                <value id="amazon_payment_widget_jp" type="host">*.payments-amazon.jp</value>
+                <value id="amazon_payment_widget_it" type="host">*.payments-amazon.it</value>
+                <value id="amazon_payment_widget_fr" type="host">*.payments-amazon.fr</value>
+                <value id="amazon_payment_widget_es" type="host">*.payments-amazon.es</value>
+            </values>
+        </policy>
+    </policies>
+</csp_whitelist>

--- a/etc/di.xml
+++ b/etc/di.xml
@@ -34,16 +34,10 @@
             <argument name="config" xsi:type="object">Amazon\Payment\Gateway\Config\Config</argument>
         </arguments>
     </virtualType>
-    <virtualType name="AmazonCurrencyValidator" type="Amazon\Payment\Gateway\Validator\CurrencyValidator">
-        <arguments>
-            <argument name="config" xsi:type="object">Amazon\Payment\Gateway\Config\Config</argument>
-        </arguments>
-    </virtualType>
     <virtualType name="AmazonValidatorPool" type="Magento\Payment\Gateway\Validator\ValidatorPool">
         <arguments>
             <argument name="validators" xsi:type="array">
                 <item name="country" xsi:type="string">AmazonCountryValidator</item>
-                <item name="currency" xsi:type="string">AmazonCurrencyValidator</item>
             </argument>
         </arguments>
     </virtualType>
@@ -95,9 +89,6 @@
 
     <!-- Configuration reader -->
     <virtualType name="AmazonGatewayConfig" type="Amazon\Payment\Gateway\Config\Config">
-        <arguments>
-            <argument name="methodCode" xsi:type="const">Amazon\Payment\Gateway\Config\Config::CODE</argument>
-        </arguments>
     </virtualType>
 
     <virtualType name="AmazonCommandManager" type="Magento\Payment\Gateway\Command\CommandManager">
@@ -327,4 +318,9 @@
             <argument name="connectionName" xsi:type="string">sales</argument>
         </arguments>
     </type>
+    
+    <!-- Order comments for currency differences  -->
+    <type name="Magento\Sales\Model\Order\Payment">
+        <plugin name="amazon_pay_order_payment" type="Amazon\Payment\Plugin\OrderCurrencyComment" />
+    </type>
 </config>

--- a/etc/events.xml
+++ b/etc/events.xml
@@ -40,4 +40,7 @@
     <event name="amazon_payment_pending_authorization_hard_decline_after">
         <observer name="amazon_payment_hard_decline_email" instance="Amazon\Payment\Observer\HardDeclinedEmailSender" />
     </event>
+    <event name="sales_order_payment_capture">
+        <observer name="amazon_payment_order_payment_capture" instance="Amazon\Payment\Observer\OrderPaymentCapture" />
+    </event>
 </config>

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Payment" setup_version="3.2.10" >
+    <module name="Amazon_Payment" setup_version="3.7.1" >
         <sequence>
             <module name="Amazon_Core"/>
             <module name="Amazon_Login"/>

--- a/i18n/de_AT.csv
+++ b/i18n/de_AT.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Unerwarteter Status für Amazon Pay-Capture. Status: %1; Ursachencode: %2"
 "Amazon refund invalid state : %1 with reason %2","Unerwarteter Status für die Amazon Pay-Erstattung. Status: %1; Ursachencode: %2"
 "the country for your address is not allowed for this store","Das mit Ihrer Adresse verknüpfte Land ist für diese Website nicht zulässig."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Leider können Sie ""Amazon Pay"" für diese Bestellung nicht verwenden. Wählen Sie eine andere Zahlungsweise aus."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Leider können Sie ""Amazon Pay"" für diese Bestellung nicht verwenden. Wählen Sie eine andere Zahlungsweise aus."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Leider ist bei der ausgewählten Zahlungsweise ein Problem in Ihrem Amazon-Kundenkonto aufgetreten. Wählen Sie eine andere Zahlungsweise aus."
 "The currency selected is not supported by Amazon Pay","Die ausgewählte Währung wird von Amazon Pay auf dieser Website nicht unterstützt."
 "Captured amount of %1 online","Online erfasster Betrag ist %1."
@@ -18,4 +18,10 @@
 "Amazon could not process your request.","Amazon Pay konnte Ihre Anfrage nicht bearbeiten. Bitte versuchen Sie es noch einmal."
 "Please select a payment method.","Wählen Sie eine Zahlungsweise aus."
 "Your session has expired, please reload the page and try again.","Ihre Sitzung ist abgelaufen. Bitte laden Sie die Seite erneut und versuchen Sie es noch einmal."
-"Return to standard checkout","Zum Standard Checkout zurückkehren"
\ No newline at end of file
+"Return to standard checkout","Zum Standard Checkout zurückkehren"
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Mit dieser Zahlungsart ist ein Problem aufgetreten. Um Ihre Bestellung abzuschließen, wählen Sie bitte eine andere aus."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Ihre Zahlung mit Amazon Pay ist derzeit noch in Prufung. Bitte beachten Sie, dass wir uns mit Ihnen in Kurze per Email in Verbindung setzen werden, falls noch Unklarheiten bestehen sollten."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Fall Sie ihr Passwort zurücksetzen möchten, <a href=""%1"">loggen Sie sich bitte aus</a> und klicken Sie auf der Anmeldeseite auf “Passwort vergessen”"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","Die gewählte Zahlmethode ist für diese Transaktion nicht verfügbar. Bitte wählen Sie eine andere oder fügen Sie eine neue Zahlmethode hinzu."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","Für diese Bestellung wurde kein Zahlungsmittel ausgewählt, bitte versuchen Sie, die Seite zu aktualisieren oder ein neues Zahlungsmittel hinzuzufügen."
+"The order failed due to a technical error, please select another payment method or contact our support.","Die Bestellung ist aufgrund eines technischen Fehlers fehlgeschlagen, bitte wählen Sie eine andere Zahlungsmethode oder kontaktieren Sie unseren Support."

--- a/i18n/de_CH.csv
+++ b/i18n/de_CH.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Unerwarteter Status für Amazon Pay-Capture. Status: %1; Ursachencode: %2"
 "Amazon refund invalid state : %1 with reason %2","Unerwarteter Status für die Amazon Pay-Erstattung. Status: %1; Ursachencode: %2"
 "the country for your address is not allowed for this store","Das mit Ihrer Adresse verknüpfte Land ist für diese Website nicht zulässig."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Leider können Sie ""Amazon Pay"" für diese Bestellung nicht verwenden. Wählen Sie eine andere Zahlungsweise aus."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Leider können Sie ""Amazon Pay"" für diese Bestellung nicht verwenden. Wählen Sie eine andere Zahlungsweise aus."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Leider ist bei der ausgewählten Zahlungsweise ein Problem in Ihrem Amazon-Kundenkonto aufgetreten. Wählen Sie eine andere Zahlungsweise aus."
 "The currency selected is not supported by Amazon Pay","Die ausgewählte Währung wird von Amazon Pay auf dieser Website nicht unterstützt."
 "Captured amount of %1 online","Online erfasster Betrag ist %1."
@@ -18,4 +18,10 @@
 "Amazon could not process your request.","Amazon Pay konnte Ihre Anfrage nicht bearbeiten. Bitte versuchen Sie es noch einmal."
 "Please select a payment method.","Wählen Sie eine Zahlungsweise aus."
 "Your session has expired, please reload the page and try again.","Ihre Sitzung ist abgelaufen. Bitte laden Sie die Seite erneut und versuchen Sie es noch einmal."
-"Return to standard checkout","Zum Standard Checkout zurückkehren"
\ No newline at end of file
+"Return to standard checkout","Zum Standard Checkout zurückkehren"
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Mit dieser Zahlungsart ist ein Problem aufgetreten. Um Ihre Bestellung abzuschließen, wählen Sie bitte eine andere aus."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Ihre Zahlung mit Amazon Pay ist derzeit noch in Prufung. Bitte beachten Sie, dass wir uns mit Ihnen in Kurze per Email in Verbindung setzen werden, falls noch Unklarheiten bestehen sollten."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Fall Sie ihr Passwort zurücksetzen möchten, <a href=""%1"">loggen Sie sich bitte aus</a> und klicken Sie auf der Anmeldeseite auf “Passwort vergessen”"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","Die gewählte Zahlmethode ist für diese Transaktion nicht verfügbar. Bitte wählen Sie eine andere oder fügen Sie eine neue Zahlmethode hinzu."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","Für diese Bestellung wurde kein Zahlungsmittel ausgewählt, bitte versuchen Sie, die Seite zu aktualisieren oder ein neues Zahlungsmittel hinzuzufügen."
+"The order failed due to a technical error, please select another payment method or contact our support.","Die Bestellung ist aufgrund eines technischen Fehlers fehlgeschlagen, bitte wählen Sie eine andere Zahlungsmethode oder kontaktieren Sie unseren Support."

--- a/i18n/de_DE.csv
+++ b/i18n/de_DE.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Unerwarteter Status für Amazon Pay-Capture. Status: %1; Ursachencode: %2"
 "Amazon refund invalid state : %1 with reason %2","Unerwarteter Status für die Amazon Pay-Erstattung. Status: %1; Ursachencode: %2"
 "the country for your address is not allowed for this store","Das mit Ihrer Adresse verknüpfte Land ist für diese Website nicht zulässig."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Leider können Sie ""Amazon Pay"" für diese Bestellung nicht verwenden. Wählen Sie eine andere Zahlungsweise aus."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Leider können Sie ""Amazon Pay"" für diese Bestellung nicht verwenden. Wählen Sie eine andere Zahlungsweise aus."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Leider ist bei der ausgewählten Zahlungsweise ein Problem in Ihrem Amazon-Kundenkonto aufgetreten. Wählen Sie eine andere Zahlungsweise aus."
 "The currency selected is not supported by Amazon Pay","Die ausgewählte Währung wird von Amazon Pay auf dieser Website nicht unterstützt."
 "Captured amount of %1 online","Online erfasster Betrag ist %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay konnte Ihre Anfrage nicht bearbeiten. Bitte versuchen Sie es noch einmal."
 "Please select a payment method.","Wählen Sie eine Zahlungsweise aus."
 "Your session has expired, please reload the page and try again.","Ihre Sitzung ist abgelaufen. Bitte laden Sie die Seite erneut und versuchen Sie es noch einmal."
-"Return to standard checkout","Zum Standard Checkout zurückkehren"
\ No newline at end of file
+"Return to standard checkout","Zum Standard Checkout zurückkehren"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Beim Zahlungsvorgang ist ein Problem aufgetreten. Ihre Bestellung wurde nicht aufgegeben und Ihr Konto nicht belastet."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Mit dieser Zahlungsart ist ein Problem aufgetreten. Um Ihre Bestellung abzuschließen, wählen Sie bitte eine andere aus."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Ihre Zahlung mit Amazon Pay ist derzeit noch in Prufung. Bitte beachten Sie, dass wir uns mit Ihnen in Kurze per Email in Verbindung setzen werden, falls noch Unklarheiten bestehen sollten."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Fall Sie ihr Passwort zurücksetzen möchten, <a href=""%1"">loggen Sie sich bitte aus</a> und klicken Sie auf der Anmeldeseite auf “Passwort vergessen”"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","Die gewählte Zahlmethode ist für diese Transaktion nicht verfügbar. Bitte wählen Sie eine andere oder fügen Sie eine neue Zahlmethode hinzu."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","Für diese Bestellung wurde kein Zahlungsmittel ausgewählt, bitte versuchen Sie, die Seite zu aktualisieren oder ein neues Zahlungsmittel hinzuzufügen."
+"The order failed due to a technical error, please select another payment method or contact our support.","Die Bestellung ist aufgrund eines technischen Fehlers fehlgeschlagen, bitte wählen Sie eine andere Zahlungsmethode oder kontaktieren Sie unseren Support."

--- a/i18n/en_GB.csv
+++ b/i18n/en_GB.csv
@@ -3,7 +3,7 @@
 "Amazon capture invalid state : %1 with reason %2","Unexpected state for the Amazon Pay capture. State: %1, Reason code: %2"
 "Amazon refund invalid state : %1 with reason %2","Unexpected state for the Amazon Pay refund. State: %1, Reason code: %2"
 "the country for your address is not allowed for this store","The country associated with your address is not allowed for this store."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","There has been a problem with the selected payment method on your Amazon account. Please choose another one."
 "The currency selected is not supported by Amazon Pay","The currency selected is not supported by Amazon Pay on this store."
 "Captured amount of %1 online","Captured amount of %1 online."
@@ -18,3 +18,8 @@
 "Please select a payment method.","Please select a payment method."
 "Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
 "Return to standard checkout","Return to standard checkout"
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget."
+"The order failed due to a technical error, please select another payment method or contact our support.","The order failed due to a technical error, please select another payment method or contact our support."

--- a/i18n/en_US.csv
+++ b/i18n/en_US.csv
@@ -106,7 +106,7 @@
 "The currency selected is not supported by Amazon Pay","The currency selected is not supported by Amazon Pay on this store."
 "the email address for your Amazon account is invalid","The email address for your Amazon account is invalid."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","There has been a problem with the selected payment method on your Amazon account. Please choose another one."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Unfortunately it is not possible to Pay with Amazon Pay for this order. Please choose another payment method."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method."
 "United Kingdom","United Kingdom"
 "United States","United States"
 "Update Mechanism","Update Mechanism"
@@ -115,4 +115,11 @@
 "Welcome back!","Welcome back!"
 "With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop.","With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop."
 "You will be registering for a %1 account based on the base currency of your shop (%2).","You will be registering for a %1 account based on the base currency of your shop (%2)."
-"Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
\ No newline at end of file
+"Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","There was a problem with your payment. Your order hasn't been placed, and you haven't been charged."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Something's wrong with your payment method. To place your order, try another."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget."
+"The order failed due to a technical error, please select another payment method or contact our support.","The order failed due to a technical error, please select another payment method or contact our support."

--- a/i18n/es_AR.csv
+++ b/i18n/es_AR.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/es_CL.csv
+++ b/i18n/es_CL.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/es_CO.csv
+++ b/i18n/es_CO.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/es_CR.csv
+++ b/i18n/es_CR.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/es_ES.csv
+++ b/i18n/es_ES.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/es_MX.csv
+++ b/i18n/es_MX.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/es_PA.csv
+++ b/i18n/es_PA.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/es_PE.csv
+++ b/i18n/es_PE.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/es_VE.csv
+++ b/i18n/es_VE.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Estado inesperado de la captura de Amazon Pay. Estado: %1; Código de motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Estado inesperado del reembolso de Amazon Pay. Estado: %1; Código de motivo: %2"
 "the country for your address is not allowed for this store","Este sitio web no admite el país asociado a tu dirección."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Lo sentimos, no es posible utilizar Amazon Pay para este pedido. Elige otro método de pago."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Lo sentimos, se ha producido un problema con el método de pago seleccionado en tu cuenta de Amazon. Elige otro método de pago."
 "The currency selected is not supported by Amazon Pay","Amazon Pay no admite la divisa seleccionada en este sitio web."
 "Captured amount of %1 online","Importe capturado por Internet de %1."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay no ha podido procesar tu solicitud. Vuelve a intentarlo."
 "Please select a payment method.","Selecciona un método de pago."
 "Your session has expired, please reload the page and try again.","Tu sesión ha caducado. Actualiza la página e inténtalo de nuevo."
-"Return to standard checkout","Vuelva a su checkout estándar"
\ No newline at end of file
+"Return to standard checkout","Vuelva a su checkout estándar"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Se ha producido un problema con el pago. Tu pedido no se ha confirmado y no se te ha cargado ningún importe."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Se ha producido un error con tu método de pago. Para confirmar tu pedido, prueba con otro método de pago."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Tu transaccion con Amazon Pay se esta verificando. Te informaremos tan pronto como sea posible."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Para restablecer tu contraseña, <a href=""%1"">cierra la sesión</a> y pulsa “¿Has olvidado tu contraseña?” en la pagina de acceso."
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","El método de pago seleccionado no está disponible para esta transacción. Por favor, seleccione otro o introducza uno nuevo en el recuadro Metodo de pago."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","No ha sido seleccionado un método de pago para este pedido. Por favor, refresque la página o introduzca uno nuevo en el recuadro Metodo de pago."
+"The order failed due to a technical error, please select another payment method or contact our support.","El pedido no ha sido procesado debido a un error técnico. Por favor, seleccione otro método de pago o contacte nuestro servicio de soporte al cliente."

--- a/i18n/fr_CA.csv
+++ b/i18n/fr_CA.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","État imprévu pour la saisie d'Amazon Pay. État : %1 ; code du motif : %2"
 "Amazon refund invalid state : %1 with reason %2","État imprévu pour le remboursement d'Amazon Pay. État : %1 ; code du motif : %2"
 "the country for your address is not allowed for this store","Le pays associé à votre adresse n'est pas autorisé pour ce site."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Nous sommes désolés, mais vous ne pouvez pas utiliser Amazon Pay pour cette commande. Sélectionnez un autre mode paiement."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Nous sommes désolés, mais vous ne pouvez pas utiliser Amazon Pay pour cette commande. Sélectionnez un autre mode paiement."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Nous sommes désolés, mais un problème s'est produit avec le mode de paiement sélectionné sur votre compte Amazon. Sélectionnez un autre mode paiement."
 "The currency selected is not supported by Amazon Pay","La devise sélectionnée n'est pas prise en charge par Amazon Pay sur ce site."
 "Captured amount of %1 online","Montant de %1 saisi en ligne."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay n'a pas pu traiter votre demande. Veuillez réessayer."
 "Please select a payment method.","Sélectionnez un mode de paiement."
 "Your session has expired, please reload the page and try again.","Votre session a expiré. Actualisez la page et réessayez."
-"Return to standard checkout","Revenir à la commande standard"
\ No newline at end of file
+"Return to standard checkout","Revenir à la commande standard"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Un problème s’est produit avec votre paiement. Votre commande n'a pas été passée et vous n'avez pas été débité."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Un problème est survenu avec votre moyen de paiement. Pour passer votre commande, essayez un autre moyen de paiement."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Votre transaction avec Amazon Pay est en cours de validation. Vous serez informe prochainement de son suivi."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Pour réinitialiser votre mot de passe, veuillez-vous <a href=""%1"">Déconnexion</a> et cliquer sur “Mot de passe oublié?” depuis la page de connexion"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","Le mode de paiement sélectionné n'est pas disponible pour cette transaction. Veuillez en sélectionner un autre ou ajouter un nouveau mode de paiement au widget de portefeuille."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","Aucun instrument de paiement n'a été sélectionné pour cette commande, veuillez essayer de rafraîchir la page ou d'ajouter un nouvel instrument de paiement dans le widget de portefeuille."
+"The order failed due to a technical error, please select another payment method or contact our support.","La commande a échoué en raison d'une erreur technique, veuillez sélectionner un autre mode de paiement ou contacter notre support."

--- a/i18n/fr_FR.csv
+++ b/i18n/fr_FR.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","État imprévu pour la saisie d'Amazon Pay. État : %1 ; code du motif : %2"
 "Amazon refund invalid state : %1 with reason %2","État imprévu pour le remboursement d'Amazon Pay. État : %1 ; code du motif : %2"
 "the country for your address is not allowed for this store","Le pays associé à votre adresse n'est pas autorisé pour ce site."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Nous sommes désolés, mais vous ne pouvez pas utiliser Amazon Pay pour cette commande. Sélectionnez un autre mode paiement."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Nous sommes désolés, mais vous ne pouvez pas utiliser Amazon Pay pour cette commande. Sélectionnez un autre mode paiement."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Nous sommes désolés, mais un problème s'est produit avec le mode de paiement sélectionné sur votre compte Amazon. Sélectionnez un autre mode paiement."
 "The currency selected is not supported by Amazon Pay","La devise sélectionnée n'est pas prise en charge par Amazon Pay sur ce site."
 "Captured amount of %1 online","Montant de %1 saisi en ligne."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Amazon Pay n'a pas pu traiter votre demande. Veuillez réessayer."
 "Please select a payment method.","Sélectionnez un mode de paiement."
 "Your session has expired, please reload the page and try again.","Votre session a expiré. Actualisez la page et réessayez."
-"Return to standard checkout","Revenir à la commande standard"
\ No newline at end of file
+"Return to standard checkout","Revenir à la commande standard"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Un problème s’est produit avec votre paiement. Votre commande n'a pas été passée et vous n'avez pas été débité."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Un problème est survenu avec votre moyen de paiement. Pour passer votre commande, essayez un autre moyen de paiement."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","Votre transaction avec Amazon Pay est en cours de validation. Vous serez informe prochainement de son suivi."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Pour réinitialiser votre mot de passe, veuillez-vous <a href=""%1"">Déconnexion</a> et cliquer sur “Mot de passe oublié?” depuis la page de connexion"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","Le mode de paiement sélectionné n'est pas disponible pour cette transaction. Veuillez en sélectionner un autre ou ajouter un nouveau mode de paiement au widget de portefeuille."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","Aucun instrument de paiement n'a été sélectionné pour cette commande, veuillez essayer de rafraîchir la page ou d'ajouter un nouvel instrument de paiement dans le widget de portefeuille."
+"The order failed due to a technical error, please select another payment method or contact our support.","La commande a échoué en raison d'une erreur technique, veuillez sélectionner un autre mode de paiement ou contacter notre support."

--- a/i18n/it_CH.csv
+++ b/i18n/it_CH.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Stato imprevisto per l'acquisizione Amazon Pay. Stato: %1; Codice motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Stato imprevisto per il rimborso Amazon Pay. Stato: %1; Codice motivo: %2"
 "the country for your address is not allowed for this store","Il paese associato al tuo indirizzo non è supportato su questo sito."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Non è possibile utilizzare Amazon Pay per questo ordine. Seleziona un altro metodo di pagamento."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Non è possibile utilizzare Amazon Pay per questo ordine. Seleziona un altro metodo di pagamento."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Si è verificato un problema con il metodo di pagamento selezionato sul tuo account Amazon. Seleziona un altro metodo di pagamento."
 "The currency selected is not supported by Amazon Pay","La valuta selezionata non è supportata da Amazon Pay su questo sito."
 "Captured amount of %1 online","Importo acquisito di %1 online."
@@ -18,4 +18,10 @@
 "Amazon could not process your request.","Il servizio Amazon Pay non ha potuto elaborare la tua richiesta. Riprova."
 "Please select a payment method.","Seleziona un metodo di pagamento."
 "Your session has expired, please reload the page and try again.","La sessione è scaduta. Ricarica la pagina e riprova."
-"Return to standard checkout","Ritorna al tuo checkout originale"
\ No newline at end of file
+"Return to standard checkout","Ritorna al tuo checkout originale"
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Si è verificato un problema con il metodo di pagamento. Per effettuare l'ordine, prova con un altro metodo di pagamento."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","La vostra transazione con Amazon Pay e in fase di validazione. Vi informeremo del risultato della transazione a breve."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Per resettare la tua password, per favore <a href=""%1"">Esci</a> dal tuo account e seleziona “Hai dimenticato la password?" dalla pagina di Accesso"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","Il metodo di pagamento selezionato non è disponibile per questa transazione. Per favore selezionarne o aggiungerne un altro nel wallet widget."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","Non è stato selezionato nessun metodo di pagamento per questo ordine. Per favore ricaricare la pagina o aggiungere un nuovo metodo di pagamento nel wallet widget."
+"The order failed due to a technical error, please select another payment method or contact our support.","Non è stato possibile processare l’ordine a causa di un problema tecnico. Per favore selezionare un altro metodo di pagamento o contattare il supporto."

--- a/i18n/it_IT.csv
+++ b/i18n/it_IT.csv
@@ -4,7 +4,7 @@
 "Amazon capture invalid state : %1 with reason %2","Stato imprevisto per l'acquisizione Amazon Pay. Stato: %1; Codice motivo: %2"
 "Amazon refund invalid state : %1 with reason %2","Stato imprevisto per il rimborso Amazon Pay. Stato: %1; Codice motivo: %2"
 "the country for your address is not allowed for this store","Il paese associato al tuo indirizzo non è supportato su questo sito."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Non è possibile utilizzare Amazon Pay per questo ordine. Seleziona un altro metodo di pagamento."
+"Unfortunately it is not possible to use Amazon Pay for this order, please choose another payment method.","Non è possibile utilizzare Amazon Pay per questo ordine. Seleziona un altro metodo di pagamento."
 "There has been a problem with the selected payment method on your Amazon account. Please choose another one.","Si è verificato un problema con il metodo di pagamento selezionato sul tuo account Amazon. Seleziona un altro metodo di pagamento."
 "The currency selected is not supported by Amazon Pay","La valuta selezionata non è supportata da Amazon Pay su questo sito."
 "Captured amount of %1 online","Importo acquisito di %1 online."
@@ -18,4 +18,11 @@
 "Amazon could not process your request.","Il servizio Amazon Pay non ha potuto elaborare la tua richiesta. Riprova."
 "Please select a payment method.","Seleziona un metodo di pagamento."
 "Your session has expired, please reload the page and try again.","La sessione è scaduta. Ricarica la pagina e riprova."
-"Return to standard checkout","Ritorna al tuo checkout originale"
\ No newline at end of file
+"Return to standard checkout","Ritorna al tuo checkout originale"
+"Amazon Pay was unable to authenticate the payment instrument.  Please try again, or use a different payment method.","Si è verificato un problema con il pagamento. L'ordine non è stato effettuato, pertanto non ti è stato addebitato alcun importo."
+"The SCA challenge was not completed successfully.  Please try again, or use a different payment method.","Si è verificato un problema con il metodo di pagamento. Per effettuare l'ordine, prova con un altro metodo di pagamento."
+"Your transaction with Amazon Pay is currently being validated. Please be aware that we will inform you shortly as needed.","La vostra transazione con Amazon Pay e in fase di validazione. Vi informeremo del risultato della transazione a breve."
+"In order to reset your password, please <a href=""%1"">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page","Per resettare la tua password, per favore <a href=""%1"">Esci</a> dal tuo account e seleziona “Hai dimenticato la password?" dalla pagina di Accesso"
+"The selected payment method is not available for this transaction. Please select another one or add a new payment method to the wallet widget.","Il metodo di pagamento selezionato non è disponibile per questa transazione. Per favore selezionarne o aggiungerne un altro nel wallet widget."
+"No payment instrument has been selected for this order, please try to refresh the page or add a new payment instrument in the wallet widget.","Non è stato selezionato nessun metodo di pagamento per questo ordine. Per favore ricaricare la pagina o aggiungere un nuovo metodo di pagamento nel wallet widget."
+"The order failed due to a technical error, please select another payment method or contact our support.","Non è stato possibile processare l’ordine a causa di un problema tecnico. Per favore selezionare un altro metodo di pagamento o contattare il supporto."

--- a/view/frontend/layout/checkout_index_index.xml
+++ b/view/frontend/layout/checkout_index_index.xml
@@ -15,7 +15,7 @@
  * permissions and limitations under the License.
  */
 -->
-<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" layout="checkout" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
+<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
     <body>
         <referenceBlock name="minicart">
             <arguments>
@@ -45,8 +45,20 @@
                                         <item name="shipping-step" xsi:type="array">
                                             <item name="children" xsi:type="array">
                                                 <item name="shippingAddress" xsi:type="array">
+                                                    <item name="component" xsi:type="string">Amazon_Payment/js/view/shipping</item>
                                                     <item name="children" xsi:type="array">
+                                                        <item name="address-list" xsi:type="array">
+                                                            <item name="component" xsi:type="string">Amazon_Payment/js/view/shipping-address/list</item>
+                                                        </item>
+                                                        <item name="shipping-address-fieldset" xsi:type="array">
+                                                            <item name="children" xsi:type="array">
+                                                                <item name="inline-form-manipulator" xsi:type="array">
+                                                                    <item name="component" xsi:type="string">Amazon_Payment/js/view/shipping-address/inline-form</item>
+                                                                </item>
+                                                            </item>
+                                                        </item>
                                                         <item name="customer-email" xsi:type="array">
+                                                            <item name="component" xsi:type="string">Amazon_Payment/js/view/form/element/email</item>
                                                             <item name="children" xsi:type="array">
                                                                 <item name="amazon-button-region" xsi:type="array">
                                                                     <item name="component" xsi:type="string">uiComponent</item>

--- a/view/frontend/requirejs-config.js
+++ b/view/frontend/requirejs-config.js
@@ -27,6 +27,9 @@ var config = {
         mixins: {
             'Amazon_Payment/js/action/place-order': {
                 'Amazon_Payment/js/model/place-order-mixin': true
+            },
+            'Magento_Tax/js/view/checkout/summary/grand-total': {
+                'Amazon_Payment/js/view/checkout/summary/grand-total-mixin': true
             }
         }
     }

--- a/view/frontend/templates/minicart-button.phtml
+++ b/view/frontend/templates/minicart-button.phtml
@@ -17,32 +17,29 @@
 /**
  * @var \Amazon\Payment\Block\Minicart\Button $block
  */
-$config = [
-    'Amazon_Payment/js/amazon-button' => [
-        'buttonType' => 'PwA'
-    ]
-];
+$config = ['buttonType' => 'PwA'];
 
-$tooltipConfig = [
-    'dropdown' => [
-        'activeClass' => '_active'
-    ]
-];
+$tooltipConfig = ['activeClass' => '_active'];
+$jsonHelper = $this->helper(Magento\Framework\Json\Helper\Data::class);
 ?>
 
 <div id="minicart-amazon-pay-button" class="amazon-minicart-container">
+    <div class="amazon-divider">
+        <span><?= __('or') ?></span>
+    </div>
+
     <div class="amazon-button-container">
         <div class="amazon-button-container__cell">
             <div id="PayWithAmazon-<?= /* @noEscape */ $block->getParentBlock()->getJsId() ?>"
                  class="login-with-amazon"
-                 data-mage-init='<?= /* @noEscape */ json_encode($config); ?>'>
+                 data-mage-init='{"Amazon_Payment/js/amazon-button":<?= /* @noEscape */ $jsonHelper->jsonEncode($config) ?>}'>
             </div>
         </div>
 
         <div class="amazon-button-container__cell">
             <div class="field-tooltip toggle">
                 <span class="field-tooltip-action action-help"
-                      data-mage-init='<?= /* @noEscape */ json_encode($tooltipConfig); ?>'
+                      data-mage-init='{"dropdown":<?= /* @noEscape */ $jsonHelper->jsonEncode($tooltipConfig) ?>}'
                       data-toggle="dropdown"
                       aria-haspopup="true"
                       aria-expanded="false">

--- a/view/frontend/templates/payment-link-product-page.phtml
+++ b/view/frontend/templates/payment-link-product-page.phtml
@@ -15,7 +15,10 @@
  */
 ?>
 <?php /** @var \Amazon\Payment\Block\ProductPagePaymentLink $block */ ?>
+<div class="amazon-checkout-now"><?= __('Checkout now') ?></div>
+
 <div class="amazon-button-container centered-button">
+
     <div class="amazon-button-container__cell">
         <a href="javascript:;"
            class="amazon-addtoCart"

--- a/view/frontend/templates/widget/resetpassword.phtml
+++ b/view/frontend/templates/widget/resetpassword.phtml
@@ -6,9 +6,11 @@
 
 // @codingStandardsIgnoreFile
 
-/** @var \Magento\Customer\Block\Widget\Company $block */
+/** @var \Amazon\Payment\Block\Widget\ResetPassword $block */
 ?>
 <div class="field password-info">
-    <p><?= $block->escapeHtml(__('If you created this account using Amazon Pay, you might not know your site password.')) ?>
-        <a href="<?= $block->escapeHtml($block->getLink()); ?>"><?= $block->escapeHtml(__('Request a password to change your account password.')); ?></a></p>
+    <p>
+        <?= $block->escapeHtml(__('If you created this account using Amazon Pay, you might not know your site password.')) ?><br />
+        <?= __('In order to reset your password, please <a href="%1">Sign Out</a> and click on “Forgot Your Password?” from the Sign In page', $block->getLink()) ?>
+    </p>
 </div>

--- a/view/frontend/web/css/source/_module.less
+++ b/view/frontend/web/css/source/_module.less
@@ -15,6 +15,18 @@
 
 & when (@media-common = true) {
 
+    .amazon-divider {
+        border-bottom: 1px solid #cccccc;
+        line-height: 0.1em;
+        margin: 18px 0 20px;
+        text-align: center;
+        max-width: 500px;
+        span {
+            background: #fff;
+            padding:0 5px;
+        }
+    }
+
     /** mini cart styling **/
     .product-social-links,
     .amazon-minicart-container {
@@ -23,9 +35,8 @@
         text-align: center;
         .amazon-button-container {
             display: inline-block;
-            margin: 12px 0 4px 0;
+            margin: 0px;
         }
-
         .field-tooltip {
             .field-tooltip-content {
                 top: 38px;
@@ -50,7 +61,17 @@
             }
         }
     }
-
+    .product-social-links {
+        .amazon-button-container {
+            margin-bottom: 30px;
+            display: block;
+        }
+    }
+    .amazon-checkout-now {
+        border-top: 1px solid #c1c1c1;
+        padding-top: 10px;
+        margin-bottom: 10px;
+    }
     .amazon-addtoCart {
         display: block;
         width: 100%;
@@ -62,6 +83,7 @@
 
     .revert-checkout {
         margin-top: 20px;
+        margin-bottom: 20px;
         display: block;
     }
 
@@ -89,7 +111,11 @@
     }
 
     .checkout-methods-items {
-
+        .amazon-minicart-container {
+            .amazon-divider {
+                display: none;
+            }
+        }
         .centered-button {
             margin-bottom: 0;
 
@@ -120,11 +146,6 @@
         }
     }
 
-    /** hide alt currency - if multicurrency is enabled this will be unhidden dynamically **/
-    tr.totals.charge {
-        display: none;
-    }
-
     .amazon-widget {
         max-width: 400px;
         height: 228px;
@@ -141,6 +162,12 @@
         }
     }
 
+    #checkout-step-shipping {
+        .amazon-divider {
+            margin: 40px 0;
+        }
+    }
+
     .checkout-payment-method {
         .amazon-payment-method {
             .payment-method-title {
@@ -182,4 +209,4 @@
             margin-bottom: 0;
         }
     }
-}
\ No newline at end of file
+}

--- a/view/frontend/web/js/action/place-order.js
+++ b/view/frontend/web/js/action/place-order.js
@@ -23,9 +23,10 @@ define(
         'Magento_Customer/js/model/customer',
         'Magento_Checkout/js/model/full-screen-loader',
         'Amazon_Payment/js/model/storage',
-        'Amazon_Payment/js/model/amazonPaymentConfig'
+        'Amazon_Payment/js/model/amazonPaymentConfig',
+        'Magento_Customer/js/customer-data'
     ],
-    function (quote, urlBuilder, storage, url, errorProcessor, customer, fullScreenLoader, amazonStorage, amazonPaymentConfig) {
+    function (quote, urlBuilder, storage, url, errorProcessor, customer, fullScreenLoader, amazonStorage, amazonPaymentConfig, customerData) {
         'use strict';
 
         return function (paymentData, redirectOnSuccess) {
@@ -39,6 +40,7 @@ define(
                     quoteId: quote.getQuoteId()
                 });
                 payload = {
+                    confirmOrder: true,
                     cartId: quote.getQuoteId(),
                     email: quote.guestEmail,
                     paymentMethod: paymentData,
@@ -47,6 +49,7 @@ define(
             } else {
                 serviceUrl = urlBuilder.createUrl('/carts/mine/set-payment-information', {});
                 payload = {
+                    confirmOrder: true,
                     cartId: quote.getQuoteId(),
                     paymentMethod: paymentData,
                     billingAddress: quote.billingAddress()
@@ -54,7 +57,8 @@ define(
             }
 
             fullScreenLoader.startLoader();
-            if(['de', 'uk'].indexOf(amazonPaymentConfig.getValue('region')) !== -1) {
+            customerData.invalidate(['cart']);
+            if(amazonPaymentConfig.getValue('scaRegions').indexOf(amazonPaymentConfig.getValue('region')) !== -1) {
                 console.log('SCA enabled for region: ' + amazonPaymentConfig.getValue('region'));
                 return OffAmazonPayments.initConfirmationFlow(amazonPaymentConfig.getValue('merchantId'), amazonStorage.getOrderReference(), function(confirmationFlow) {
                     return storage.post(

--- a/view/frontend/web/js/amazon-button.js
+++ b/view/frontend/web/js/amazon-button.js
@@ -18,11 +18,12 @@ define([
     'Magento_Customer/js/section-config',
     'Amazon_Payment/js/model/amazonPaymentConfig',
     'amazonCsrf',
+    'Magento_Checkout/js/model/full-screen-loader',
     'modernizr/modernizr',
     'amazonCore',
-    'jquery/ui',
-    'uiRegistry'
-], function ($, customerData, sectionConfig, amazonPaymentConfig, amazonCsrf) {
+    'uiRegistry',
+    'mage/cookies'
+], function ($, customerData, sectionConfig, amazonPaymentConfig, amazonCsrf, fullScreenLoader) {
     'use strict';
     var _this;
 
@@ -96,6 +97,7 @@ define([
                 if (sections) {
                     customerData.invalidate(sections);
                 }
+                $.mage.cookies.set('amazon_Login_accessToken', event.access_token);
                 window.location = _this.options.redirectUrl + '?access_token=' + event.access_token;
                 // jscs:enable requireCamelCaseOrUpperCaseIdentifiers
             },

--- a/view/frontend/web/js/amazon-core.js
+++ b/view/frontend/web/js/amazon-core.js
@@ -18,13 +18,14 @@ define([
     'ko',
     'mage/url',
     'amazonPaymentConfig',
+    'Magento_Ui/js/model/messageList',
     'amazonWidgetsLoader',
-    'jquery/jquery-storageapi'
-], function ($, ko, url, amazonPaymentConfig) {
+    'jquery/jquery-storageapi',
+    'mage/cookies'
+], function ($, ko, url, amazonPaymentConfig, messageList) {
     'use strict';
 
-    var clientId = amazonPaymentConfig.getValue('clientId'),
-        amazonDefined = ko.observable(false),
+    var amazonDefined = ko.observable(false),
         amazonLoginError = ko.observable(false),
         accessToken = ko.observable(null),
         // Match region config to amazon.Login.Region
@@ -32,23 +33,22 @@ define([
         sandboxMode,
         region;
 
-    if (typeof amazon === 'undefined') {
-        /**
-         * Amazon login ready callback
-         */
-        window.onAmazonLoginReady = function () {
-            setClientId(clientId);  //eslint-disable-line no-use-before-define
-            doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
+    accessToken($.mage.cookies.get('amazon_Login_accessToken'));
 
-            sandboxMode = amazonPaymentConfig.getValue('isSandboxEnabled', false);
-            amazon.Login.setSandboxMode(sandboxMode); //eslint-disable-line no-undef
+    var initAmazonLogin = function () {
+        amazon.Login.setClientId(amazonPaymentConfig.getValue('clientId')); //eslint-disable-line no-undef
+        amazon.Login.setSandboxMode(amazonPaymentConfig.getValue('isSandboxEnabled', false)); //eslint-disable-line no-undef
+        amazon.Login.setRegion(regions[amazonPaymentConfig.getValue('region')]); //eslint-disable-line no-undef
+        amazon.Login.setUseCookie(true); //eslint-disable-line no-undef
 
-            region = regions[amazonPaymentConfig.getValue('region')];
-            amazon.Login.setRegion(region); //eslint-disable-line no-undef
-        };
-    } else {
-        setClientId(clientId);  //eslint-disable-line no-use-before-define
         doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
+        amazonDefined(true);
+    };
+
+    if (typeof amazon === 'undefined') {
+        window.onAmazonLoginReady = initAmazonLogin;
+    } else {
+        initAmazonLogin();
     }
 
     // Widgets.js ready callback
@@ -56,19 +56,11 @@ define([
         $(window).trigger('OffAmazonPayments');
     };
 
-    /**
-     * Set Client ID
-     * @param {String} cid
-     */
-    function setClientId(cid) {
-        amazon.Login.setClientId(cid); //eslint-disable-line no-undef
-        amazonDefined(true);
-    }
-
     /**
      * Log user out of amazon
      */
     function amazonLogout() {
+        $.mage.cookies.clear('amazon_Login_accessToken');
         $.ajax({
             url: url.build('amazon/logout'),
             context: this
@@ -108,39 +100,31 @@ define([
         amazonLoginError(true);
     }
 
-    return {
-        /**
-         * Verify a user is logged into amazon
-         */
-        verifyAmazonLoggedIn: function () {
-            var defer  = $.Deferred(),
-                loginOptions = {
-                    scope: amazonPaymentConfig.getValue('loginScope'),
-                    popup: true,
-                    interactive: 'never'
-                };
-
-            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
-            amazon.Login.authorize(loginOptions, function (response) { //eslint-disable-line no-undef
-                if (response.error) {
-                    defer.reject(response.error);
-                } else {
-                    accessToken(response.access_token);
-                    defer.resolve(!response.error);
-                }
-            });
-            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers
-
-            return defer.promise();
-        },
+    function handleWidgetError(error) {
+        console.log('OffAmazonPayments.Widgets', error.getErrorCode(), error.getErrorMessage());
+        switch (error.getErrorCode()) {
+            case 'BuyerSessionExpired':
+                messageList.addErrorMessage({message: $.mage.__('Your Amazon session has expired.  Please sign in again by clicking the Amazon Pay Button.')});
+                var storage = require('Amazon_Payment/js/model/storage'); //TODO: clean up this circular dependency
+                storage.amazonlogOut();
+                break;
+            case 'ITP':
+                // ITP errors are how handled within the widget code
+                break;
+            default:
+                messageList.addErrorMessage({message: $.mage.__(error.getErrorMessage())});
+        }
+    }
 
+    return {
         /**
          * Log user out of Amazon
          */
         AmazonLogout: amazonLogout,
         amazonDefined: amazonDefined,
         accessToken: accessToken,
-        amazonLoginError: amazonLoginError
+        amazonLoginError: amazonLoginError,
+        handleWidgetError: handleWidgetError
     };
 
 });

--- a/view/frontend/web/js/amazon-product-add.js
+++ b/view/frontend/web/js/amazon-product-add.js
@@ -16,8 +16,7 @@
 define([
     'jquery',
     'Magento_Customer/js/customer-data',
-    'amazonCore',
-    'jquery/ui'
+    'amazonCore'
 ], function ($, customerData) {
     'use strict';
 

--- /dev/null
+++ b/view/frontend/web/js/messages.js
@@ -0,0 +1,58 @@
+/**
+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+define(
+    [
+        'jquery',
+        'Amazon_Payment/js/model/storage',
+        'Magento_Theme/js/view/messages',
+        'Magento_Ui/js/model/messageList'
+    ], function(
+        $,
+        amazonStorage,
+        messagesFactory,
+        messageList
+    ) {
+        'use strict';
+
+        return {
+            defaults: {},
+            isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
+
+            /*
+             * Magento's core Checkout module removes the "messages" block from the layout,
+             *  so we display them on checkout using the messageList API.
+             */
+            displayMessages: function () {
+                if(this.isAmazonAccountLoggedIn()) {
+                    var messagesComponent = messagesFactory();
+                    messagesComponent.cookieMessages.forEach(function(message) {
+                        if(message.type == 'error') {
+                            messageList.addErrorMessage({message: $.mage.__($("<textarea/>").html(message.text).text())});
+                        }
+                    });
+                }
+            },
+
+            addMessage: function (type, messageText) {
+                var messageComponent = messagesFactory();
+
+                if (type === 'error') {
+                    messageList.addErrorMessage({message: $.mage.__($("<textarea/>").html(messageText).text())});
+                }
+            }
+        }
+    }
+);

--- a/view/frontend/web/js/model/storage.js
+++ b/view/frontend/web/js/model/storage.js
@@ -30,11 +30,10 @@ define(
 
         var isAmazonAccountLoggedIn = ko.observable(false),
             isAmazonEnabled = ko.observable(amazonPaymentConfig.getValue('isPwaEnabled')),
+            orderReferenceId = ko.observable(amazonPaymentConfig.getValue('orderReferenceId')),
             orderReference,
             addressConsentToken = amazonCore.accessToken,
             //eslint-disable-next-line no-use-before-define
-            isAmazonDefined = amazonCore.amazonDefined.subscribe(checkAmazonDefined),
-            //eslint-disable-next-line no-use-before-define
             amazonLoginError = amazonCore.amazonLoginError.subscribe(setAmazonLoggedOutIfLoginError),
             amazonDeclineCode = ko.observable(false),
             sandboxSimulationReference = ko.observable('default'),
@@ -48,27 +47,26 @@ define(
             isAmazonCartInValid = ko.computed(function () {
                 return isAmazonAccountLoggedIn() && isQuoteDirty();
             }),
-            isLoginRedirectPage = $('body').hasClass('amazon-login-login-processauthhash');
+            isLoginRedirectPage = $('body').hasClass('amazon-login-login-processauthhash'),
+            amazonCustomerEmail = ko.computed(function () {
+                // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
+                if (window.hasOwnProperty('checkoutConfig') &&
+                    window.checkoutConfig.hasOwnProperty('amazonLogin') &&
+                    typeof window.checkoutConfig.amazonLogin.amazon_customer_email === 'string'
+                ) {
+                    return window.checkoutConfig.amazonLogin.amazon_customer_email;
+                }
+                // jscs:enable requireCamelCaseOrUpperCaseIdentifiers
+                return '';
+            });
+
 
-        /**
-         * Subscribes to amazonDefined observable which runs when amazon object becomes available
-         * @param {String} amazonDefined
-         */
-        function checkAmazonDefined(amazonDefined) {
-            if (amazonDefined && !isLoginRedirectPage) {
-                verifyAmazonLoggedIn(); //eslint-disable-line no-use-before-define
-                //remove subscription to amazonDefined once loaded
-                isAmazonDefined.dispose();
-            }
-        }
 
         /**
          * Log out amazon user
          */
         function amazonLogOut() {
-            if (amazonCore.amazonDefined()) {
-                amazonCore.AmazonLogout();
-            }
+            amazonCore.AmazonLogout();
             this.isAmazonAccountLoggedIn(false);
         }
 
@@ -89,24 +87,20 @@ define(
             }
         });
 
-        //run this on loading storage model. If not defined subscribe will trigger when true
-        checkAmazonDefined(amazonCore.amazonDefined());
+        verifyAmazonLoggedIn();
         setAmazonLoggedOutIfLoginError(amazonCore.amazonLoginError());
 
         /**
          * Verifies amazon user is logged in
          */
         function verifyAmazonLoggedIn() {
-            amazonCore.verifyAmazonLoggedIn().then(function (response) {
-                if (!amazonCore.amazonLoginError()) {
-                    isAmazonAccountLoggedIn(response);
-                }
-            });
+            isAmazonAccountLoggedIn(!!amazonCore.accessToken());
         }
 
         return {
             isAmazonAccountLoggedIn: isAmazonAccountLoggedIn,
             isAmazonEnabled: isAmazonEnabled,
+            orderReferenceId: orderReferenceId,
             amazonDeclineCode: amazonDeclineCode,
             sandboxSimulationReference: sandboxSimulationReference,
             isPlaceOrderDisabled: isPlaceOrderDisabled,
@@ -115,6 +109,8 @@ define(
             isQuoteDirty: isQuoteDirty,
             isPwaVisible: isPwaVisible,
             amazonlogOut: amazonLogOut,
+            amazonDefined: amazonCore.amazonDefined,
+            amazonCustomerEmail: amazonCustomerEmail,
 
             /**
              * Set order reference
@@ -127,7 +123,7 @@ define(
              * Get order reference
              */
             getOrderReference: function () {
-                return orderReference;
+                return this.orderReferenceId() || orderReference;
             },
 
             /**

--- a/view/frontend/web/js/view/checkout-revert.js
+++ b/view/frontend/web/js/view/checkout-revert.js
@@ -52,7 +52,7 @@ define(
                 ).done(
                     function () {
                         amazonStorage.amazonlogOut();
-                        window.location.reload();
+                        fullScreenLoader.stopLoader();
                     }
                 ).fail(
                     function (response) {

--- a/view/frontend/web/js/view/checkout-widget-address.js
+++ b/view/frontend/web/js/view/checkout-widget-address.js
@@ -11,6 +11,7 @@ define(
         'Magento_Checkout/js/model/shipping-rate-processor/new-address',
         'Magento_Checkout/js/action/set-shipping-information',
         'Amazon_Payment/js/model/storage',
+        'amazonCore',
         'Magento_Checkout/js/model/shipping-service',
         'Magento_Checkout/js/model/address-converter',
         'mage/storage',
@@ -19,7 +20,8 @@ define(
         'Magento_Checkout/js/model/url-builder',
         'Magento_Checkout/js/checkout-data',
         'Magento_Checkout/js/model/checkout-data-resolver',
-        'uiRegistry'
+        'uiRegistry',
+        'Amazon_Payment/js/messages'
     ],
     function (
         $,
@@ -31,6 +33,7 @@ define(
         shippingProcessor,
         setShippingInformationAction,
         amazonStorage,
+        amazonCore,
         shippingService,
         addressConverter,
         storage,
@@ -39,7 +42,8 @@ define(
         urlBuilder,
         checkoutData,
         checkoutDataResolver,
-        registry
+        registry,
+        amazonMessages
     ) {
         'use strict';
 
@@ -55,6 +59,7 @@ define(
                 widgetScope: registry.get('amazonPayment').loginScope
             },
             isCustomerLoggedIn: customer.isLoggedIn,
+            amazonCustomerEmail: amazonStorage.amazonCustomerEmail,
             isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
             isAmazonEnabled: ko.observable(registry.get('amazonPayment').isPwaEnabled),
             rates: shippingService.getShippingRates(),
@@ -65,13 +70,26 @@ define(
             initialize: function () {
                 self = this;
                 this._super();
+                // Update checkoutUrl for step-navigator if orderReferenceId is set (e.g. InvaldPaymentMethod)
+                if (amazonStorage.orderReferenceId()) {
+                    window.checkoutConfig.checkoutUrl += '?orderReferenceId=' + amazonStorage.orderReferenceId()
+                }
             },
 
             /**
              * Call when component template is rendered
              */
             initAddressWidget: function () {
-                self.renderAddressWidget();
+                if(amazonStorage.amazonDefined()) {
+                    self.renderAddressWidget();
+                } else {
+                    var subscription = amazonStorage.amazonDefined.subscribe(function (defined) { //eslint-disable-line vars-on-top
+                        if (defined) {
+                            self.renderAddressWidget();
+                            subscription.dispose();
+                        }
+                    });
+                }
             },
 
             /**
@@ -86,8 +104,7 @@ define(
                      * Order reference creation callback
                      */
                     onOrderReferenceCreate: function (orderReference) {
-                        var orderid = orderReference.getAmazonOrderReferenceId();
-
+                        var orderid = amazonStorage.orderReferenceId() || orderReference.getAmazonOrderReferenceId();
                         amazonStorage.setOrderReference(orderid);
                     },
 
@@ -97,6 +114,7 @@ define(
                     onAddressSelect: function () { // orderReference
                         self.getShippingAddressFromAmazon();
                     },
+                    displayMode: self.isShippingAddressReadOnly() ? 'Read' : '',
                     design: {
                         designMode: 'responsive'
                     },
@@ -104,10 +122,9 @@ define(
                     /**
                      * Error callback
                      */
-                    onError: function (error) {
-                        console.log('OffAmazonPayments.Widgets.AddressBook', error.getErrorCode(), error.getErrorMessage());
-                    }
+                    onError: amazonCore.handleWidgetError
                 }).bind(self.options.addressWidgetDOMId);
+                amazonMessages.displayMessages();
             },
 
             /**
@@ -147,6 +164,8 @@ define(
                             addressConverter.quoteAddressToFormAddressData(addressData)
                         );
                         checkoutDataResolver.resolveEstimationAddress();
+
+                        amazonStorage.isAmazonShippingAddressSelected(true);
                     }
                 ).fail(
                     function (response) {
@@ -154,6 +173,10 @@ define(
                         //remove shipping loader and set shipping rates to 0 on a fail
                         shippingService.setShippingRates([]);
                         amazonStorage.isShippingMethodsLoading(false);
+                        if (self.isShippingAddressReadOnly()) {
+                            shippingService.isLoading(false);
+                            $('.checkout-shipping-method').hide();
+                        }
                     }
                 );
             },
@@ -170,6 +193,20 @@ define(
              */
             getAddressConsentToken: function () {
                 return amazonStorage.getAddressConsentToken();
+            },
+
+            /**
+             * Is shipping widget set to read-only (orderReferenceId already set?)
+             */
+            isShippingAddressReadOnly: function() {
+                return (amazonStorage.orderReferenceId());
+            },
+
+            /**
+             * Continue to payment (e.g. if shipping address is read-only)
+             */
+            continuePayment: function() {
+                window.location = window.checkoutConfig.checkoutUrl + '#payment';
             }
         });
     }

--- /dev/null
+++ b/view/frontend/web/js/view/checkout/summary/grand-total-mixin.js
@@ -0,0 +1,22 @@
+/*global define*/
+
+define([
+    'Amazon_Payment/js/model/storage'
+], function (amazonStorage) {
+    'use strict';
+
+    return function (GrandTotal) {
+        return GrandTotal.extend({
+            /**
+             * @return {Boolean}
+             */
+            isBaseGrandTotalDisplayNeeded: function () {
+                if (!amazonStorage.isAmazonAccountLoggedIn()) {
+                    return this._super();
+                }
+
+                return false;
+            }
+        });
+    }
+});

--- a/view/frontend/web/js/view/payment/list.js
+++ b/view/frontend/web/js/view/payment/list.js
@@ -35,6 +35,12 @@ define([
         initialize: function () {
 
             self = this;
+            amazonStorage.isAmazonAccountLoggedIn.subscribe(function (value) {
+                if (!value) {
+                    this._reloadPaymentMethods();
+                }
+            }, this);
+
             this._hidePaymentMethodsOnLoad(); //hide methods on load
 
             //subscribe to payment methods to remove other payment methods from render list

--- a/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
+++ b/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
@@ -7,6 +7,7 @@ define(
         'Magento_Customer/js/customer-data',
         'Magento_Checkout/js/model/quote',
         'Amazon_Payment/js/model/storage',
+        'amazonCore',
         'mage/storage',
         'Magento_Checkout/js/model/full-screen-loader',
         'Amazon_Payment/js/action/place-order',
@@ -17,7 +18,8 @@ define(
         'Magento_Checkout/js/model/payment/additional-validators',
         'Magento_Checkout/js/model/url-builder',
         'amazonPaymentConfig',
-        'uiRegistry'
+        'uiRegistry',
+        'Amazon_Payment/js/messages'
     ],
     function (
         $,
@@ -27,6 +29,7 @@ define(
         customerData,
         quote,
         amazonStorage,
+        amazonCore,
         storage,
         fullScreenLoader,
         placeOrderAction,
@@ -37,7 +40,8 @@ define(
         additionalValidators,
         urlBuilder,
         amazonPaymentConfig,
-        registry
+        registry,
+        amazonMessages
     ) {
         'use strict';
 
@@ -112,9 +116,7 @@ define(
                     /**
                      * Error callback
                      */
-                    onError: function (error) {
-                        errorProcessor.process(error);
-                    }
+                    onError: amazonCore.handleWidgetError
                 });
                 if (this.useMultiCurrency) {
                     widget.setPresentmentCurrency(this.presentmentCurrency);
@@ -124,6 +126,7 @@ define(
                     $(this.presentmentDOMId).show();
                 }
                 widget.bind(this.paymentWidgetDOMId);
+                amazonMessages.displayMessages();
             },
 
             /**

--- a/view/frontend/web/js/view/shipping-address/inline-form.js
+++ b/view/frontend/web/js/view/shipping-address/inline-form.js
@@ -8,7 +8,8 @@ define([
     return Component.extend({
         defaults: {
             template: 'Amazon_Payment/shipping-address/inline-form',
-            formSelector: 'co-shipping-form'
+            formSelector: 'co-shipping-form',
+            accountFormSelector: 'customer-email-fieldset'
         },
 
         /**
@@ -31,10 +32,14 @@ define([
          * Show/hide inline form
          */
         hideInlineForm: function(hide) {
-            var elem = document.getElementById(this.formSelector);
+            var shippingForm = document.getElementById(this.formSelector);
+            var accountForm = document.getElementById(this.accountFormSelector);
 
-            if (elem) {
-                document.getElementById(this.formSelector).style.display = hide ? 'none' : 'block';
+            if (shippingForm) {
+                shippingForm.style.display = hide ? 'none' : 'block';
+            }
+            if (accountForm) {
+                accountForm.parentElement.style.display = hide ? 'none' : 'block';
             }
         }
     });

--- a/view/frontend/web/js/view/shipping.js
+++ b/view/frontend/web/js/view/shipping.js
@@ -2,27 +2,22 @@
 define(
     [
         'jquery',
-        'underscore',
-        'ko',
         'Magento_Checkout/js/view/shipping',
         'Magento_Customer/js/model/customer',
-        'Magento_Checkout/js/action/set-shipping-information',
-        'Magento_Checkout/js/model/step-navigator',
-        'Amazon_Payment/js/model/storage'
+        'Amazon_Payment/js/model/storage',
+        'Amazon_Payment/js/messages'
     ],
     function (
         $,
-        _,
-        ko,
         Component,
         customer,
-        setShippingInformationAction,
-        stepNavigator,
-        amazonStorage
+        amazonStorage,
+        amazonMessages
     ) {
         'use strict';
 
         return Component.extend({
+            noShippingAddressSelectedMsg: 'No shipping address has been selected for this order, please try to refresh the page or add a new shipping address in the Address Book widget.',
 
             /**
              * Initialize shipping
@@ -49,32 +44,32 @@ define(
             },
 
             /**
-             * New setShipping Action for Amazon Pay to bypass validation
+             * Overridden validateShippingInformation for Amazon Pay to bypass validation
+             *
+             * @inheritDoc
              */
-            setShippingInformation: function () {
-
-                /**
-                 * Set Amazon shipping info
-                 */
-                function setShippingInformationAmazon() {
-                    setShippingInformationAction().done(
-                        function () {
-                            stepNavigator.next();
-                        }
-                    );
+            validateShippingInformation: function () {
+                if (!amazonStorage.isAmazonAccountLoggedIn()) {
+                    return this._super();
                 }
 
-                if (amazonStorage.isAmazonAccountLoggedIn() && customer.isLoggedIn()) {
-                    setShippingInformationAmazon();
-                } else if (amazonStorage.isAmazonAccountLoggedIn() && !customer.isLoggedIn()) {
+                if (!customer.isLoggedIn()) {
+                    if (!(amazonStorage.isAmazonShippingAddressSelected() && this.validateGuestEmail())) {
+                        amazonMessages.addMessage('error', this.noShippingAddressSelectedMsg);
+                        amazonMessages.displayMessages();
 
-                    if (this.validateGuestEmail()) {
-                        setShippingInformationAmazon();
+                        return false;
                     }
-                    //if using guest checkout or guest checkout with amazon pay we need to use the main validation
-                } else if (this.validateShippingInformation()) {
-                    setShippingInformationAmazon();
                 }
+
+                if (!(amazonStorage.isAmazonShippingAddressSelected())) {
+                    amazonMessages.addMessage('error', this.noShippingAddressSelectedMsg);
+                    amazonMessages.displayMessages();
+
+                    return false;
+                }
+
+                return true;
             }
         });
     }

--- a/view/frontend/web/template/checkout-button.html
+++ b/view/frontend/web/template/checkout-button.html
@@ -19,6 +19,8 @@
     <!-- ko template: getTemplate() --><!-- /ko -->
 <!--/ko-->
 
+<div class="amazon-express-title" data-bind="i18n: 'Express Checkout', visible: !isAmazonAccountLoggedIn() && isPwaVisible()"></div>
+
 <div class="amazon-button-container" data-bind="visible: !isAmazonAccountLoggedIn() && isPwaVisible()">
     <div class="amazon-button-container__cell">
         <div class="login-with-amazon" data-bind="attr: {id: 'PayWithAmazon_' + displayArea}, mageInit: {'amazonButton':{'buttonType': 'PwA'}}"></div>
@@ -32,6 +34,10 @@
     </div>
 </div>
 
+<div class="amazon-divider" data-bind="visible: !isAmazonAccountLoggedIn() && isPwaVisible()">
+    <span data-bind="i18n: 'Or continue below to pay with a credit card'"></span>
+</div>
+
 <!-- ko foreach: getRegion('after-amazon-button') -->
     <!-- ko template: getTemplate() --><!-- /ko -->
 <!--/ko-->

--- a/view/frontend/web/template/checkout-widget-address.html
+++ b/view/frontend/web/template/checkout-widget-address.html
@@ -20,9 +20,23 @@
 <!--/ko-->
 
 <!-- ko if: (isAmazonAccountLoggedIn) -->
+    <label class="label" for="amazon-email-address">
+        <span data-bind="i18n: 'Email Address:'"></span>
+    </label>
+    <span id="amazon-email-address" data-bind="text: amazonCustomerEmail" />
     <div class="amazon-widget-container">
         <div id="addressBookWidgetDiv" class="amazon-widget amazon-widget--address" data-bind="afterRender: initAddressWidget"></div>
     </div>
+
+    <div class="methods-shipping" data-bind="visible: isShippingAddressReadOnly()">
+        <div class="actions-toolbar">
+            <button id="amazon-continue-payment" data-role="opc-continue" type="submit" class="button action primary"
+                    data-bind="click: continuePayment">
+                <span data-bind="i18n: 'Next'"></span>
+            </button>
+        </div>
+    </div>
+
 <!--/ko-->
 
 <!-- ko foreach: getRegion('after-widget-address') -->

--- a/view/frontend/web/template/form/element/email.html
+++ b/view/frontend/web/template/form/element/email.html
@@ -53,7 +53,7 @@
                 </label>
                 <div class="control">
                     <input class="input-text"
-                           placeholder="optional"
+                           placeholder="Password"
                            type="password"
                            name="password"
                            id="customer-password"

