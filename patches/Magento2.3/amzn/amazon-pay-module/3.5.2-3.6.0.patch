--- a/Gateway/Http/Client/SettlementClient.php
+++ b/Gateway/Http/Client/SettlementClient.php
@@ -37,8 +37,12 @@ class SettlementClient extends AbstractClient
                 'currency_code' => $data['currency_code'],
                 'capture_reference_id' => $data['amazon_order_reference_id'] . '-C' . time()
             ];
+            if (isset($data['seller_note'])) {
+                $captureData['seller_capture_note'] = $data['seller_note'];
+            }
 
-            $response = $this->adapter->completeCapture($captureData, $data['store_id']);
+            $response = $this->adapter->completeCapture($captureData, $data['store_id'], $data['amazon_order_reference_id']);
+            $response['reauthorized'] = false;
         } else {
             // if invalid - reauthorize and capture
             $captureData = [
@@ -49,6 +53,9 @@ class SettlementClient extends AbstractClient
                 'custom_information' => $data['custom_information'],
                 'platform_id' => $data['platform_id']
             ];
+            if (isset($data['seller_note'])) {
+                $captureData['seller_authorization_note'] = $data['seller_note'];
+            }
             $response = $this->adapter->authorize($data, true);
             $response['reauthorized'] = true;
         }

--- a/Gateway/Request/AuthorizationRequestBuilder.php
+++ b/Gateway/Request/AuthorizationRequestBuilder.php
@@ -154,15 +154,7 @@ class AuthorizationRequestBuilder implements BuilderInterface
             $data['additional_information'] =
                 $payment->getAdditionalInformation(AdditionalInformation::KEY_SANDBOX_SIMULATION_REFERENCE);
 
-            $eventData = [
-                'amazon_order_reference_id' => $amazonId,
-                'authorization_amount' => $total,
-                'currency_code' => $currencyCode,
-                'authorization_reference_id' => $amazonId . '-A' . time(),
-                'capture_now' => false,
-            ];
-
-            $transport = new DataObject($eventData);
+            $transport = new DataObject($data);
             $this->eventManager->dispatch(
                 'amazon_payment_authorize_before',
                 [
@@ -171,6 +163,7 @@ class AuthorizationRequestBuilder implements BuilderInterface
                     'transport' => $transport
                 ]
             );
+            $data = $transport->getData();
         }
 
         return $data;

--- a/Gateway/Request/SettlementRequestBuilder.php
+++ b/Gateway/Request/SettlementRequestBuilder.php
@@ -82,6 +82,41 @@ class SettlementRequestBuilder implements BuilderInterface
         $this->logger = $logger;
     }
 
+    /**
+     * @param \Magento\Sales\Model\Order\Payment $payment
+     * @return \Magento\Sales\Model\Order\Invoice
+     */
+    protected function getCurrentInvoice($payment)
+    {
+        $result = null;
+        $order = $payment->getOrder();
+        foreach ($order->getInvoiceCollection() as $invoice) {
+            if (!$invoice->getId()) {
+                $result = $invoice;
+                break;
+            }
+        }
+        return $result;
+    }
+
+    /**
+     * @param \Magento\Sales\Model\Order\Payment $payment
+     * @return string
+     */
+    protected function getSellerNote($payment)
+    {
+        $result = '';
+        $invoice = $this->getCurrentInvoice($payment);
+        if ($invoice && $invoice->getComments()) {
+            foreach ($invoice->getComments() as $comment) {
+                if ($comment->getComment()) {
+                    $result = $comment->getComment();
+                    break;
+                }
+            }
+        }
+        return $result;
+    }
 
     /**
      * @param array $buildSubject
@@ -125,6 +160,10 @@ class SettlementRequestBuilder implements BuilderInterface
                 }
         }
 
+        if ($this->coreHelper->isSandboxEnabled('store', $orderDO->getStoreId())) {
+            $data['seller_note'] = $this->getSellerNote($paymentDO->getPayment());
+        }
+
         return $data;
     }
 }

--- a/Gateway/Response/SettlementHandler.php
+++ b/Gateway/Response/SettlementHandler.php
@@ -18,8 +18,8 @@ namespace Amazon\Payment\Gateway\Response;
 
 use Magento\Payment\Gateway\Response\HandlerInterface;
 use Magento\Payment\Model\Method\Logger;
+use Amazon\Payment\Api\Data\PendingCaptureInterfaceFactory;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
-use Amazon\Core\Helper\Data;
 use Magento\Sales\Api\OrderRepositoryInterface;
 use Magento\Quote\Api\CartRepositoryInterface;
 
@@ -37,9 +37,9 @@ class SettlementHandler implements HandlerInterface
     private $subjectReader;
 
     /**
-     * @var Data
+     * @var PendingCaptureInterfaceFactory
      */
-    private $coreHelper;
+    private $pendingCaptureFactory;
 
     /**
      * @var OrderRepositoryInterface
@@ -56,20 +56,20 @@ class SettlementHandler implements HandlerInterface
      *
      * @param Logger                   $logger
      * @param SubjectReader            $subjectReader
-     * @param Data                     $coreHelper
+     * @param PendingCaptureInterfaceFactory $pendingCaptureFactory
      * @param OrderRepositoryInterface $orderRepository
      * @param CartRepositoryInterface  $quoteRepository
      */
     public function __construct(
         Logger $logger,
         SubjectReader $subjectReader,
-        Data $coreHelper,
+        PendingCaptureInterfaceFactory $pendingCaptureFactory,
         OrderRepositoryInterface $orderRepository,
         CartRepositoryInterface $quoteRepository
     ) {
         $this->logger = $logger;
         $this->subjectReader = $subjectReader;
-        $this->coreHelper = $coreHelper;
+        $this->pendingCaptureFactory = $pendingCaptureFactory;
         $this->orderRepository = $orderRepository;
         $this->quoteRepository = $quoteRepository;
     }
@@ -98,6 +98,16 @@ class SettlementHandler implements HandlerInterface
                 $quoteLink->setConfirmed(true)->save();
             }
         } else {
+            if ($response['pending']) {
+                $this->pendingCaptureFactory->create()
+                    ->setCaptureId($response['transaction_id'])
+                    ->setOrderId($paymentDO->getOrder()->getId())
+                    ->setPaymentId($payment->getId())
+                    ->save();
+
+                $payment->setIsTransactionPending(true);
+                $payment->setIsTransactionClosed(false);
+            }
             // finish capture
             $payment->setTransactionId($response['transaction_id']);
         }

--- a/Model/Adapter/AmazonPaymentAdapter.php
+++ b/Model/Adapter/AmazonPaymentAdapter.php
@@ -24,8 +24,6 @@ use Amazon\Payment\Domain\AmazonAuthorizationResponseFactory;
 use Amazon\Payment\Domain\AmazonCaptureResponseFactory;
 use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
-use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
-use Amazon\Payment\Api\Data\PendingCaptureInterfaceFactory;
 use Magento\Framework\UrlInterface;
 use Magento\Sales\Model\OrderRepository;
 use Magento\Framework\App\ObjectManager;
@@ -39,6 +37,8 @@ class AmazonPaymentAdapter
 {
     const SUCCESS_CODES = ['Open', 'Closed', 'Completed'];
 
+    const PENDING_CODE = 'Pending';
+
     /**
      * @var Logger
      */
@@ -74,16 +74,6 @@ class AmazonPaymentAdapter
      */
     private $coreHelper;
 
-    /**
-     * @var PendingCaptureInterfaceFactory
-     */
-    private $pendingCaptureFactory;
-
-    /**
-     * @var PendingAuthorizationInterfaceFactory
-     */
-    private $pendingAuthorizationFactory;
-
     /**
      * @var UrlInterface
      */
@@ -105,8 +95,6 @@ class AmazonPaymentAdapter
      * @param AmazonCaptureResponseFactory $amazonCaptureResponseFactory
      * @param AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory
      * @param AmazonAuthorizationResponseFactory $amazonAuthorizationResponseFactory
-     * @param PendingCaptureInterfaceFactory $pendingCaptureFactory
-     * @param PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory
      * @param SubjectReader $subjectReader
      * @param Data $coreHelper
      * @param Logger $logger
@@ -119,8 +107,6 @@ class AmazonPaymentAdapter
         AmazonCaptureResponseFactory $amazonCaptureResponseFactory,
         AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory,
         AmazonAuthorizationResponseFactory $amazonAuthorizationResponseFactory,
-        PendingCaptureInterfaceFactory $pendingCaptureFactory,
-        PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory,
         SubjectReader $subjectReader,
         Data $coreHelper,
         Logger $logger,
@@ -135,8 +121,6 @@ class AmazonPaymentAdapter
         $this->amazonAuthorizationResponseFactory = $amazonAuthorizationResponseFactory;
         $this->subjectReader = $subjectReader;
         $this->coreHelper = $coreHelper;
-        $this->pendingCaptureFactory = $pendingCaptureFactory;
-        $this->pendingAuthorizationFactory = $pendingAuthorizationFactory;
         $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
         $this->orderLinkFactory = $orderLinkFactory ?: ObjectManager::getInstance()->get(OrderLinkFactory::class);
         $this->orderRepository = $orderRepository ?: ObjectManager::getInstance()->get(OrderRepository::class);
@@ -268,6 +252,10 @@ class AmazonPaymentAdapter
             'transaction_timeout' => 0
         ];
 
+        if (isset($data['seller_authorization_note'])) {
+            $authorizeData['seller_authorization_note'] = $data['seller_authorization_note'];
+        }
+
         /** if first synchronous attempt failed, on second attempt try an asynchronous attempt. */
         if ($authMode != 'synchronous' && $attempts) {
             $authorizeData['transaction_timeout'] = 1440;
@@ -284,7 +272,7 @@ class AmazonPaymentAdapter
         if ($authorizeResponse->getCaptureTransactionId() || $authorizeResponse->getAuthorizeTransactionId()) {
             $response['authorize_transaction_id'] = $authorizeResponse->getAuthorizeTransactionId();
 
-            if ($authorizeResponse->getStatus()->getState() == 'Pending' && $authMode == 'synchronous_possible') {
+            if ($authorizeResponse->getStatus()->getState() == self::PENDING_CODE && $authMode == 'synchronous_possible') {
                 if ($captureNow) {
                     $response['capture_transaction_id'] = $authorizeResponse->getCaptureTransactionId();
                 }
@@ -321,8 +309,8 @@ class AmazonPaymentAdapter
     }
 
     /**
-     * @param $data
-     * @param $storeId
+     * @param array $data
+     * @param string $storeId
      * @return array
      */
     public function completeCapture($data, $storeId)
@@ -336,25 +324,14 @@ class AmazonPaymentAdapter
             $captureResponse = $this->amazonCaptureResponseFactory->create(['response' => $responseParser]);
             $capture = $captureResponse->getDetails();
 
-            if (in_array($capture->getStatus()->getState(), self::SUCCESS_CODES)) {
+            $captureCode = $capture->getStatus()->getState();
+            $successCodes = array_merge(self::SUCCESS_CODES, [self::PENDING_CODE]);
+            if (in_array($captureCode, $successCodes)) {
                 $response = [
                     'status' => true,
                     'transaction_id' => $capture->getTransactionId(),
-                    'reauthorized' => false
+                    'pending' => $captureCode == self::PENDING_CODE,
                 ];
-            } elseif ($capture->getStatus()->getState() == 'Pending') {
-                $order = $this->subjectReader->getOrder();
-
-                try {
-                    $this->pendingCaptureFactory->create()
-                        ->setCaptureId($capture->getTransactionId())
-                        ->setOrderId($order->getId())
-                        ->setPaymentId($order->getPayment()->getEntityId())
-                        ->save();
-                } catch (\Exception $e) {
-                    $log['error'] = __('AmazonPaymentAdapter: Unable to capture pending information for capture.');
-                    $this->logger->debug($log);
-                }
             } else {
                 $response['response_code'] = $capture->getReasonCode();
             }

--- a/Plugin/ShippingInformationManagement.php
+++ b/Plugin/ShippingInformationManagement.php
@@ -80,6 +80,10 @@ class ShippingInformationManagement
             return $return;
         }
 
+        if (!$quote->getExtensionAttributes()->getAmazonOrderReferenceId()) {
+            return $return;
+        }
+
         $amazonOrderReferenceId = $quote->getExtensionAttributes()
             ->getAmazonOrderReferenceId()
             ->getAmazonOrderReferenceId();

--- a/composer.json
+++ b/composer.json
@@ -2,14 +2,14 @@
   "name": "amzn/amazon-pay-module",
   "description": "Amazon Pay module",
   "type": "magento2-module",
-  "version": "3.5.2",
+  "version": "3.6.0",
   "license": [
     "Apache-2.0"
   ],
   "require": {
     "php": "~7.1.3||~7.2.0||~7.3.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.5.2",
-    "amzn/login-with-amazon-module": "^3.5.2",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.6.0",
+    "amzn/login-with-amazon-module": "^3.6.0",
     "magento/framework": "^102",
     "magento/module-customer": "^102",
     "magento/module-eav": "^102",

--- a/etc/module.xml
+++ b/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Payment" setup_version="3.5.2" >
+    <module name="Amazon_Payment" setup_version="3.6.0" >
         <sequence>
             <module name="Amazon_Core"/>
             <module name="Amazon_Login"/>

--- a/view/frontend/web/js/view/shipping.js
+++ b/view/frontend/web/js/view/shipping.js
@@ -2,22 +2,14 @@
 define(
     [
         'jquery',
-        'underscore',
-        'ko',
         'Magento_Checkout/js/view/shipping',
         'Magento_Customer/js/model/customer',
-        'Magento_Checkout/js/action/set-shipping-information',
-        'Magento_Checkout/js/model/step-navigator',
         'Amazon_Payment/js/model/storage'
     ],
     function (
         $,
-        _,
-        ko,
         Component,
         customer,
-        setShippingInformationAction,
-        stepNavigator,
         amazonStorage
     ) {
         'use strict';
@@ -49,20 +41,20 @@ define(
             },
 
             /**
-             * New setShipping Action for Amazon Pay to bypass validation
+             * Overridden validateShippingInformation for Amazon Pay to bypass validation
+             *
+             * @inheritDoc
              */
-            setShippingInformation: function () {
-                if (amazonStorage.isAmazonAccountLoggedIn()) {
-                    if (customer.isLoggedIn() || this.validateGuestEmail()) {
-                        setShippingInformationAction().done(
-                            function () {
-                                stepNavigator.next();
-                            }
-                        );
-                    }
-                } else {
-                    this._super();
+            validateShippingInformation: function () {
+                if (!amazonStorage.isAmazonAccountLoggedIn()) {
+                    return this._super();
                 }
+
+                if (!customer.isLoggedIn()) {
+                    return this.validateGuestEmail();
+                }
+
+                return true;
             }
         });
     }

