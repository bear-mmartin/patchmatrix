--- a/README.md
+++ b/README.md
@@ -1,23 +1,51 @@
 # Amazon Pay and Login with Amazon for Magento 2
 
+This extension provides an official integration of your Magento 2 store with **Amazon Pay and Login with Amazon** services. The extension is a checkout and payment solution that does not share any item level information (product information, prices, basket content, etc) with Amazon. The extension integrates Amazon Pay seamlessly into the Magento 2 shop backend (configuration, order management, billing, etc.).
+
 ## About Amazon Pay for Magento 2
 
 Amazon Pay offers a familiar and convenient buying experience that can help your customers spend more time shopping and less time checking out.   Amazon Pay is used by large and small companies.  From years of shopping safely with Amazon, customers trust their personal information will remain secure and know many transactions are covered by the Amazon A-to-z Guarantee.  Businesses have the reassurance of our advanced fraud protection and payment protection policy.
 
 For more information about Amazon Pay and Magento 2, please visit our [Amazon Pay for Magento](https://pay.amazon.com/sp/magento) site or review our [Complete User Guide](https://amzn.github.io/amazon-payments-magento-2-plugin).
 
-## Pre-Requisites
-* Which version to download?
-
-| Magento Version  | Github Branch |
-| ------------- | ------------- |
-| 2.1.0 - 2.2.3  | [1.x](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/1.x) |
-| 2.2.4 - 2.2.5  | [2.x](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/2.x) |
-| 2.2.6 and above  | [master](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/master) |
-
-* SSL is installed on your site and active on Checkout and Login pages
+## Extension features
+
+* `Amazon Pay` button in the shopping cart, mini-cart, on product pages and in the 1st step of checkout
+* `Login with Amazon` button on the customer login and registration page
+* `Amazon Pay` in the list of available payment methods during the final step of checkout
+* Configuration of `Amazon Pay` extension from within Magento admin
+* Support for payment authorizations, captures and refunds (also partial refunds)
+* Support for synchronous and asynchronous authorization mode
+* Supports `Amazon Pay` Instant Payment Notifications
+* Live & sandbox modes available
+* Options for simulating payment states in sandbox mode
+* [EU/UK only] Multi-currency support
+* [EU/UK only] Support for Strong Customer Authorization (PSD2 compliant)
+
+## Prerequisites
+
+* PHP 7.1 (or higher) when using the latest version of the extension. Older versions of the extension may support older PHP versions. 
+* Magento CE (2.1.0 or higher)
+* cURL for PHP
+* DOM / XML for PHP
+* valid SSL certificate
 * A verified Amazon Pay merchant account - [sign up here](https://pay.amazon.com/signup)!
 
 ## Installation and Configuration
 
-Please follow the instructions in the [User Guide](https://amzn.github.io/amazon-payments-magento-2-plugin)
+The extension is available via composer, Magento Marketplace or, with Magento 2.2.4 and higher, already pre-installed as bundled extension.
+
+Please follow the instructions in the [User Guide](https://amzn.github.io/amazon-payments-magento-2-plugin) get more details concerning installation procedure.
+
+## Branch information
+
+The following table provides an overview on which Git branch is compatible to which Magento 2 version. The last column "Latest release" refers to the latest version of our extension that is compatible to the Magento 2 version in the first column.
+
+| Magento Version  | Github Branch | Latest release |
+| ------------- | ------------- | ------------- |
+| 2.1.0 - 2.2.3  | [1.x](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/1.x) | 1.2.8 |
+| 2.2.4 - 2.2.5  | [2.x](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/2.x) | 2.0.16 |
+| 2.2.6 - 2.2.x  | [2.1.x](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/2.1.x) | 2.2.14 |
+| 2.3.0 and above  | [master](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/master) | 3.2.9 |
+
+

--- a/composer.json
+++ b/composer.json
@@ -2,7 +2,7 @@
   "name": "amzn/amazon-pay-and-login-magento-2-module",
   "description": "Official Magento2 Plugin to integrate with Amazon Pay and Login with Amazon",
   "type": "magento2-module",
-  "version": "3.1.5",
+  "version": "3.2.11",
   "license": [
     "Apache-2.0"
   ],
@@ -12,17 +12,17 @@
   },
   "require": {
     "php": "~7.1.3||~7.2.0",
-    "magento/framework": "*",
-    "magento/module-sales": "*",
-    "magento/module-checkout": "*",
-    "magento/module-payment": "*",
-    "magento/module-eav": "*",
+    "magento/framework": "^102",
+    "magento/module-sales": "^102",
+    "magento/module-checkout": "^100.3",
+    "magento/module-payment": "^100.3",
+    "magento/module-eav": "^102",
     "magento/module-developer": "*",
-    "magento/module-config": "*",
-    "magento/module-backend": "*",
-    "magento/module-quote": "*",
-    "magento/module-customer": "*",
-    "magento/module-store": "*",
+    "magento/module-config": "^101.1",
+    "magento/module-backend": "^101",
+    "magento/module-quote": "^101.1",
+    "magento/module-customer": "^102",
+    "magento/module-store": "^101",
     "amzn/amazon-pay-sdk-php": "^3.2.0"
   },
   "repositories": [

--- a/docs/conf.py
+++ b/docs/conf.py
@@ -60,9 +60,9 @@ author = u'Amazon.com Inc or its affiliates'
 # built documents.
 #
 # The short X.Y version.
-version = u'3.1.5'
+version = u'3.2.11'
 # The full version, including alpha/beta/rc tags.
-release = u'3.1.5'
+release = u'3.2.11'
 
 # The language for content autogenerated by Sphinx. Refer to documentation
 # for a list of supported languages.

--- a/docs/configuration.rst
+++ b/docs/configuration.rst
@@ -1,9 +1,15 @@
 Configuration
 =============
-After the successful installation you can proceed to the configuration. In Magento 2 admin go to :menuselection:`Stores --> Configuration --> Sales --> Payment Methods --> Amazon Pay`
 
-General
--------
+After the successful installation you can proceed to the configuration. In Magento 2 admin go to `Stores --> Configuration --> Sales --> Payment Methods`. Click the **Configure** button next to the Amazon Pay logo.
+
+.. image:: /images/configuration_amazon_pay.png
+
+You now have to choose whether you already have an existing Amazon Pay merchant account or if you want to register a new account. Please be aware that the base currency of the shop is used to decide in which region (US, UK, EU, etc.) the account will be registered. If you do have questions on the registration process, please contact Amazon Pay merchant support at https://sellercentral-europe.amazon.com/cu/contact-us
+
+.. image:: /images/configuration_amazon_pay_new-or-existing.png
+
+After completing the account registration, or if you already have an existing account, you can continue with the plugin configuration as described in the following sections. 
 
 Credentials
 '''''''''''
@@ -26,7 +32,6 @@ The credentials can be found in Seller Central at :menuselection:`Integration --
 Payment Region
 ..............
 Select the region where you registered your seller account from the provided list. If you're unsure about this information, please consult the Amazon Pay merchant support. Supported regions are:
-
 * Euro (use for countries that use EUR as their currency, e.g. Germany, France, Italy, Spain, etc.)
 * United Kingdom
 * United States
@@ -54,7 +59,7 @@ By switching this option you can enable or disable **Amazon Pay**. This option m
 
 Enable Login with Amazon
 ........................
-By switching this option you can toggle **Login with Amazon**. When enabled this will log customers into Magento via their Amazon account.
+By switching this option you can toggle **Login with Amazon**. When enabled this will log customers into Magento via their Amazon account. If disabled, customers using Amazon Pay will be handled as guests.
 
 .. note:: Login with Amazon requires that Amazon Pay is enabled in order to function.
 
@@ -65,12 +70,12 @@ Payment Action
 
 Authorization Mode
 ..................
-* `Immediate` (default) - The authorization is processed during the checkout.
-* `Automatic` - The authorization is processed during the checkout. In case this call times out, an asynchronous authorization will be done afterwards. 
+* `Immediate` (default) - The authorization is processed immediately during the checkout.
+* `Automatic` - The authorization is processed during the checkout. In case this call times out, an asynchronous authorization will be done afterwards.
 
 Independent of the mode you decide for, make sure to only orders which are successfully authorized by Amazon Pay (order state: `Processing`).
 
-.. note:: If you expect high order values, please use **Automatic** Authorization mode.
+.. note:: If you expect high order values, the **Automatic** authorization mode might be the best choice for your business.
 
 Update Mechanism
 ................
@@ -79,47 +84,46 @@ Update Mechanism
 
  
 Advanced
---------
+''''''''
 
 Frontend
-''''''''
+........
 
 Button Display Language
-.......................
+-----------------------
 Allows input of a locale string to control button language should be in the format `en-gb`. By default the language of the store view is used.
 
 Button Color
-............
+------------
 Allows selection of button color from a pre determined list.
 
-Button Size
-............
-Allows selection of button size from a pre determined list.
-
-Login with Amazon available in authentication popup
-.................................................
-Toggles whether to show **Login with Amazon** in Magento's account login popup.
+Show Amazon Pay button on product page
+--------------------------------------
+Toggles whether to show the **Amazon Pay** button on the product detail pages.
 
-Amazon Pay button is visible on Product Page
-.................................................
-Toggles whether to show **Amazon Pay** on the product pages.
+Show Amazon Pay button in minicart
+----------------------------------
+Toggles whether to show the **Amazon Pay** button in the Magento minicart.
 
-Amazon Pay button is visible on minicart
-.................................................
-Toggles whether to show **Amazon Pay** in the minicart.
+Show Login with Amazon in authentication popup
+----------------------------------------------
+Toggles whether to show **Login with Amazon** button in the Magento authentication popup.
 
-Show Amazon Pay in payment methods
-.................................................
+Show Amazon Pay Method
+----------------------
 If enabled, Amazon Pay is presented as an option in the list of available payment methods during the final step of checkout.
 
-
 Sales Options
-'''''''''''''
+.............
 
 Use Multi-currency
-..................
+------------------
 	
-Enables the multi-currency feature of Amazon Pay for Magento 2. Currencies supported include:
+Enables the multi-currency feature of Amazon Pay for Magento 2.
+
+.. note:: Multi-currency is currently supported for payment region EU and UK only, and only on Magento 2.3.1 and higher. If you are using a different payment region or Magento 2 version, this option will not be available.
+
+The feature includes the following currencies:
 
 * Australian Dollar (AUD)
 * British Pound (GBP)
@@ -138,23 +142,25 @@ The Amazon Pay multi-currency feature is designed for international merchants wh
 
 The benefit to your customers is that they don’t need to worry about currency conversion or rates when shopping with their Amazon account. Any of our global 300MM Amazon buyers can check-out on your website with their existing Amazon account.
 
-.. note:: Multi-currency is currently supported for payment region EU and UK only. If you have configured a payment region different than this, this option will not be available. 
-
 Store Name
-................
+----------
 Allows setting the store name submitted to Amazon Pay per Store View. 
 
 .. note:: Store View name is provided by default.
 
 Developer Options
-'''''''''''''''''
+.................
 
 Logging
-.......
+-------
 Enabled by default. This toggles whether to log all API calls and IPN notifications or not. The log files can be retrieved directly via the Magento 2 admin at :menuselection:`System --> Amazon Pay Logs --> Client`, respectively :menuselection:`System --> Amazon Pay Logs --> IPN`
 
 Allowed IPs
-...........
+-----------
 For testing or debugging purposes you can restrict access to **Amazon Pay** checkout in your shop to certain IP addresses only. **Amazon Pay** button will be shown only for the visitors coming from allowed IPs. You can set more than one allowed IP, separated with commas.
 
 .. note:: Due to caching restrictions this setting is not reflected on Product pages, Please  disable `Amazon Pay button is visible on Product Page` in this instance
+
+Developer Logs
+--------------
+Downloads a copy of the developer logs of the extension.
\ No newline at end of file

--- a/docs/customisation.rst
+++ b/docs/customisation.rst
@@ -47,4 +47,4 @@ Copy to
 
 ``app/design/frontend/<your_namspace>/<your_theme>/Amazon_Payment/email/hard-declined-auth.html``
 
-You can then customise this new template however you wish by adding images and new text or additional styling. You can read more about customising the Magento 2 email templates in the official `Magento 2 documentation <http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/templates/template-email.html>`_
+You can then customise this new template however you wish by adding images and new text or additional styling. You can read more about customising the Magento 2 email templates in the official `Magento 2 documentation (template email) <http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/templates/template-email.html>`_

--- a/docs/faq.rst
+++ b/docs/faq.rst
@@ -18,12 +18,22 @@ Amazon Pay provides two LESS files in this extension. They need to be adapted to
 
 
 .. _`@screen__m` : https://github.com/amzn/amazon-payments-magento-2-plugin/blob/1.2.4/src/Payment/view/frontend/web/css/source/_module.less#L71
-.. _`responsive.html in the magento2 repository` : https://github.com/magento/magento2/blob/2.2/lib/web/css/docs/responsive.html
-.. _`Magento DevDocs` : http://devdocs.magento.com/guides/v2.2/frontend-dev-guide/responsive-web-design/rwd_overview.html
+.. _`responsive.html in the magento2 repository` : https://github.com/magento/magento2/blob/2.3/lib/web/css/docs/responsive.html
+.. _`Magento DevDocs` : http://devdocs.magento.com/guides/v2.3/frontend-dev-guide/responsive-web-design/rwd_overview.html
 
 
 Amazon Pay Widgets are not surfaced
 -----------------------------------
 Please check if you are using a theme, which is not based on Magento's Luma or Blank theme first and follow the advice above.
 
-If this is not the case and you need help, please file an issue with us.
+If the widgets are still not surfaced correctly, please double check if the required div containers are available in the DOM tree of the website. For this, please go to the checkout and search for the container "amazon-widget-container" as shown below.
+
+.. image:: /images/amazon-widget-container.png
+
+In the example above, the container exists and also contains the div container for the address book widget ("addressBookWidgetDiv"), so the extension is installed properly and working correctly.
+
+If that's the case, but the widget is not visible, it is most likely because the required CSS style has not been included correctly. Like shown in the screenshot below, the height of the inspected container can be set manually via the browser debug console. If the widget will show up when doing this, the CSS definitions have not been included correctly. For more information on CSS styles and LESS files, please refer to the `Cascading style sheets (CSS) documentation`_ of Magento 2.
+
+.. image:: /images/amazon-widget-container-2.png
+
+.. _`Cascading style sheets (CSS) documentation`: https://devdocs.magento.com/guides/v2.3/frontend-dev-guide/css-topics/css-overview.html

--- a/docs/flow.rst
+++ b/docs/flow.rst
@@ -36,19 +36,19 @@ The actual order flow other than this remains the same, as it is for the standar
 
 Payment authorization
 ---------------------
-An authorization is automatically requested on order placement there are 3 authorization flows, Synchronous, Asynchronous and a combination of both as defined in :doc:`configuration`.
+An authorization is automatically requested on order placement. There are two different authorization flows, Immediate and Automatic, as defined in :doc:`configuration`.
 
-Synchronous
-''''''''''''
+Immediate
+'''''''''
 The customer will get instant feedback there are 3 possible outcomes
 
 1. `Authorization OK` - Order is placed with a state of `Processing`, Customer is redirected to the standard Magento 2 confirmation screen
 2. `Soft Decline` - Order is not placed and customer is asked to select an alternative payment instrument from the Amazon Pay widget
 3. `Hard Decline` - Order is not placed, the Amazon Pay specific checkout will be left (widgets are replaced by standard forms) and the customer is asked to select an alternative payment method for this order
 
-Asynchronous
-''''''''''''
-Orders placed when in Asychronous mode should always complete as if authorization was OK however they will be in a `Pending` state with a `Payment Review` status. 
+Automatic
+'''''''''
+In this mode, the extension will try to authorize the order immediate (as described above). If this fails due to a timeout, it will fallback to an asynchronous authorization (returns `Pending` state with a `Payment Review` status).
 
 The customer will always be redirected to the standard Magento 2 confirmation screen as authorization state will be processed by Amazon Pay after the order is placed. 
 
@@ -58,11 +58,6 @@ A status update on the state of the authorization will be delivered by IPN or Cr
 2. `Soft Decline` - Authorization is closed, customer is emailed with a link to select an alternative payment instrument on the Amazon Pay website. When the customer changes the payment instrument, a new authorization is raised
 3. `Hard Decline` - Authorization is closed, customer is emailed with instructions to contact the merchant
 
-Synchronous if possible 
-'''''''''''''''''''''''
-The customer will get instant feedback for all final states of the authorization like with the synchronous authorization while the customer benefits from the lower decline rate of the asynchronous authorization. In cases where a synchronous authorization would result in a decline but could be handled with the asynchronous workflow, the module automatically requests an asynchronous authorization and optimistically shows the customer the order confirmation page.
-
-
 Payment capture
 ---------------
 Orders placed with `Charge on Order` mode enabled will automatically be captured. For orders placed using `Charge on Shipment` you will need to raise an invoice. To do this, the following steps are required:

--- a/docs/images/amazon-pay-button.png
+++ b/docs/images/amazon-pay-button.png
Binary files a/docs/images/amazon-pay-button.png and b/docs/images/amazon-pay-button.png differ

--- a/docs/images/amazon-widget-container-2.png
+++ b/docs/images/amazon-widget-container-2.png
Binary files /dev/null and b/docs/images/amazon-widget-container-2.png differ

--- a/docs/images/amazon-widget-container.png
+++ b/docs/images/amazon-widget-container.png
Binary files /dev/null and b/docs/images/amazon-widget-container.png differ

--- a/docs/images/configuration_amazon_pay.png
+++ b/docs/images/configuration_amazon_pay.png
Binary files /dev/null and b/docs/images/configuration_amazon_pay.png differ

--- a/docs/images/configuration_amazon_pay_new-or-existing.png
+++ b/docs/images/configuration_amazon_pay_new-or-existing.png
Binary files /dev/null and b/docs/images/configuration_amazon_pay_new-or-existing.png differ

--- a/docs/images/seller-central/prerequisites_screenshot_1.png
+++ b/docs/images/seller-central/prerequisites_screenshot_1.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_1.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_10.png
+++ b/docs/images/seller-central/prerequisites_screenshot_10.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_10.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_11.png
+++ b/docs/images/seller-central/prerequisites_screenshot_11.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_11.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_2.png
+++ b/docs/images/seller-central/prerequisites_screenshot_2.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_2.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_3.png
+++ b/docs/images/seller-central/prerequisites_screenshot_3.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_3.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_4.png
+++ b/docs/images/seller-central/prerequisites_screenshot_4.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_4.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_5.png
+++ b/docs/images/seller-central/prerequisites_screenshot_5.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_5.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_6.png
+++ b/docs/images/seller-central/prerequisites_screenshot_6.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_6.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_7.png
+++ b/docs/images/seller-central/prerequisites_screenshot_7.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_7.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_8.png
+++ b/docs/images/seller-central/prerequisites_screenshot_8.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_8.png and /dev/null differ

--- a/docs/images/seller-central/prerequisites_screenshot_9.png
+++ b/docs/images/seller-central/prerequisites_screenshot_9.png
Binary files a/docs/images/seller-central/prerequisites_screenshot_9.png and /dev/null differ

--- a/docs/index.rst
+++ b/docs/index.rst
@@ -9,7 +9,6 @@ Amazon Pay and Login with Amazon extension for Magento 2
    :maxdepth: 3
 
    overview
-   prerequisites
    installation
    configuration
    login
@@ -17,4 +16,5 @@ Amazon Pay and Login with Amazon extension for Magento 2
    customisation
    testing
    troubleshooting
-   faq
\ No newline at end of file
+   faq
+   m1_m2_migration
\ No newline at end of file

--- a/docs/installation.rst
+++ b/docs/installation.rst
@@ -1,13 +1,17 @@
 Installation
 ============
 
+The extension is available via composer, Magento Marketplace or, with Magento 2.2.4 and higher, already pre-installed as bundled extension.
+
+.. note:: If you are using Magento 2.2.4 or higher, the extension is probably already pre-installed and you can head straight to :doc:`configuration`.
+
 Pre-installation steps
 ----------------------
 * Create a backup of your shop before proceeding to install.
 
-Web Setup Wizard / Magento Marketplace Install Method (Preferred)
+Web Setup Wizard / Magento Marketplace Install Method
 -----------------------------------------------------------------
-The installation via the Web Setup Wizard is the preferred method of installation.
+The installation via the Web Setup Wizard is the recomennded method of installation for our extension when using Magento 2.1 - 2.2.3. For shops using Magento 2.2.4 or higher, the composer method outlined below is recommended.
 Please follow the `Magento Marketplace User Guide`_ to learn how this works.
 
 Our extension can be found here: https://marketplace.magento.com/amzn-amazon-pay-and-login-magento-2-module.html
@@ -16,21 +20,23 @@ Our extension can be found here: https://marketplace.magento.com/amzn-amazon-pay
 
 Manual Composer Install Method
 ------------------------------
-In case you are not able or willing to use the web installation, you can install the extension using composer.
+When using Magento 2.2.4, the extension is probably already pre-installed. If not, please follow this procedure to install the extension.
+
+.. note:: The composer require command below will always install the most current, non-breaking, Amazon Pay extension for you, when you run an update. To fix it to a specifix version, please replace the version behind the colon with the preferred version.
+
+* Sign in to your server via SSH.
+* `cd` into you Magento installation directory.
+* Install the extension via composer. The right command is dependent on your Magento 2 version:
 
-* Sign in to your server via SSH
-* `cd` into you Magento installation directory
-* Install the extension via composer: `composer require amzn/amazon-payments-magento-2-plugin:^3.1.5`
+    * Magento 2.1 - 2.2.3: `composer require amzn/amazon-payments-magento-2-plugin:1.2.*`
+    * Magento 2.2.4 - 2.2.5: `composer require amzn/amazon-payments-magento-2-plugin:2.0.*`
+    * Magento 2.2.6 - 2.2.x: `composer require amzn/amazon-payments-magento-2-plugin:2.2.*`
+    * Magento 2.3.0 and above: `composer require amzn/amazon-payments-magento-2-plugin:3.*`
 * Enable the extension: `php bin/magento module:enable Amazon_Core Amazon_Login Amazon_Payment`
 * Upgrade the Magento installation: `php bin/magento setup:upgrade`
 * Follow any advice the upgrade routine provides
-
-.. note:: `composer require amzn/amazon-payments-magento-2-plugin:^3.1.5` will always install the most current, non-breaking, Amazon Pay extension for you, when you run an update. To fix it to a specifix version, please remove the `^`
-
-In production mode, you will also have to compile the code and the dependency injection (DI) configuration and deploy static content
-
-* Compile code and DI: `php bin/magento setup:di:compile`
-* Deploy static view files: `php bin/magento setup:static-content:deploy xx_XX yy_YY` where xx_XX, yy_YY, ... are the locales you are aiming to support
+* Compile code and dependency injection: `php bin/magento setup:di:compile`
+* Deploy static view files (production mode only): `php bin/magento setup:static-content:deploy xx_XX yy_YY` where xx_XX, yy_YY, ... are the locales you are aiming to support
 * Check permissions on directories and files and set them correctly if needed
 
 .. note::

--- a/docs/login.rst
+++ b/docs/login.rst
@@ -6,7 +6,10 @@ Customers who have logged in via Login with Amazon previously, will be recognize
 
 Requirements
 ------------
-To offer the **Login with Amazon** service, you have to have a valid **Amazon Pay** merchant account (refer to the :ref:`prerequisites-amazon-account-setup` if you don't have one yet), registered application for **Login with Amazon** service (refer to the :ref:`prerequisites-registering-application-for-login-with-amazon` if you don't have one yet) and Magento 2 store with a valid SSL certificate installed and properly configured in your shop.
+To offer the **Login with Amazon** service, you have to have a valid **Amazon Pay** merchant account (`sign up here`_ if you don't have one yet), and registered an "Login with Amazon" application (see `LWA Client ID guide`_ for the setup).
+
+.. _`sign up here`: https://pay.amazon.com/signup
+.. _`LWA Client ID guide`: https://images-na.ssl-images-amazon.com/images/G/02/amazonservices/payments/website/AmazonPay_ClientID_UK._TTD_.pdf
 
 `Login with Amazon` button
 --------------------------

--- /dev/null
+++ b/docs/m1_m2_migration.rst
@@ -0,0 +1,54 @@
+Migration: Magento 1 to Magento 2
+=====================================
+To migrate your Amazon Pay integration successfully from Magento 1 to Magento 2, please follow the instructions below carefully.
+
+Step 1: Verify extension installation
+-------------------------------------
+With Magento 2.2.4 and higher, the Amazon Pay extension is bundled along with Magento 2. To verify if it's installed successfully, open the Magento 2 admin and go to Stores –> Configuration –> Sales –> Payment Methods. Amazon Pay should be listed under "OTHER PAYMENT METHODS" like shown below.
+
+.. image:: /images/configuration_amazon_pay.png
+
+If Amazon Pay is not listed here, please refer to the :doc:`installation` section to get more details concerning installation procedure.
+
+Step 2: Configure the extension
+-------------------------------
+* Add the **Allowed JavaScript Origins and Allowed Return URLs** to your Login with Amazon section of the Seller Central. Please note that the Allowed JavaScript Origins URL must only be changed if the base URL of your shop has changed (e.g. www.myshop.com => www.mygreatnewshop.com ). The Allowed Return URL **must be** changed as this requires a full URL and is different from the one used in Magento 1.
+* Add the **IPN URL** to the field Merchant URL at Settings ‣ Integration Settings of the Seller Central. Please note that the IPN URL can be specified separately for Production and Sandbox view, so please verify that it has been set correctly for both environment.
+* Refer to :doc:`configuration` to get more information about the other configuration settings.
+
+Step 3: Review the below settings
+---------------------------------
+In order to use the same settings you were using in your Magento 1 integration, please review the below table and choose the appropriate Amazon Pay settings for your shop. Please note that there are two different Amazon Pay extensions available for Magento 1, one for EU and one for US region. The table below lists the options from each extension and the corresponding option for Magento 2.
+
++--------------------+-------------------------+-----------------------+--------------------+
+| Option             | Magento 1 (EU)          | Magento 1 (US)        | Magento 2          |
++====================+=========================+=======================+====================+
+| Payment Action     | Authorize and capture   | Authorize and capture | Charge on order    |
+|                    +-------------------------+-----------------------+--------------------+
+|                    | Authorize               | Authorize             | Charge on shipment |
++--------------------+-------------------------+-----------------------+--------------------+
+| Authorization Mode | Auto                    |                       | Automatic          |
+|                    +-------------------------+-----------------------+--------------------+
+|                    | Synchronous             | Async Mode: 'No'      | Immediate          |
++                    +-------------------------+-----------------------+--------------------+
+|                    | Asynchronous            | Async Mode: 'Yes'     | Automatic          |
++--------------------+-------------------------+-----------------------+--------------------+
+| Update Mechanism   | Instant Payment Notif.  | N/A                   | Instant Payment N. |
+|                    +-------------------------+-----------------------+--------------------+
+|                    | Data polling            | Default               | Data polling       |
++--------------------+-------------------------+-----------------------+--------------------+
+
+Step 4: Front-end Customization
+---------------------------------
+If your are using a custom template please read the following sections from our documentation carefully: 
+
+* :doc:`customisation`
+* :doc:`faq`
+
+Step 5: Test your integration
+---------------------------------
+Before go-live, please thoroughly test the integration as described in :doc:`testing`.
+
+Step 6: Go live
+---------------------------------
+Now that your Magento 2 integration is up-to-date with your Magento 1 integration and is functioning normally, please diable the sandbox mode and remove any IP address whitelisting. It is best practice to perform a test transaction in live mode to ensure the integration is working as expected.
\ No newline at end of file

--- a/docs/overview.rst
+++ b/docs/overview.rst
@@ -1,28 +1,64 @@
 Overview
 ========
+This extension provides an official integration of your Magento 2 store with **Amazon Pay and Login with Amazon** services. The extension is a checkout and payment solution that does not share any item level information (product information, prices, basket content, etc) with Amazon. The extension integrates Amazon Pay seamlessly into the Magento 2 shop backend (configuration, order management, billing, etc.).
 
-This extension provides an official integration of your Magento 2 store with **Amazon Pay and Login with Amazon** services. They help your customers shop quickly, safely and securely. Your customers can pay on your website without re-entering their payment and address details. All Amazon Pay transactions are protected by Amazon's A-to-z Guarantee.
+About Amazon Pay
+----------------
 
-The extension is a pure payment solution. No item level is communicated to Amazon Pay and it allows you to manage your orders directly from Magento 2.
+Amazon Pay offers a familiar and convenient buying experience that can help your customers spend more time shopping and less time checking out. Amazon Pay is used by large and small companies. From years of shopping safely with Amazon, customers trust their personal information will remain secure and know many transactions are covered by the Amazon A-to-z Guarantee. Businesses have the reassurance of our advanced fraud protection and payment protection policy.
 
 Extension features
 ------------------
 
-* `Amazon Pay` button in the shopping cart, on product pages and in the 1st step of checkout
+* `Amazon Pay` button in the shopping cart, mini-cart, on product pages and in the 1st step of checkout
 * `Login with Amazon` button on the customer login and registration page
-* Customization of **Amazon Pay** widgets from within Magento admin
+* `Amazon Pay` in the list of available payment methods during the final step of checkout
+* Configuration of `Amazon Pay` extension from within Magento admin
 * Support for payment authorizations, captures and refunds (also partial refunds)
-* Support for synchronous and asynchronous authorization
-* Supports Amazon Pay Instant Payment Notifications
+* Support for synchronous and asynchronous authorization mode
+* Supports `Amazon Pay` Instant Payment Notifications
 * Live & sandbox modes available
 * Options for simulating payment states in sandbox mode
+* [EU/UK only] Multi-currency support
+* [EU/UK only] Support for Strong Customer Authorization (PSD2 compliant)
 
-Getting the extension
----------------------
+Prerequisites
+-------------
 
-The extension can be installed using the following methods:
+* PHP 7.1 (or higher) when using the latest version of the extension. Older versions of the extension may support older PHP versions. 
+* Magento CE (2.1.0 or higher)
+* cURL for PHP
+* DOM / XML for PHP
+* valid SSL certificate
+* A verified Amazon Pay merchant account - `sign up here`_!
 
-* Preferred Method - From the Magento Marketplace using the Web Setup Wizard
-* Manually using composer from the command line
+.. _`sign up here`: https://pay.amazon.com/signup
 
-Refer to the :doc:`installation` section to get more details concerning installation procedure.
+Installation and Configuration
+------------------------------
+
+The extension is available via composer, Magento Marketplace or, with Magento 2.2.4 and higher, already pre-installed as bundled extension.
+
+Please refer to the :doc:`installation` section to get more details concerning installation procedure.
+
+Branch information
+------------------
+
+The following table provides an overview on which Git branch is compatible to which Magento 2 version. The last column "Latest release" refers to the latest version of our extension that is compatible to the Magento 2 version in the first column.
+
++---------------------+-------------------+--------------------+
+| **Magento Version** | **Github Branch** | **Latest release** |
++---------------------+-------------------+--------------------+
+| 2.1.0 - 2.2.3       | `1.x`_            | 1.2.8              |
++---------------------+-------------------+--------------------+
+| 2.2.4 - 2.2.5       | `2.x`_            | 2.0.16             |
++---------------------+-------------------+--------------------+
+| 2.2.6 - 2.2.x       | `2.1.x`_          | 2.2.14             |
++---------------------+-------------------+--------------------+
+| 2.3.0 and above     | `master`_         | 3.2.9              |
++---------------------+-------------------+--------------------+
+
+.. _`1.x`: https://github.com/amzn/amazon-payments-magento-2-plugin/tree/1.x
+.. _`2.x`: https://github.com/amzn/amazon-payments-magento-2-plugin/tree/2.x
+.. _`2.1.x`: https://github.com/amzn/amazon-payments-magento-2-plugin/tree/2.1.x
+.. _`master`: https://github.com/amzn/amazon-payments-magento-2-plugin/tree/master
\ No newline at end of file

--- a/docs/prerequisites.rst
+++ /dev/null
@@ -1,145 +0,0 @@
-Prerequisites
-=============
-
-System requirements
--------------------
-
-The **Amazon Pay and Login with Amazon** Magento 2 extension requires you to have a valid **Amazon Pay** merchant account (refer to the :ref:`prerequisites-amazon-account-setup` if you don't have one yet) and a webserver running a Magento 2 store instance with following conditions met:
-
-* Magento CE (2.1.0 or higher)
-* cURL for PHP
-* DOM / XML for PHP
-* valid SSL certificate
-
-.. _prerequisites-amazon-account-setup:
-
-**Amazon Pay and Login with Amazon** account setup
---------------------------------------------------
-
-
-Registering an Amazon Pay merchant Account
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-* Go to:
-
-  * DE merchants: `https://pay.amazon.com/de/signup <https://pay.amazon.com/de/signup>`_
-  * UK merchants: `https://pay.amazon.com/uk/signup <https://pay.amazon.com/uk/signup>`_
-  * US merchants: `https://pay.amazon.com/us/signup <https://pay.amazon.com/us/signup>`_
-  * FR merchants: `https://pay.amazon.com/fr/signup <https://pay.amazon.com/fr/signup>`_
-  * IT merchants: `https://pay.amazon.com/it/signup <https://pay.amazon.com/it/signup>`_
-  * ES merchants: `https://pay.amazon.com/es/signup <https://pay.amazon.com/us/signup>`_
-* Fill in the details and click :menuselection:`Submit`
-
-.. image:: /images/seller-central/prerequisites_screenshot_1.png
-
-* Go through the questionnaire to find out if you qualify for using Amazon Pay, then click `Sign up now`
-* At the moment you cannot add your **Amazon Pay** merchant account to an existing Amazon seller account. You have to register a new account specifically for Amazon Pay.
-* Start registering a new account:
-
-  * If you see the link `Would you like to create a new account using a different e-mail address? Click here`, please do so.
-  * Enter a name for your business. In case this name is already taken, please choose a different one.
-  * Enter an email address and a password. You should choose a role email address that will be read directly by the people responsible for the Amazon Pay integration. You should avoid general addresses like **info@** that are only forwarded to the general administration.
-  * Choose a secure password.
-
-.. image:: /images/seller-central/prerequisites_screenshot_2.png
-
-* Please fill in all requested information about your merchant account.
-* Please be careful to provide exact and correct data. All information you provide will be verified by Amazon Pay, and incorrect information will delay the verification process.
-
-.. image:: /images/seller-central/prerequisites_screenshot_3.png
-
-* Please provide charge information to finish the registration
-
-.. image:: /images/seller-central/prerequisites_screenshot_4.png
-
-* After your account is registered you will be forwarded to your Seller Central account.
-* Please be aware that you cannot fully use your account yet. First you have to provide your identity data, and then the account has to go through the verification process.
-* It may take some time until your sandbox is ready to use.
-
-
-Entering identity data in Seller Central
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-To get the verification process started, please log in to Seller Central.
-
-For a combined account (**Amazon Pay** added to an existing account), please make sure that you have selected the `Amazon Pay – Production View` in the drop down menu on the top.
-
-.. image:: /images/seller-central/prerequisites_screenshot_5.png
-
-At :menuselection:`Settings --> Account Info` please provide the requested missing information. Especially it is crucial to provide the ID information for all relevant persons.
-
-.. image:: /images/seller-central/prerequisites_screenshot_6.png
-
-
-Verification Process / Verification of all given information by Amazon Pay
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-After successful registration of the Amazon Pay seller account and entering the ID information Amazon Pay will check all information provided. Depending on the information provided Amazon Pay may request more information.
-
-.. _prerequisites-registering-application-for-login-with-amazon:
-
-Registering application for Login with Amazon service
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-**Amazon Pay** and ''Login with Amazon** work together to provide a great buyer experience. To use **Login with Amazon** you have to register the application (Magento extension) that will be allowed to access buyers accounts through your Amazon Pay seller account. **Login with Amazon** configuration settings can be accessed through `Login with Amazon` Seller Central page.
-
-.. image:: /images/seller-central/prerequisites_screenshot_7.png
-
-In the App Console register a new application by clicking the `Register new Application` button. The `Register Your Application` form will appear.
-
-.. image:: /images/seller-central/prerequisites_screenshot_8.png
-
-In the application details page, add basic details about your web site. These details will be used on your website and mobile apps (if applicable).
-
-* `Name Shown to Users`. This is the name displayed on the consent screen when the users agree to share the information with your web site. This name applies to website versions of your application.
-* `Description`. A description of your web site for Login with Amazon users.
-* `Privacy Notice URL`. The Privacy URL is the location of your company privacy policy. It is also displayed on the consent screen. This link is displayed to users when they first login to your application (for example: `http://www.example.com/privacy.html`).
-* `Logo Image File`. This logo will represent your business or website on **Amazon Pay and Login with Amazon** authentication pages. The logo will be displayed as a 150x150 pixel image; if you upload a file of a different size, it will be scaled to fit.
-
-When you are finished, click `Save` to save your changes.
-
-
-Add a Website to your Application
-'''''''''''''''''''''''''''''''''
-
-* From the Application screen, click `Web Settings`. You will automatically be assigned values for Client ID, which identifies your website.
-
-.. image:: /images/seller-central/prerequisites_screenshot_9.png
-
-* To add Allowed JavaScript Origins to your application, click `Edit`.
-
-An origin is the combination of protocol, your Magento shop domain name and port (for example: `https://www.example.com:8443`). Allowed origins must use the HTTPS protocol. If you are using a default port (443) you need only include the domain name of your shop (for example: `https://www.example.com`).
-
-Adding your domain here allows the SDK for JavaScript to communicate with your Magento shop directly during the login process. Web browsers normally block cross-origin communication between scripts unless the script specifically allows it.
-
-.. image:: /images/seller-central/prerequisites_screenshot_10.png
-
-To add more than one origin (in case you are running domain based multi-store Magento installation and all stores are using the same Amazon Pay seller account), click `Add Another`.
-
-.. note:: To use Login with Amazon with your Magento 2 shop, you **MUST** specify at least one allowed JavaScript origin.
-
-.. note:: Please add all allowed JavaScript Origins and Allowed Redirect URLs given by your Magento 2 shop to your Login with Amazon configuration section in the Seller Central.
-
-.. _prerequisites-where-to-find-the-required-credentials:
-
-Where to find the required credentials to configure the Magento 2 extension
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-All credentials are listed in your Seller Central account :menuselection:`Integration --> MWS Access Key`.
-
-.. image:: /images/seller-central/prerequisites_screenshot_11.png
-
-Magento 2 extension requires you to enter information about your Amazon Pay seller account. This can be copied as a json string and pasted into Magento.
-
-You can find this information in your Amazon Pay seller account at :menuselection:`Integration --> MWS Access Key`.
-
-.. image:: /images/copy-your-keys.png
-
-Configuration required in Seller Central
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-If you're planning to use IPN for the post-payment processing you need to enter a Merchant URL (IPN endpoint URL) in Seller Central. 
-
-You can do this at :menuselection:`Settings --> Integration Settings`, then click the `Edit` button at `Instant Notification Settings`.
-
-Your IPN endpoint URL can be obtained from Magento admin at :menuselection:`Stores --> Configuration --> Sales --> Payment Methods --> Amazon Pay --> General --> Credentials --> IPN URL`.

--- a/marketplace-composer.json
+++ b/marketplace-composer.json
@@ -2,13 +2,13 @@
   "name": "amzn/amazon-pay-and-login-magento-2-module",
   "description": "Official Magento2 Plugin to integrate with Amazon Pay and Login with Amazon",
   "type": "metapackage",
-  "version": "3.1.5",
+  "version": "3.2.11",
   "license": [
     "Apache-2.0"
   ],
   "require": {
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "3.1.5",
-    "amzn/login-with-amazon-module": "3.1.5",
-    "amzn/amazon-pay-module": "3.1.5"
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "3.2.11",
+    "amzn/login-with-amazon-module": "3.2.11",
+    "amzn/amazon-pay-module": "3.2.11"
   }
 }

--- a/src/Core/Block/Adminhtml/Form/Field/IpnUrl.php
+++ b/src/Core/Block/Adminhtml/Form/Field/IpnUrl.php
@@ -32,21 +32,16 @@ class IpnUrl extends BaseField
     {
         $stores = $this->_storeManager->getStores();
         $valueReturn = '';
-        $urlArray = [];
 
-        foreach ($stores as $store) {
+        if ($store = reset($stores))
+        {
             $baseUrl = $store->getBaseUrl(UrlInterface::URL_TYPE_WEB, true);
             if ($baseUrl) {
-                $value      = $baseUrl . 'amazonpayments/payment/ipn/';
-                $urlArray[] = "<div>".$this->escapeHtml($value)."</div>";
+                $value       = $baseUrl . 'amazonpayments/payment/ipn/';
+                $valueReturn = "<div>".$this->escapeHtml($value)."</div>";
             }
         }
 
-        $urlArray = array_unique($urlArray);
-        foreach ($urlArray as $uniqueUrl) {
-            $valueReturn .= "<div>".$uniqueUrl."</div>";
-        }
-
         return '<td class="value">' . $valueReturn . '</td>';
     }
 

--- a/src/Core/Controller/Adminhtml/Simplepath/Poll.php
+++ b/src/Core/Controller/Adminhtml/Simplepath/Poll.php
@@ -17,6 +17,8 @@ namespace Amazon\Core\Controller\Adminhtml\Simplepath;
 
 use Magento\Backend\App\Action\Context;
 use Magento\Backend\Controller\Adminhtml\System;
+use Magento\Framework\App\ObjectManager;
+use Amazon\Core\Logger\ExceptionLogger;
 
 class Poll extends System
 {
@@ -36,16 +38,23 @@ class Poll extends System
      */
     private $jsonResultFactory;
 
+    /**
+     * @var \Amazon\Core\Logger\ExceptionLogger
+     */
+    private $exceptionLogger;
+
     public function __construct(
         Context $context,
         \Amazon\Core\Model\Config\SimplePath $simplePath,
         \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
-        \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory
+        \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory,
+        \Amazon\Core\Logger\ExceptionLogger $exceptionLogger = null
     ) {
         parent::__construct($context);
         $this->simplePath = $simplePath;
         $this->scopeConfig = $scopeConfig;
         $this->jsonResultFactory = $jsonResultFactory;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
     }
 
     /**
@@ -53,19 +62,24 @@ class Poll extends System
      */
     public function execute()
     {
-        // Keypair is destroyed when credentials are saved
-        $shouldRefresh = !($this->scopeConfig->getValue(
-            \Amazon\Core\Model\Config\SimplePath::CONFIG_XML_PATH_PUBLIC_KEY,
-            'default',
-            0
-        ));
+        try {
+            // Keypair is destroyed when credentials are saved
+            $shouldRefresh = !($this->scopeConfig->getValue(
+                \Amazon\Core\Model\Config\SimplePath::CONFIG_XML_PATH_PUBLIC_KEY,
+                'default',
+                0
+            ));
 
-        if ($shouldRefresh) {
-            $this->simplePath->autoEnable();
-        }
+            if ($shouldRefresh) {
+                $this->simplePath->autoEnable();
+            }
 
-        $result = $this->jsonResultFactory->create();
-        $result->setData((int)$shouldRefresh);
-        return $result;
+            $result = $this->jsonResultFactory->create();
+            $result->setData((int)$shouldRefresh);
+            return $result;
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 }

--- a/src/Core/Controller/Simplepath/Listener.php
+++ b/src/Core/Controller/Simplepath/Listener.php
@@ -16,11 +16,17 @@
 
 namespace Amazon\Core\Controller\Simplepath;
 
+use Amazon\Core\Logger\ExceptionLogger;
+use Magento\Framework\App\CsrfAwareActionInterface;
+use Magento\Framework\App\Request\InvalidRequestException;
+use Magento\Framework\App\RequestInterface;
+use Magento\Framework\App\ObjectManager;
+
 /**
  * Class Listener
  * Retrieves entered keys from Amazon Pay popup
  */
-class Listener extends \Magento\Framework\App\Action\Action
+class Listener extends \Magento\Framework\App\Action\Action implements CsrfAwareActionInterface
 {
 
     // @var \Magento\Framework\Controller\Result\JsonFactory
@@ -29,22 +35,28 @@ class Listener extends \Magento\Framework\App\Action\Action
     // @var \Amazon\Core\Model\Config\SimplePath
     private $simplepath;
 
+    // @var \Amazon\Core\Logger\ExceptionLogger
+    private $exceptionLogger;
+
     /**
      * Listener constructor.
      * @param \Magento\Framework\App\Action\Context $context
      * @param \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory
      * @param \Amazon\Core\Model\Config\SimplePath $simplepath
      * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
+     * @param \Amazon\Core\Logger\ExceptionLogger $exceptionLogger
      */
     public function __construct(
         \Magento\Framework\App\Action\Context $context,
         \Magento\Framework\Controller\Result\JsonFactory $jsonResultFactory,
         \Amazon\Core\Model\Config\SimplePath $simplepath,
-        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
+        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
+        ExceptionLogger $exceptionLogger = null
     ) {
         $this->simplepath = $simplepath;
         $this->jsonResultFactory = $jsonResultFactory;
         $this->scopeConfig = $scopeConfig;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
         parent::__construct($context);
     }
 
@@ -53,41 +65,48 @@ class Listener extends \Magento\Framework\App\Action\Action
      */
     public function execute()
     {
-        $url = parse_url($this->simplepath->getEndpointRegister());
-        $host = trim(preg_replace("/\r|\n/", "", $url['host']));
-        $this->getResponse()->setHeader('Access-Control-Allow-Origin', 'https://' . $host);
-        $this->getResponse()->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
-        $this->getResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, X-CSRF-Token');
+        try {
+            $host = parse_url($this->getRequest()->getHeader('Origin'))['host'];
+            if (in_array($host, $this->simplepath->getListenerOrigins())) {
+                $this->getResponse()->setHeader('Access-Control-Allow-Origin', 'https://' . $host);
+            }
+            $this->getResponse()->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
+            $this->getResponse()->setHeader('Access-Control-Allow-Headers', 'Content-Type, X-CSRF-Token');
+            $this->getResponse()->setHeader('Vary', 'Origin');
 
-        $payload = $this->_request->getParam('payload');
+            $payload = $this->_request->getParam('payload');
 
-        $result = $this->jsonResultFactory->create();
+            $result = $this->jsonResultFactory->create();
 
-        $return = ['result' => 'error', 'message' => 'Empty payload'];
+            $return = ['result' => 'error', 'message' => 'Empty payload'];
 
-        try {
-            if (strpos($payload, 'encryptedKey') === false) {
-                $return = ['result' => 'error', 'message' => 'Invalid payload: ' . $payload];
-            } elseif ($payload) {
-                $json = $this->simplepath->decryptPayload($payload, false);
+            try {
+                if (strpos($payload, 'encryptedKey') === false) {
+                    $return = ['result' => 'error', 'message' => 'Invalid payload: ' . $payload];
+                } elseif ($payload) {
+                    $json = $this->simplepath->decryptPayload($payload, false);
 
-                if ($json) {
-                    $return = ['result' => 'success'];
+                    if ($json) {
+                        $return = ['result' => 'success'];
+                    }
+                } else {
+                    $return = ['result' => 'error', 'message' => 'payload parameter not found.'];
                 }
-            } else {
-                $return = ['result' => 'error', 'message' => 'payload parameter not found.'];
+            } catch (\Exception $e) {
+                $return = ['result' => 'error', 'message' => $e->getMessage()];
             }
-        } catch (\Exception $e) {
-            $return = ['result' => 'error', 'message' => $e->getMessage()];
-        }
 
-        if ($this->_request->isPost() && (empty($return['result']) || $return['result'] == 'error')) {
-            $result->setHttpResponseCode(\Magento\Framework\Webapi\Exception::HTTP_BAD_REQUEST);
-        }
+            if ($this->_request->isPost() && (empty($return['result']) || $return['result'] == 'error')) {
+                $result->setHttpResponseCode(\Magento\Framework\Webapi\Exception::HTTP_BAD_REQUEST);
+            }
 
-        $result->setData($return);
+            $result->setData($return);
 
-        return $result;
+            return $result;
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 
     /**
@@ -124,4 +143,24 @@ class Listener extends \Magento\Framework\App\Action\Action
         }
         return true;
     }
+
+    /**
+     * @inheritDoc
+     */
+    public function createCsrfValidationException(
+        RequestInterface $request
+    ): ?InvalidRequestException
+    {
+        return null;
+    }
+
+    /**
+     * Disable Magento's CSRF validation.
+     *
+     * @inheritDoc
+     */
+    public function validateForCsrf(RequestInterface $request): ?bool
+    {
+        return true;
+    }
 }

--- a/src/Core/Domain/AmazonAddressFactory.php
+++ b/src/Core/Domain/AmazonAddressFactory.php
@@ -23,10 +23,6 @@ use Magento\Framework\Escaper;
 
 class AmazonAddressFactory
 {
-    /**
-     * @var Escaper
-     */
-    private $escaper;
 
     /**
      * @var ObjectManagerInterface
@@ -48,7 +44,6 @@ class AmazonAddressFactory
      *
      * @param ObjectManagerInterface $objectManager
      * @param AmazonNameFactory $amazonNameFactory
-     * @param Escaper $escaper
      * @param array $addressDecoratorPool Per-country custom decorators of incoming address data.
      *                                         The key as an "ISO 3166-1 alpha-2" country code and
      *                                         the value as an FQCN of a child of AmazonAddress.
@@ -56,12 +51,10 @@ class AmazonAddressFactory
     public function __construct(
         ObjectManagerInterface $objectManager,
         AmazonNameFactory $amazonNameFactory,
-        Escaper $escaper,
         array $addressDecoratorPool = []
     ) {
         $this->objectManager = $objectManager;
         $this->amazonNameFactory = $amazonNameFactory;
-        $this->escaper = $escaper;
         $this->addressDecoratorPool = $addressDecoratorPool;
     }
 
@@ -76,22 +69,22 @@ class AmazonAddressFactory
         $address = $responseData['address'];
         $amazonName = $this->amazonNameFactory->create(
             [
-                'name' => $this->escaper->escapeHtml($address['Name']),
-                'country' => $this->escaper->escapeHtml($address['CountryCode'])]
+                'name' => $address['Name'],
+                'country' => $address['CountryCode']]
         );
 
         $data = [
-            AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $this->escaper->escapeHtml($address['PostalCode']) : '',
-            AmazonAddressInterface::COUNTRY_CODE => $this->escaper->escapeHtml($address['CountryCode']),
-            AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $this->escaper->escapeHtml($address['Phone']) : '',
-            AmazonAddressInterface::STATE_OR_REGION => isset($address['StateOrRegion']) ? $this->escaper->escapeHtml($address['StateOrRegion']) : '',
-            AmazonAddressInterface::FIRST_NAME => $this->escaper->escapeHtml($amazonName->getFirstName()),
-            AmazonAddressInterface::LAST_NAME => $this->escaper->escapeHtml($amazonName->getLastName()),
+            AmazonAddressInterface::POSTAL_CODE => isset($address['PostalCode']) ? $address['PostalCode'] : '',
+            AmazonAddressInterface::COUNTRY_CODE => $address['CountryCode'],
+            AmazonAddressInterface::TELEPHONE => isset($address['Phone']) ? $address['Phone'] : '',
+            AmazonAddressInterface::STATE_OR_REGION => isset($address['StateOrRegion']) ? $address['StateOrRegion'] : '',
+            AmazonAddressInterface::FIRST_NAME => $amazonName->getFirstName(),
+            AmazonAddressInterface::LAST_NAME => $amazonName->getLastName(),
             AmazonAddressInterface::LINES => $this->getLines($address)
         ];
 
         if (isset($address['City'])) {
-            $data[AmazonAddressInterface::CITY] = $this->escaper->escapeHtml($address['City']);
+            $data[AmazonAddressInterface::CITY] = $address['City'];
         }
 
         $amazonAddress = $this->objectManager->create(AmazonAddress::class, ['data' => $data]);
@@ -131,7 +124,7 @@ class AmazonAddressFactory
         $lines = [];
         for ($i = 1; $i <= 3; $i++) {
             if (isset($responseData['AddressLine' . $i]) && $responseData['AddressLine' . $i]) {
-                $lines[$i] = $this->escaper->escapeHtml($responseData['AddressLine' . $i]);
+                $lines[$i] = $responseData['AddressLine' . $i];
             }
         }
 

--- a/src/Core/Exception/AmazonServiceUnavailableException.php
+++ b/src/Core/Exception/AmazonServiceUnavailableException.php
@@ -15,9 +15,9 @@
  */
 namespace Amazon\Core\Exception;
 
-use Magento\Framework\Exception\RemoteServiceUnavailableException;
+use Magento\Framework\Exception\LocalizedException;
 
-class AmazonServiceUnavailableException extends RemoteServiceUnavailableException
+class AmazonServiceUnavailableException extends LocalizedException
 {
     const ERROR_MESSAGE = 'Amazon could not process your request.';
 

--- a/src/Core/Helper/Data.php
+++ b/src/Core/Helper/Data.php
@@ -33,31 +33,6 @@ class Data extends AbstractHelper
 
     const AMAZON_ACTIVE = 'payment/amazon_payment/active';
 
-    /**
-     * @var EncryptorInterface
-     */
-    private $encryptor;
-
-    /**
-     * @var StoreManagerInterface
-     */
-    private $storeManager;
-
-    /**
-     * @var \Amazon\Core\Helper\ClientIp
-     */
-    private $clientIpHelper;
-
-    /**
-     * @var ModuleListInterface
-     */
-    private $moduleList;
-
-    /**
-     * @var StatusFactory
-     */
-    private $moduleStatusFactory;
-
     /**
      * @var Config
      */
@@ -66,6 +41,11 @@ class Data extends AbstractHelper
     /**
      * Data constructor.
      *
+     * Because most of these methods have been moved to Amazon\Core\Model\AmazonConfig,
+     * there are several unused dependencies here which are not
+     * assigned in the constructor.
+     * They have been left in the constructor signature to avoid changing the API.
+     *
      * @param ModuleListInterface $moduleList
      * @param Context $context
      * @param EncryptorInterface $encryptor
@@ -75,87 +55,66 @@ class Data extends AbstractHelper
      * @param AmazonConfig $config
      */
     public function __construct(
-        ModuleListInterface $moduleList,
+        ModuleListInterface $moduleList = null,
         Context $context,
-        EncryptorInterface $encryptor,
-        StoreManagerInterface $storeManager,
-        ClientIp $clientIpHelper,
-        StatusFactory $moduleStatusFactory,
+        EncryptorInterface $encryptor = null,
+        StoreManagerInterface $storeManager = null,
+        ClientIp $clientIpHelper = null,
+        StatusFactory $moduleStatusFactory = null,
         AmazonConfig $config
     ) {
         parent::__construct($context);
-        $this->moduleList = $moduleList;
-        $this->encryptor = $encryptor;
-        $this->storeManager = $storeManager;
-        $this->clientIpHelper = $clientIpHelper;
-        $this->moduleStatusFactory = $moduleStatusFactory;
         $this->config = $config;
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getMerchantId($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/merchant_id',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getMerchantId($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAccessKey($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/access_key',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getAccessKey($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getSecretKey($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $secretKey = $this->scopeConfig->getValue(
-            'payment/amazon_payment/secret_key',
-            $scope,
-            $scopeCode
-        );
-        $secretKey = $this->encryptor->decrypt($secretKey);
-
-        return $secretKey;
+        return $this->config->getSecretKey($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getClientId($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/client_id',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getClientId($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getClientSecret($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $clientSecret = $this->scopeConfig->getValue(
-            'payment/amazon_payment/client_secret',
-            $scope,
-            $scopeCode
-        );
-        $clientSecret = $this->encryptor->decrypt($clientSecret);
-
-        return $clientSecret;
+        return $this->config->getClientSecret($scope, $scopeCode);
     }
 
     /*
@@ -165,63 +124,37 @@ class Data extends AbstractHelper
      */
     public function getPaymentRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/payment_region',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getPaymentRegion($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->getPaymentRegion($scope, $scopeCode);
+        return $this->config->getRegion($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getCurrencyCode($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
-
-        $currencyCodeMap = [
-            'de' => 'EUR',
-            'uk' => 'GBP',
-            'us' => 'USD',
-            'jp' => 'JPY'
-        ];
-
-        return array_key_exists($paymentRegion, $currencyCodeMap) ? $currencyCodeMap[$paymentRegion] : '';
+        return $this->config->getCurrencyCode($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getWidgetUrl($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
-        $sandboxEnabled = $this->isSandboxEnabled($scope, $scopeCode);
-
-        $widgetUrlMap = [
-            'de' => $this->getWidgetPath('production/de'),
-            'uk' => $this->getWidgetPath('production/uk'),
-            'us' => $this->getWidgetPath('production/us'),
-            'jp' => $this->getWidgetPath('production/jp')
-        ];
-
-        if ($sandboxEnabled) {
-            $widgetUrlMap = [
-                'de' => $this->getWidgetPath('sandbox/de'),
-                'uk' => $this->getWidgetPath('sandbox/uk'),
-                'us' => $this->getWidgetPath('sandbox/us'),
-                'jp' => $this->getWidgetPath('sandbox/jp')
-            ];
-        }
-
-        return array_key_exists($paymentRegion, $widgetUrlMap) ? $widgetUrlMap[$paymentRegion] : '';
+        return $this->config->getWidgetUrl($scope, $scopeCode);
     }
 
     /**
@@ -230,14 +163,12 @@ class Data extends AbstractHelper
      * @param $key
      * @param null $store
      * @return mixed
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getWidgetPath($key, $store = null)
     {
-        return $this->scopeConfig->getValue(
-            'widget/' . $key,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
-            $store
-        );
+        return $this->config->getWidgetPath($key, $store);
     }
 
     /**
@@ -245,229 +176,164 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getLoginScope($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
-
-        $scope = [
-            'profile',
-            'payments:widget',
-            'payments:shipping_address',
-            'payments:billing_address'
-        ];
-
-        return implode(' ', $scope);
+        return $this->config->getLoginScope($scope, $scopeCode);
     }
 
     /**
      * @param string $scope
      *
      * @return boolean
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isEuPaymentRegion($scope = ScopeInterface::SCOPE_STORE)
     {
-        $paymentRegion = $this->getPaymentRegion($scope);
-
-        return (in_array($paymentRegion, ['uk', 'de']));
+        return $this->config->isEuPaymentRegion($scope);
     }
 
     /*
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isSandboxEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return (bool)$this->scopeConfig->getValue(
-            'payment/amazon_payment/sandbox',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->isSandboxEnabled($scope, $scopeCode);
     }
 
     /*
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isPwaEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
-            $this->updateModuleStatus();
-            return false;
-        }
-
-        if (!$this->clientIpHelper->clientHasAllowedIp()) {
-            return false;
-        }
-
-        return $this->scopeConfig->isSetFlag(
-            self::AMAZON_ACTIVE,
-            $scope,
-            $scopeCode
-        );
+        return $this->config->isPwaEnabled($scope, $scopeCode);
     }
 
     /*
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isLwaEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
-            $this->updateModuleStatus();
-            return false;
-        }
-
-        if (!$this->clientIpHelper->clientHasAllowedIp()) {
-            return false;
-        }
-
-        return $this->scopeConfig->isSetFlag(
-            'payment/amazon_payment/lwa_enabled',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->isLwaEnabled($scope, $scopeCode);
     }
 
     /*
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
-            $this->updateModuleStatus();
-            return false;
-        }
-
-        return $this->isLwaEnabled($scope, $scopeCode) || $this->isPwaEnabled($scope, $scopeCode);
+        return $this->config->isEnabled($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getPaymentAction($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/payment_action',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getPaymentAction($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAuthorizationMode($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/authorization_mode',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getAuthorizationMode($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getUpdateMechanism($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/update_mechanism',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getUpdateMechanism($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonDisplayLanguage($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $buttonConfigLang = $this->scopeConfig
-            ->getValue('payment/amazon_payment/button_display_language', $scope, $scopeCode);
-
-        if (empty($buttonConfigLang)) {
-            $buttonConfigLang = $this->scopeConfig->getValue('general/locale/code', $scope, $scopeCode);
-        }
-
-        return str_replace('_', '-', $buttonConfigLang);
+        return $this->config->getButtonDisplayLanguage($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonType($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/button_type',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getButtonType($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonTypePwa($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $buttonType = $this->getButtonType($scope, $scopeCode);
-
-        $buttonTypeMap = [
-            'full' => 'PwA',
-            'short' => 'Pay',
-            'logo' => 'A',
-        ];
-
-        return array_key_exists($buttonType, $buttonTypeMap) ? $buttonTypeMap[$buttonType] : '';
+        return $this->config->getButtonTypePwa($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonTypeLwa($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $buttonType = $this->getButtonType($scope, $scopeCode);
-
-        $buttonTypeMap = [
-            'full' => 'LwA',
-            'short' => 'Login',
-            'logo' => 'A',
-        ];
-
-        return array_key_exists($buttonType, $buttonTypeMap) ? $buttonTypeMap[$buttonType] : '';
+        return $this->config->getButtonTypeLwa($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonColor($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/button_color',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getButtonColor($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getButtonSize($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/button_size',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getButtonSize($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getEmailStoreName($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/email_store_name',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getEmailStoreName($scope, $scopeCode);
     }
 
     /*
@@ -475,145 +341,113 @@ class Data extends AbstractHelper
      */
     public function getAdditionalAccessScope($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/additional_access_scope',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getAdditionalAccessScope($scope, $scopeCode);
     }
 
     /*
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isLoggingEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return (bool)$this->scopeConfig->getValue(
-            'payment/amazon_payment/logging',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->isLoggingEnabled($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getStoreName($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->getValue(
-            'payment/amazon_payment/storename',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->getStoreName($scope, $scopeCode);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getStoreFrontName($storeId)
     {
-        return $this->storeManager->getStore($storeId)->getName();
+        return $this->config->getStoreFrontName($storeId);
     }
 
     /*
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getRedirectUrl()
     {
-        $urlPath = $this->isLwaEnabled() ? 'amazon/login/authorize' : 'amazon/login/guest';
-        return $this->_getUrl($urlPath, ['_secure' => true]);
+        return $this->config->getRedirectUrl();
     }
 
     /**
      * @param string|null $context
      *
      * @return array
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getSandboxSimulationStrings($context = null)
     {
-        $simulationStrings = [
-            'default' => null
-        ];
-
-        if (in_array($context, ['authorization', 'authorization_capture'])) {
-            $simulationStrings['Authorization:Declined:InvalidPaymentMethod']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"InvalidPaymentMethod", ' .
-                '"PaymentMethodUpdateTimeInMins":5}}';
-            $simulationStrings['Authorization:Declined:AmazonRejected']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
-            $simulationStrings['Authorization:Declined:TransactionTimedOut']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"TransactionTimedOut"}}';
-        }
-
-        if (in_array($context, ['capture', 'authorization_capture'])) {
-            $simulationStrings['Capture:Declined:AmazonRejected']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
-            $simulationStrings['Capture:Pending']
-                = '{"SandboxSimulation": {"State":"Pending"}}';
-        }
-
-        if (in_array($context, ['refund'])) {
-            $simulationStrings['Refund:Declined']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
-        }
-
-        return $simulationStrings;
+        return $this->config->getSandboxSimulationStrings($context);
     }
 
     /**
      * @return array
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getSandboxSimulationOptions()
     {
-        $simulationlabels = [
-            'default' => __('No Simulation'),
-            'Authorization:Declined:InvalidPaymentMethod' => __('Authorization soft decline'),
-            'Authorization:Declined:AmazonRejected' => __('Authorization hard decline'),
-            'Authorization:Declined:TransactionTimedOut' => __('Authorization timed out')
-        ];
-
-        return $simulationlabels;
+        return $this->config->getSandboxSimulationOptions();
     }
 
     /**
      * @param string $scope
      * @param null $scopeCode
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isPaymentButtonEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return ($this->isPwaEnabled($scope, $scopeCode) && $this->isCurrentCurrencySupportedByAmazon());
+        return $this->config->isPaymentButtonEnabled($scope, $scopeCode);
     }
 
     /**
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isLoginButtonEnabled()
     {
-        return ($this->isLwaEnabled() && $this->isPwaEnabled() && $this->isCurrentCurrencySupportedByAmazon());
+        return $this->config->isLoginButtonEnabled();
     }
 
     /**
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isCurrentCurrencySupportedByAmazon()
     {
-        return $this->config->getBaseCurrencyCode() == $this->getCurrencyCode();
+        return $this->config->isCurrentCurrencySupportedByAmazon();
     }
 
     /**
      * @param string $paymentRegion E.g. "uk", "us", "de", "jp".
      *
      * @return mixed
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAmazonAccountUrlByPaymentRegion($paymentRegion)
     {
-        $url = $this->getPaymentRegionUrl($paymentRegion);
-
-        if (!$url || empty($url)) {
-            throw new \InvalidArgumentException("$paymentRegion is not a valid payment region");
-        }
-
-        return $url;
+        return $this->config->getAmazonAccountUrlByPaymentRegion($paymentRegion);
     }
 
     /**
@@ -622,14 +456,12 @@ class Data extends AbstractHelper
      * @param $key
      * @param null $store
      * @return mixed
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getPaymentRegionUrl($key, $store = null)
     {
-        return $this->scopeConfig->getValue(
-            'region/country/' . $key,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
-            $store
-        );
+        return $this->config->getPaymentRegionUrl($key, $store);
     }
 
     /**
@@ -638,14 +470,12 @@ class Data extends AbstractHelper
      * @param $key
      * @param null $store
      * @return mixed
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getClientPath($key, $store = null)
     {
-        return $this->scopeConfig->getValue(
-            'client/paths/' . $key,
-            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
-            $store
-        );
+        return $this->config->getClientPath($key, $store);
     }
 
     /**
@@ -653,11 +483,12 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return array
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getBlackListedTerms($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        $terms = $this->scopeConfig->getValue('payment/amazon_payment/packstation_terms', $scope, $scopeCode);
-        return explode(',', $terms);
+        return $this->config->getBlackListedTerms($scope, $scopeCode);
     }
 
     /**
@@ -665,19 +496,22 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isBlacklistedTermValidationEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig
-            ->isSetFlag('payment/amazon_payment/packstation_terms_validation_enabled', $scope, $scopeCode);
+        return $this->config->isBlacklistedTermValidationEnabled($scope, $scopeCode);
     }
 
     /**
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getOAuthRedirectUrl()
     {
-        return $this->_getUrl('amazon/login/processAuthHash', ['_secure' => true]);
+        return $this->config->getOAuthRedirectUrl();
     }
 
     /**
@@ -685,35 +519,36 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isPwaButtonVisibleOnProductPage($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->isPaymentButtonEnabled($scope, $scopeCode)
-            && $this->scopeConfig->isSetFlag('payment/amazon_payment/pwa_pp_button_is_visible', $scope, $scopeCode);
+        return $this->config->isPwaButtonVisibleOnProductPage($scope, $scopeCode);
     }
 
     /**
      * @param string $scope
      * @param null $scopeCode
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function isPayButtonAvailableInMinicart($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->isSetFlag('payment/amazon_payment/minicart_button_is_visible', $scope, $scopeCode);
+        return $this->config->isPayButtonAvailableInMinicart($scope, $scopeCode);
     }
 
     /**
      * @param string $scope
      * @param null $scopeCode
      * @return bool
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function allowAmLoginLoading($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig->isSetFlag(
-            'payment/amazon_payment/amazon_login_in_popup',
-            $scope,
-            $scopeCode
-        );
+        return $this->config->allowAmLoginLoading($scope, $scopeCode);
     }
 
     /**
@@ -721,64 +556,41 @@ class Data extends AbstractHelper
      * @param null|string $scopeCode
      *
      * @return string
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getCredentialsJson($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
     {
-        return $this->scopeConfig
-            ->getValue('payment/amazon_payment/credentials_json', $scope, $scopeCode);
+        return $this->config->getCredentialsJson($scope, $scopeCode);
     }
 
     /**
      * @return array
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAmazonCredentialsFields()
     {
-        return [
-            $this->getClientPath('secretkey'),
-            $this->getClientPath('accesskey'),
-            $this->getClientPath('merchantid'),
-            $this->getClientPath('clientid'),
-            $this->getClientPath('clientsecret')
-        ];
+        return $this->config->getAmazonCredentialsFields();
     }
 
     /**
      * @return array
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getAmazonCredentialsEncryptedFields()
     {
-        return [
-            $this->getClientPath('secretkey'),
-            $this->getClientPath('clientsecret')
-        ];
+        return $this->config->getAmazonCredentialsEncryptedFields();
     }
 
     /**
      * @return null
+     *
+     * @deprecated Use \Amazon\Core\Model\AmazonConfig instead
      */
     public function getVersion()
     {
-        $version = $this->moduleList->getOne('Amazon_Core');
-        if ($version && isset($version['setup_version'])) {
-            return $version['setup_version'];
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Ensures all modules are disabled if one of them is disabled. Amazon Payment or Amazon Login modules will cause
-     * the frontend to break if they are in different enabled states.
-     */
-    private function updateModuleStatus()
-    {
-        $isDisabled = $this->moduleList->has('Amazon_Payment') ? 0 : 1;
-        $isDisabled += $this->moduleList->has('Amazon_Login') ? 0 : 1;
-        $isDisabled += $this->moduleList->has('Amazon_Core') ? 0 : 1;
-
-        // Make sure all of them are disabled if any one of them is disabled.
-        if ($isDisabled > 0 && $isDisabled != 3) {
-            $this->moduleStatusFactory->create()->setIsEnabled(false, ['Amazon_Payment', 'Amazon_Login', 'Amazon_Core']);
-        }
+        return $this->config->getVersion();
     }
 }

--- /dev/null
+++ b/src/Core/Logger/ExceptionLogger.php
@@ -0,0 +1,31 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Core\Logger;
+
+use Psr\Log\LoggerInterface;
+
+class ExceptionLogger
+{
+    private $logger;
+
+    public function __construct(LoggerInterface $logger) {
+        $this->logger = $logger;
+    }
+    public function logException(\Exception $e) {
+        $message = (string) $e;
+        $this->logger->addError($message);
+    }
+}

--- a/src/Core/Model/AmazonConfig.php
+++ b/src/Core/Model/AmazonConfig.php
@@ -16,12 +16,22 @@
 
 namespace Amazon\Core\Model;
 
+use Magento\Framework\Profiler\Driver\Standard\Stat;
 use Magento\Store\Model\ScopeInterface;
 use Magento\Framework\App\Config\ScopeConfigInterface;
 use Magento\Store\Model\StoreManagerInterface;
+use Magento\Framework\UrlInterface;
+use Magento\Framework\Module\ModuleListInterface;
+use Magento\Framework\Encryption\EncryptorInterface;
+use Amazon\Core\Helper\ClientIp;
+use Magento\Framework\Module\StatusFactory;
+use Magento\Framework\App\ObjectManager;
 
 class AmazonConfig
 {
+
+    const AMAZON_ACTIVE = 'payment/amazon_payment/active';
+
     /**
      * @var \Magento\Framework\App\Config\ScopeConfigInterface
      */
@@ -32,18 +42,58 @@ class AmazonConfig
      */
     private $storeManager;
 
+    /**
+     * @var UrlInterface
+     */
+    private $urlBuilder;
+
+    /**
+     * @var ModuleListInterface
+     */
+    private $moduleList;
+
+    /**
+     * @var EncryptorInterface
+     */
+    private $encryptor;
+
+    /**
+     * @var ClientIp
+     */
+    private $clientIpHelper;
+
+    /**
+     * @var StatusFactory
+     */
+    private $moduleStatusFactory;
+
     /**
      * Config constructor.
      *
      * @param StoreManagerInterface $storeManager
      * @param ScopeConfigInterface $scopeConfig
+     * @param UrlInterface $urlBuilder
+     * @param ModuleListInterface $moduleList
+     * @param EncryptorInterface $encryptor
+     * @param ClientIp $clientIpHelper
+     * @param StatusFactory $moduleStatusFactory
      */
     public function __construct(
         StoreManagerInterface $storeManager,
-        ScopeConfigInterface $scopeConfig
+        ScopeConfigInterface $scopeConfig,
+        UrlInterface $urlBuilder = null,
+        ModuleListInterface $moduleList = null,
+        EncryptorInterface $encryptor = null,
+        ClientIp $clientIpHelper = null,
+        StatusFactory $moduleStatusFactory = null
     ) {
         $this->storeManager = $storeManager;
         $this->scopeConfig = $scopeConfig;
+        $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->create(UrlInterface::class);
+        $this->moduleList = $moduleList ?: ObjectManager::getInstance()->create(ModuleListInterface::class);
+        $this->encryptor = $encryptor ?: ObjectManager::getInstance()->create(EncryptorInterface::class);
+        $this->clientIpHelper = $clientIpHelper ?: ObjectManager::getInstance()->create(ClientIp::class);
+        $this->moduleStatusFactory = $moduleStatusFactory ?: ObjectManager::getInstance()->create(StatusFactory::class);
     }
 
     /**
@@ -58,21 +108,6 @@ class AmazonConfig
         return $this->storeManager->getStore()->getCurrentCurrency()->getCode();
     }
 
-    /**
-     * @param string $scope
-     * @param null $scopeCode
-     *
-     * @return mixed
-     */
-    public function getPaymentRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
-    {
-        return $this->scopeConfig->getValue(
-          'payment/amazon_payment/payment_region',
-          $scope,
-          $scopeCode
-        );
-    }
-
     /**
      * Checks to see if store's selected region is a multicurrency region.
      * @param string $scope
@@ -83,9 +118,9 @@ class AmazonConfig
     public function isMulticurrencyRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null, $store = null)
     {
         $mcRegions = $this->scopeConfig->getValue(
-          'multicurrency/regions',
-          $scope,
-          $store
+            'multicurrency/regions',
+            $scope,
+            $store
         );
 
         if ($mcRegions) {
@@ -111,9 +146,9 @@ class AmazonConfig
     public function multiCurrencyEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null, $store = null)
     {
         $enabled = $this->scopeConfig->getValue(
-          'payment/amazon_payment/multicurrency',
-          $scope,
-          $scopeCode
+            'payment/amazon_payment/multicurrency',
+            $scope,
+            $scopeCode
         );
 
         if ($enabled) {
@@ -134,9 +169,9 @@ class AmazonConfig
         if ($this->multiCurrencyEnabled()) {
             // get allowed presentment currencies from config.xml
             $currencies = $this->scopeConfig->getValue(
-              'multicurrency/currencies',
-              ScopeInterface::SCOPE_STORE,
-              $store
+                'multicurrency/currencies',
+                ScopeInterface::SCOPE_STORE,
+                $store
             );
 
             if ($currencies) {
@@ -167,10 +202,707 @@ class AmazonConfig
     public function getBaseCurrencyCode($store = null)
     {
         return $this->scopeConfig->getValue(
-          'currency/options/base',
-          ScopeInterface::SCOPE_STORE,
-          $store
+            'currency/options/base',
+            ScopeInterface::SCOPE_STORE,
+            $store
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getMerchantId($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/merchant_id',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getAccessKey($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/access_key',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getSecretKey($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $secretKey = $this->scopeConfig->getValue(
+            'payment/amazon_payment/secret_key',
+            $scope,
+            $scopeCode
+        );
+        $secretKey = $this->encryptor->decrypt($secretKey);
+
+        return $secretKey;
+    }
+
+    /*
+     * @return string
+     */
+    public function getClientId($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/client_id',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getClientSecret($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $clientSecret = $this->scopeConfig->getValue(
+            'payment/amazon_payment/client_secret',
+            $scope,
+            $scopeCode
+        );
+        $clientSecret = $this->encryptor->decrypt($clientSecret);
+
+        return $clientSecret;
+    }
+
+    /*
+     * @return string
+     *
+     * @deprecated - use \Amazon\Core\Model\AmazonConfig::getPaymentRegion() instead
+     */
+    public function getPaymentRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/payment_region',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getRegion($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->getPaymentRegion($scope, $scopeCode);
+    }
+
+    /*
+     * @return string
+     */
+    public function getCurrencyCode($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
+
+        $currencyCodeMap = [
+            'de' => 'EUR',
+            'uk' => 'GBP',
+            'us' => 'USD',
+            'jp' => 'JPY'
+        ];
+
+        return array_key_exists($paymentRegion, $currencyCodeMap) ? $currencyCodeMap[$paymentRegion] : '';
+    }
+
+    /*
+     * @return string
+     */
+    public function getWidgetUrl($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
+        $sandboxEnabled = $this->isSandboxEnabled($scope, $scopeCode);
+
+        $widgetUrlMap = [
+            'de' => $this->getWidgetPath('production/de'),
+            'uk' => $this->getWidgetPath('production/uk'),
+            'us' => $this->getWidgetPath('production/us'),
+            'jp' => $this->getWidgetPath('production/jp')
+        ];
+
+        if ($sandboxEnabled) {
+            $widgetUrlMap = [
+                'de' => $this->getWidgetPath('sandbox/de'),
+                'uk' => $this->getWidgetPath('sandbox/uk'),
+                'us' => $this->getWidgetPath('sandbox/us'),
+                'jp' => $this->getWidgetPath('sandbox/jp')
+            ];
+        }
+
+        return array_key_exists($paymentRegion, $widgetUrlMap) ? $widgetUrlMap[$paymentRegion] : '';
+    }
+
+    /**
+     * Retrieves region path from config.xml settings
+     *
+     * @param $key
+     * @param null $store
+     * @return mixed
+     */
+    public function getWidgetPath($key, $store = null)
+    {
+        return $this->scopeConfig->getValue(
+            'widget/' . $key,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            $store
         );
     }
 
-}
\ No newline at end of file
+    /**
+     * @param string $scope
+     * @param null|string $scopeCode
+     *
+     * @return string
+     */
+    public function getLoginScope($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $paymentRegion = $this->getPaymentRegion($scope, $scopeCode);
+
+        $scope = [
+            'profile',
+            'payments:widget',
+            'payments:shipping_address',
+            'payments:billing_address'
+        ];
+
+        return implode(' ', $scope);
+    }
+
+    /**
+     * @param string $scope
+     *
+     * @return boolean
+     */
+    public function isEuPaymentRegion($scope = ScopeInterface::SCOPE_STORE)
+    {
+        $paymentRegion = $this->getPaymentRegion($scope);
+
+        return (in_array($paymentRegion, ['uk', 'de']));
+    }
+
+    /*
+     * @return bool
+     */
+    public function isSandboxEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return (bool)$this->scopeConfig->getValue(
+            'payment/amazon_payment/sandbox',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return bool
+     */
+    public function isPwaEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
+            $this->updateModuleStatus();
+            return false;
+        }
+
+        if (!$this->clientIpHelper->clientHasAllowedIp()) {
+            return false;
+        }
+
+        return $this->scopeConfig->isSetFlag(
+            self::AMAZON_ACTIVE,
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return bool
+     */
+    public function isLwaEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
+            $this->updateModuleStatus();
+            return false;
+        }
+
+        if (!$this->clientIpHelper->clientHasAllowedIp()) {
+            return false;
+        }
+
+        return $this->scopeConfig->isSetFlag(
+            'payment/amazon_payment/lwa_enabled',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return bool
+     */
+    public function isLwaDisabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return !$this->isLwaEnabled($scope, $scopeCode);
+    }
+
+    /*
+     * @return bool
+     */
+    public function isEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        if (!$this->moduleList->has('Amazon_Payment') || !$this->moduleList->has('Amazon_Login')) {
+            $this->updateModuleStatus();
+            return false;
+        }
+
+        return $this->isLwaEnabled($scope, $scopeCode) || $this->isPwaEnabled($scope, $scopeCode);
+    }
+
+    /*
+     * @return string
+     */
+    public function getPaymentAction($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/payment_action',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getAuthorizationMode($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/authorization_mode',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getUpdateMechanism($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/update_mechanism',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getButtonDisplayLanguage($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $buttonConfigLang = $this->scopeConfig
+            ->getValue('payment/amazon_payment/button_display_language', $scope, $scopeCode);
+
+        if (empty($buttonConfigLang)) {
+            $buttonConfigLang = $this->scopeConfig->getValue('general/locale/code', $scope, $scopeCode);
+        }
+
+        return str_replace('_', '-', $buttonConfigLang);
+    }
+
+    /*
+     * @return string
+     */
+    public function getButtonType($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/button_type',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getButtonTypePwa($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $buttonType = $this->getButtonType($scope, $scopeCode);
+
+        $buttonTypeMap = [
+            'full' => 'PwA',
+            'short' => 'Pay',
+            'logo' => 'A',
+        ];
+
+        return array_key_exists($buttonType, $buttonTypeMap) ? $buttonTypeMap[$buttonType] : '';
+    }
+
+    /*
+     * @return string
+     */
+    public function getButtonTypeLwa($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $buttonType = $this->getButtonType($scope, $scopeCode);
+
+        $buttonTypeMap = [
+            'full' => 'LwA',
+            'short' => 'Login',
+            'logo' => 'A',
+        ];
+
+        return array_key_exists($buttonType, $buttonTypeMap) ? $buttonTypeMap[$buttonType] : '';
+    }
+
+    /*
+     * @return string
+     */
+    public function getButtonColor($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/button_color',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getButtonSize($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/button_size',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getEmailStoreName($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/email_store_name',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getAdditionalAccessScope($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/additional_access_scope',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return bool
+     */
+    public function isLoggingEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return (bool)$this->scopeConfig->getValue(
+            'payment/amazon_payment/logging',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getStoreName($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->getValue(
+            'payment/amazon_payment/storename',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /*
+     * @return string
+     */
+    public function getStoreFrontName($storeId)
+    {
+        return $this->storeManager->getStore($storeId)->getName();
+    }
+
+    /*
+     * @return string
+     */
+    public function getRedirectUrl()
+    {
+        $urlPath = $this->isLwaEnabled() ? 'amazon/login/authorize' : 'amazon/login/guest';
+        return $this->urlBuilder->getUrl($urlPath, ['_secure' => true]);
+    }
+
+    /**
+     * @param string|null $context
+     *
+     * @return array
+     */
+    public function getSandboxSimulationStrings($context = null)
+    {
+        $simulationStrings = [
+            'default' => null
+        ];
+
+        if (in_array($context, ['authorization', 'authorization_capture'])) {
+            $simulationStrings['Authorization:Declined:InvalidPaymentMethod']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"InvalidPaymentMethod", ' .
+                '"PaymentMethodUpdateTimeInMins":5}}';
+            $simulationStrings['Authorization:Declined:AmazonRejected']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
+            $simulationStrings['Authorization:Declined:TransactionTimedOut']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"TransactionTimedOut"}}';
+        }
+
+        if (in_array($context, ['capture', 'authorization_capture'])) {
+            $simulationStrings['Capture:Declined:AmazonRejected']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
+            $simulationStrings['Capture:Pending']
+                = '{"SandboxSimulation": {"State":"Pending"}}';
+        }
+
+        if (in_array($context, ['refund'])) {
+            $simulationStrings['Refund:Declined']
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
+        }
+
+        return $simulationStrings;
+    }
+
+    /**
+     * @return array
+     */
+    public function getSandboxSimulationOptions()
+    {
+        $simulationlabels = [
+            'default' => __('No Simulation'),
+            'Authorization:Declined:InvalidPaymentMethod' => __('Authorization soft decline'),
+            'Authorization:Declined:AmazonRejected' => __('Authorization hard decline'),
+            'Authorization:Declined:TransactionTimedOut' => __('Authorization timed out')
+        ];
+
+        return $simulationlabels;
+    }
+
+    /**
+     * @param string $scope
+     * @param null $scopeCode
+     * @return bool
+     */
+    public function isPaymentButtonEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return ($this->isPwaEnabled($scope, $scopeCode) && $this->isCurrentCurrencySupportedByAmazon());
+    }
+
+    /**
+     * @return bool
+     */
+    public function isLoginButtonEnabled()
+    {
+        return ($this->isLwaEnabled() && $this->isPwaEnabled() && $this->isCurrentCurrencySupportedByAmazon());
+    }
+
+    /**
+     * @return bool
+     */
+    public function isCurrentCurrencySupportedByAmazon()
+    {
+        return $this->getBaseCurrencyCode() == $this->getCurrencyCode();
+    }
+
+    /**
+     * @param string $paymentRegion E.g. "uk", "us", "de", "jp".
+     *
+     * @return mixed
+     */
+    public function getAmazonAccountUrlByPaymentRegion($paymentRegion)
+    {
+        $url = $this->getPaymentRegionUrl($paymentRegion);
+
+        if (!$url || empty($url)) {
+            throw new \InvalidArgumentException("$paymentRegion is not a valid payment region");
+        }
+
+        return $url;
+    }
+
+    /**
+     * Retrieves region path from config.xml settings
+     *
+     * @param $key
+     * @param null $store
+     * @return mixed
+     */
+    public function getPaymentRegionUrl($key, $store = null)
+    {
+        return $this->scopeConfig->getValue(
+            'region/country/' . $key,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            $store
+        );
+    }
+
+    /**
+     * Retrieves client path from config.xml settings
+     *
+     * @param $key
+     * @param null $store
+     * @return mixed
+     */
+    public function getClientPath($key, $store = null)
+    {
+        return $this->scopeConfig->getValue(
+            'client/paths/' . $key,
+            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+            $store
+        );
+    }
+
+    /**
+     * @param string $scope
+     * @param null|string $scopeCode
+     *
+     * @return array
+     */
+    public function getBlackListedTerms($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        $terms = $this->scopeConfig->getValue('payment/amazon_payment/packstation_terms', $scope, $scopeCode);
+        return explode(',', $terms);
+    }
+
+    /**
+     * @param string $scope
+     * @param null|string $scopeCode
+     *
+     * @return bool
+     */
+    public function isBlacklistedTermValidationEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig
+            ->isSetFlag('payment/amazon_payment/packstation_terms_validation_enabled', $scope, $scopeCode);
+    }
+
+    /**
+     * @return string
+     */
+    public function getOAuthRedirectUrl()
+    {
+        return $this->urlBuilder->getUrl('amazon/login/processAuthHash', ['_secure' => true]);
+    }
+
+    /**
+     * @param string $scope
+     * @param null|string $scopeCode
+     *
+     * @return bool
+     */
+    public function isPwaButtonVisibleOnProductPage($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->isPaymentButtonEnabled($scope, $scopeCode)
+            && $this->scopeConfig->isSetFlag('payment/amazon_payment/pwa_pp_button_is_visible', $scope, $scopeCode);
+    }
+
+    /**
+     * @param string $scope
+     * @param null $scopeCode
+     * @return bool
+     */
+    public function isPayButtonAvailableInMinicart($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->isSetFlag('payment/amazon_payment/minicart_button_is_visible', $scope, $scopeCode);
+    }
+
+    /**
+     * @param string $scope
+     * @param null $scopeCode
+     * @return bool
+     */
+    public function allowAmLoginLoading($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig->isSetFlag(
+            'payment/amazon_payment/amazon_login_in_popup',
+            $scope,
+            $scopeCode
+        );
+    }
+
+    /**
+     * @param string $scope
+     * @param null|string $scopeCode
+     *
+     * @return string
+     */
+    public function getCredentialsJson($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->scopeConfig
+            ->getValue('payment/amazon_payment/credentials_json', $scope, $scopeCode);
+    }
+
+    /**
+     * @return array
+     */
+    public function getAmazonCredentialsFields()
+    {
+        return [
+            $this->getClientPath('secretkey'),
+            $this->getClientPath('accesskey'),
+            $this->getClientPath('merchantid'),
+            $this->getClientPath('clientid'),
+            $this->getClientPath('clientsecret')
+        ];
+    }
+
+    /**
+     * @return array
+     */
+    public function getAmazonCredentialsEncryptedFields()
+    {
+        return [
+            $this->getClientPath('secretkey'),
+            $this->getClientPath('clientsecret')
+        ];
+    }
+
+    /**
+     * @return null
+     */
+    public function getVersion()
+    {
+        $version = $this->moduleList->getOne('Amazon_Core');
+        if ($version && isset($version['setup_version'])) {
+            return $version['setup_version'];
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Ensures all modules are disabled if one of them is disabled. Amazon Payment or Amazon Login modules will cause
+     * the frontend to break if they are in different enabled states.
+     */
+    private function updateModuleStatus()
+    {
+        $isDisabled = $this->moduleList->has('Amazon_Payment') ? 0 : 1;
+        $isDisabled += $this->moduleList->has('Amazon_Login') ? 0 : 1;
+        $isDisabled += $this->moduleList->has('Amazon_Core') ? 0 : 1;
+
+        // Make sure all of them are disabled if any one of them is disabled.
+        if ($isDisabled > 0 && $isDisabled != 3) {
+            $this->moduleStatusFactory->create()->setIsEnabled(false, ['Amazon_Payment', 'Amazon_Login', 'Amazon_Core']);
+        }
+    }
+}

--- a/src/Core/Model/Config/SimplePath.php
+++ b/src/Core/Model/Config/SimplePath.php
@@ -194,6 +194,19 @@ class SimplePath
         return $this->getEndpointDomain() . 'register/getpublickey';
     }
 
+    /**
+     * Return listener origins
+     */
+    public function getListenerOrigins()
+    {
+        return [
+            'payments.amazon.com',
+            'payments-eu.amazon.com',
+            'sellercentral.amazon.com',
+            'sellercentral-europe.amazon.com'
+        ];
+    }
+
     /**
      * Generate and save RSA keys
      */

--- a/src/Core/composer.json
+++ b/src/Core/composer.json
@@ -2,7 +2,7 @@
   "name": "amzn/amazon-pay-and-login-with-amazon-core-module",
   "description": "Shared functionality for Amazon Pay and Login with Amazon modules",
   "type": "magento2-module",
-  "version": "3.1.5",
+  "version": "3.2.11",
   "license": [
     "Apache-2.0"
   ],
@@ -20,6 +20,7 @@
     "magento/module-backend": "*",
     "magento/module-payment": "*",
     "magento/module-paypal": "*",
+    "magento/module-eav": "*",
     "amzn/amazon-pay-sdk-php": "^3.2.0"
   },
   "autoload": {

--- a/src/Core/etc/module.xml
+++ b/src/Core/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Core" setup_version="3.1.5">
+    <module name="Amazon_Core" setup_version="3.2.11">
         <sequence>
             <module name="Magento_Store"/>
             <module name="Magento_Customer"/>

--- a/src/Core/view/adminhtml/templates/system/config/simplepath_admin.phtml
+++ b/src/Core/view/adminhtml/templates/system/config/simplepath_admin.phtml
@@ -17,7 +17,7 @@
 -->
 <br/>
 <div data-mage-init='{
-        "Amazon_Core/js/simplepath": <?php echo /* @noEscape */ $block->getJsonConfig() ?> }'
+        "Amazon_Core/js/simplepath": <?php echo $block->escapeHtml($block->getJsonConfig()) ?> }'
     id="amazon_simplepath">
 
     <?php if (!$block->getCurrency()) : // SimplePath not supported ?>

--- a/src/Login/composer.json
+++ b/src/Login/composer.json
@@ -2,17 +2,18 @@
   "name": "amzn/login-with-amazon-module",
   "description": "Login with Amazon module",
   "type": "magento2-module",
-  "version": "3.1.5",
+  "version": "3.2.11",
   "license": [
     "Apache-2.0"
   ],
   "require": {
     "php": "~7.1.3||~7.2.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.1.5",
-    "magento/module-customer": "*",
-    "magento/module-store": "*",
-    "magento/module-eav": "*",
-    "magento/module-checkout": "*",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.2.11",
+    "magento/framework": "^102",
+    "magento/module-customer": "^102",
+    "magento/module-store": "^101",
+    "magento/module-eav": "^102",
+    "magento/module-checkout": "^100.3",
     "magento/module-checkout-agreements": "*"
 
   },

--- a/src/Login/etc/module.xml
+++ b/src/Login/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Login" setup_version="3.1.5">
+    <module name="Amazon_Login" setup_version="3.2.11">
         <sequence>
             <module name="Amazon_Core"/>
         </sequence>

--- a/src/Login/view/frontend/layout/default.xml
+++ b/src/Login/view/frontend/layout/default.xml
@@ -29,6 +29,8 @@
                                     <item name="displayArea" xsi:type="string">additional-login-form-fields</item>
                                     <item name="config" xsi:type="array">
                                         <item name="tooltip" xsi:type="string" translate="true">Securely login into our website using your existing Amazon details.</item>
+                                        <item name="componentDisabled" xsi:type="helper"
+                                              helper="Amazon\Core\Model\AmazonConfig::isLwaDisabled"/>
                                     </item>
                                 </item>
                             </item>

--- a/src/Login/view/frontend/templates/oAuthRedirect.phtml
+++ b/src/Login/view/frontend/templates/oAuthRedirect.phtml
@@ -15,7 +15,13 @@
  */
 ?>
 <?php /** @var $block \Amazon\Login\Block\OAuthRedirect */ ?>
-<div><?= $block->escapeHtml(__('You will be redirected shortly...')); ?></div>
+<div>
+    <?= $block->escapeHtml(__('You will be redirected shortly...')); ?><br/>
+    <?= $block->escapeHtml(__(
+            'If you are not redirected automatically, try refreshing the page,'
+            . ' or return to your cart and use another payment method.'
+        )); ?>
+</div>
 <script>
 require([
     'jquery',

--- a/src/Login/view/frontend/web/js/amazon-redirect.js
+++ b/src/Login/view/frontend/web/js/amazon-redirect.js
@@ -44,25 +44,7 @@ define([
             // we don't have the customer's consent or invalid request
             this.redirectOnRequestWithError();
             this.setAuthStateCookies();
-            amazonCore.amazonDefined.subscribe(function () {
-                //only set this on the redirect page
-                amazon.Login.setUseCookie(true); //eslint-disable-line no-undef
-                amazonCore.verifyAmazonLoggedIn().then(function (loggedIn) {
-                    if (loggedIn) {
-                        self.redirect();
-                    } else {
-                        window.location = amazonPaymentConfig.getValue('customerLoginPageUrl');
-                    }
-                }, function(error) {
-                    $('body').trigger('processStop');
-                    customerData.set('messages', {
-                        messages: [{
-                            type: 'error',
-                            text: error
-                        }]
-                    });
-                });
-            }, this);
+            self.redirect();
         },
 
         /**

--- /dev/null
+++ b/src/Payment/Controller/Payment/CompleteCheckout.php
@@ -0,0 +1,137 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Payment\Controller\Payment;
+
+use Amazon\Core\Model\AmazonConfig;
+use Amazon\Core\Exception\AmazonWebapiException;
+use Amazon\Core\Logger\ExceptionLogger;
+use Magento\Framework\App\Action\Action;
+use Magento\Framework\App\Action\Context;
+use Magento\Quote\Api\CartManagementInterface;
+use Magento\Quote\Api\GuestCartManagementInterface;
+use Magento\Checkout\Model\Session as CheckoutSession;
+use Magento\Customer\Model\Session;
+use Magento\Framework\View\Result\PageFactory;
+use Magento\Framework\Message\ManagerInterface as MessageManager;
+use Magento\Framework\App\ObjectManager;
+
+/**
+ * Class CompleteCheckout
+ *
+ * @package Amazon\Payment\Controller\Payment
+ */
+class CompleteCheckout extends Action
+{
+
+    /**
+     * @var AmazonConfig
+     */
+    private $amazonConfig;
+
+    /**
+     * @var CheckoutSession
+     */
+    private $checkoutSession;
+
+    /**
+     * @var CartManagementInterface
+     */
+    private $cartManagement;
+
+    /**
+     * @var PageFactory
+     */
+    private $pageFactory;
+
+    /**
+     * @var ExceptionLogger
+     */
+    private $exceptionLogger;
+
+    /**
+     * CompleteCheckout constructor.
+     *
+     * @param Context $context
+     * @param AmazonConfig $amazonConfig
+     * @param CartManagementInterface $cartManagement
+     * @param GuestCartManagementInterface $guestCartManagement
+     * @param CheckoutSession $checkoutSession
+     * @param Session $session
+     * @param PageFactory $pageFactory
+     * @param MessageManager $messageManager
+     * @param ExceptionLogger $exceptionLogger
+     */
+    public function __construct(
+        Context $context,
+        AmazonConfig $amazonConfig,
+        CartManagementInterface $cartManagement,
+        GuestCartManagementInterface $guestCartManagement,
+        CheckoutSession $checkoutSession,
+        Session $session,
+        PageFactory $pageFactory,
+        MessageManager $messageManager,
+        ExceptionLogger $exceptionLogger = null
+    ) {
+        parent::__construct($context);
+        $this->amazonConfig = $amazonConfig;
+        $this->cartManagement = $cartManagement;
+        $this->checkoutSession = $checkoutSession;
+        $this->session = $session;
+        $this->pageFactory = $pageFactory;
+        $this->messageManager = $messageManager;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
+    }
+
+    /*
+     * @inheritdoc
+     */
+    public function execute()
+    {
+        try {
+            $authenticationStatus = $this->getRequest()->getParam('AuthenticationStatus');
+            switch ($authenticationStatus) {
+                case 'Success':
+                    try {
+                        if (!$this->session->isLoggedIn()) {
+                            $this->checkoutSession->getQuote()->setCheckoutMethod(CartManagementInterface::METHOD_GUEST);
+                        }
+                        $this->cartManagement->placeOrder($this->checkoutSession->getQuoteId());
+                        return $this->_redirect('checkout/onepage/success');
+                    } catch (AmazonWebapiException $e) {
+                        $this->exceptionLogger->logException($e);
+                        $this->messageManager->addErrorMessage($e->getMessage());
+                    }
+                    break;
+                case 'Failure':
+                    $this->messageManager->addErrorMessage(__(
+                        'Amazon Pay was unable to authenticate the payment instrument.  '
+                        . 'Please try again, or use a different payment method.'
+                    ));
+                    break;
+                case 'Abandoned':
+                default:
+                    $this->messageManager->addErrorMessage(__(
+                        'The SCA challenge was not completed successfully.  '
+                        . 'Please try again, or use a different payment method.'
+                    ));
+            }
+            return $this->_redirect('checkout/cart');
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
+    }
+}

--- a/src/Payment/Controller/Payment/Ipn.php
+++ b/src/Payment/Controller/Payment/Ipn.php
@@ -15,8 +15,10 @@
  */
 namespace Amazon\Payment\Controller\Payment;
 
+use Amazon\Core\Exception\AmazonWebapiException;
 use Amazon\Core\Helper\Data;
 use Amazon\Core\Model\Config\Source\UpdateMechanism;
+use Amazon\Core\Logger\ExceptionLogger;
 use Amazon\Payment\Api\Ipn\CompositeProcessorInterface;
 use Amazon\Payment\Ipn\IpnHandlerFactoryInterface;
 use Magento\Framework\App\Action\Action;
@@ -24,6 +26,7 @@ use Magento\Framework\App\Action\Context;
 use Magento\Framework\App\RequestInterface;
 use Magento\Framework\App\ResponseInterface;
 use Magento\Framework\Exception\NotFoundException;
+use Magento\Framework\App\ObjectManager;
 
 class Ipn extends Action
 {
@@ -42,29 +45,41 @@ class Ipn extends Action
      */
     private $coreHelper;
 
+    /**
+     * @var ExceptionLogger
+     */
+    private $exceptionLogger;
+
     public function __construct(
         Context $context,
         IpnHandlerFactoryInterface $ipnHandlerFactory,
         CompositeProcessorInterface $compositeProcessor,
-        Data $coreHelper
+        Data $coreHelper,
+        ExceptionLogger $exceptionLogger = null
     ) {
         parent::__construct($context);
         $this->ipnHandlerFactory  = $ipnHandlerFactory;
         $this->compositeProcessor = $compositeProcessor;
         $this->coreHelper         = $coreHelper;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
     }
 
     public function execute()
     {
-        if (UpdateMechanism::IPN !== $this->coreHelper->getUpdateMechanism()) {
-            throw new NotFoundException(__('IPN not enabled.'));
-        }
+        try {
+            if (UpdateMechanism::IPN !== $this->coreHelper->getUpdateMechanism()) {
+                throw new NotFoundException(__('IPN not enabled.'));
+            }
 
-        $headers = $this->_request->getHeaders()->toArray();
-        $body    = $this->_request->getContent();
+            $headers = $this->_request->getHeaders()->toArray();
+            $body = $this->_request->getContent();
 
-        $ipnHandler = $this->ipnHandlerFactory->create($headers, $body);
-        $ipnData    = $ipnHandler->toArray();
-        $this->compositeProcessor->process($ipnData);
+            $ipnHandler = $this->ipnHandlerFactory->create($headers, $body);
+            $ipnData = $ipnHandler->toArray();
+            $this->compositeProcessor->process($ipnData);
+        } catch (\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
+        }
     }
 }

--- a/src/Payment/Gateway/Command/AmazonAuthCommand.php
+++ b/src/Payment/Gateway/Command/AmazonAuthCommand.php
@@ -17,7 +17,9 @@ use Magento\Payment\Gateway\Validator\ValidatorInterface;
 use Psr\Log\LoggerInterface;
 use Magento\Framework\Exception\LocalizedException;
 use Magento\Framework\Event\ManagerInterface;
+use Magento\Framework\App\ObjectManager;
 use Amazon\Core\Exception\AmazonWebapiException;
+use Amazon\Core\Logger\ExceptionLogger;
 use Amazon\Payment\Gateway\Config\Config;
 
 /**
@@ -68,6 +70,11 @@ class AmazonAuthCommand implements CommandInterface
      */
     private $config;
 
+    /**
+     * @var ExceptionLogger
+     */
+    private $exceptionLogger;
+
     /**
      * @param BuilderInterface $requestBuilder
      * @param TransferFactoryInterface $transferFactory
@@ -77,6 +84,7 @@ class AmazonAuthCommand implements CommandInterface
      * @param ValidatorInterface $validator
      * @param ErrorMessageMapperInterface|null $errorMessageMapper
      * @param Config $config
+     * @param ExceptionLogger $exceptionLogger;
      */
     public function __construct(
         BuilderInterface $requestBuilder,
@@ -86,7 +94,8 @@ class AmazonAuthCommand implements CommandInterface
         HandlerInterface $handler = null,
         ValidatorInterface $validator = null,
         ErrorMessageMapperInterface $errorMessageMapper = null,
-        Config $config
+        Config $config,
+        ExceptionLogger $exceptionLogger = null
     ) {
         $this->requestBuilder = $requestBuilder;
         $this->transferFactory = $transferFactory;
@@ -96,6 +105,7 @@ class AmazonAuthCommand implements CommandInterface
         $this->logger = $logger;
         $this->errorMessageMapper = $errorMessageMapper;
         $this->config = $config;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
     }
 
     /**
@@ -109,39 +119,44 @@ class AmazonAuthCommand implements CommandInterface
      */
     public function execute(array $commandSubject)
     {
-        $isTimeout = 0;
+        try {
+            $isTimeout = 0;
 
-        $transferO = $this->transferFactory->create(
-            $this->requestBuilder->build($commandSubject)
-        );
-
-        $response = $this->client->placeRequest($transferO);
-        if ($this->validator !== null) {
-            $result = $this->validator->validate(
-                array_merge($commandSubject, ['response' => $response])
+            $transferO = $this->transferFactory->create(
+                $this->requestBuilder->build($commandSubject)
             );
-            if (!$result->isValid()) {
-                // when Amazon Pay is set to receive asynchronous calls, we need to allow timeouts to pass validation and
-                // flag the handler to save the order for later processing.
-                $auth_mode = '';
-                if (isset($response['auth_mode'])) {
-                    $auth_mode = $response['auth_mode'];
+
+            $response = $this->client->placeRequest($transferO);
+            if ($this->validator !== null) {
+                $result = $this->validator->validate(
+                    array_merge($commandSubject, ['response' => $response])
+                );
+                if (!$result->isValid()) {
+                    // when Amazon Pay is set to receive asynchronous calls, we need to allow timeouts to pass validation and
+                    // flag the handler to save the order for later processing.
+                    $auth_mode = '';
+                    if (isset($response['auth_mode'])) {
+                        $auth_mode = $response['auth_mode'];
+                    }
+                    $isTimeout = $this->processErrors($result, $auth_mode);
                 }
-                $isTimeout = $this->processErrors($result, $auth_mode);
             }
-        }
 
-        $response['timeout'] = $isTimeout;
+            $response['timeout'] = $isTimeout;
 
-        if ($isTimeout) {
-            $response['status'] = true;
-        }
+            if ($isTimeout) {
+                $response['status'] = true;
+            }
 
-        if ($this->handler) {
-            $this->handler->handle(
-                $commandSubject,
-                $response
-            );
+            if ($this->handler) {
+                $this->handler->handle(
+                    $commandSubject,
+                    $response
+                );
+            }
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
         }
     }
 
@@ -183,10 +198,6 @@ class AmazonAuthCommand implements CommandInterface
             }
         }
 
-        if ($isDecline) {
-            $messages[] = __("You will be redirected to the cart shortly.");
-        }
-
         if ($isTimeout) {
             return true;
         }

--- a/src/Payment/Gateway/Command/CaptureStrategyCommand.php
+++ b/src/Payment/Gateway/Command/CaptureStrategyCommand.php
@@ -24,7 +24,9 @@ use Magento\Sales\Api\TransactionRepositoryInterface;
 use Magento\Framework\Api\SearchCriteriaBuilder;
 use Magento\Framework\Api\FilterBuilder;
 use Magento\Sales\Api\Data\TransactionInterface;
+use Magento\Framework\App\ObjectManager;
 use Amazon\Core\Helper\Data;
+use Amazon\Core\Logger\ExceptionLogger;
 use Amazon\Payment\Gateway\Data\Order\OrderAdapterFactory;
 
 class CaptureStrategyCommand implements CommandInterface
@@ -66,6 +68,11 @@ class CaptureStrategyCommand implements CommandInterface
      */
     private $coreHelper;
 
+    /**
+     * @var ExceptionLogger
+     */
+    private $exceptionLogger;
+
     /**
      * CaptureStrategyCommand constructor.
      *
@@ -75,6 +82,7 @@ class CaptureStrategyCommand implements CommandInterface
      * @param FilterBuilder $filterBuilder
      * @param Data $coreHelper
      * @param OrderAdapterFactory $orderAdapterFactory
+     * @param ExceptionLogger $exceptionLogger
      */
     public function __construct(
         CommandPoolInterface $commandPool,
@@ -82,7 +90,8 @@ class CaptureStrategyCommand implements CommandInterface
         SearchCriteriaBuilder $searchCriteriaBuilder,
         FilterBuilder $filterBuilder,
         Data $coreHelper,
-        OrderAdapterFactory $orderAdapterFactory
+        OrderAdapterFactory $orderAdapterFactory,
+        ExceptionLogger $exceptionLogger = null
     ) {
         $this->commandPool = $commandPool;
         $this->transactionRepository = $transactionRepository;
@@ -90,6 +99,7 @@ class CaptureStrategyCommand implements CommandInterface
         $this->filterBuilder = $filterBuilder;
         $this->coreHelper = $coreHelper;
         $this->orderAdapterFactory = $orderAdapterFactory;
+        $this->exceptionLogger = $exceptionLogger ?: ObjectManager::getInstance()->get(ExceptionLogger::class);
     }
 
     /**
@@ -97,30 +107,36 @@ class CaptureStrategyCommand implements CommandInterface
      */
     public function execute(array $commandSubject)
     {
-        if (isset($commandSubject['payment'])) {
-            $paymentDO = $commandSubject['payment'];
-            $paymentInfo = $paymentDO->getPayment();
-
-            // The magento order adapter doesn't expose everything we need to send a request to the AP API so we
-            // need to use our own version with the details we need exposed in custom methods.
-            $orderAdapter = $this->orderAdapterFactory->create(
-                ['order' => $paymentInfo->getOrder()]
-            );
-
-            $commandSubject['partial_capture'] = false;
-            $commandSubject['amazon_order_id'] = $orderAdapter->getAmazonOrderID();
-            $commandSubject['multicurrency'] = $orderAdapter->getMulticurrencyDetails($commandSubject['amount']);
-
-            ContextHelper::assertOrderPayment($paymentInfo);
-
-            $command = $this->getCommand($paymentInfo);
-            if ($command) {
-                if ($command == self::PARTIAL_CAPTURE) {
-                    $commandSubject['partial_capture'] = true;
-                    $command = self::SALE;
+        try {
+            throw new \Exception('failed');
+            if (isset($commandSubject['payment'])) {
+                $paymentDO = $commandSubject['payment'];
+                $paymentInfo = $paymentDO->getPayment();
+
+                // The magento order adapter doesn't expose everything we need to send a request to the AP API so we
+                // need to use our own version with the details we need exposed in custom methods.
+                $orderAdapter = $this->orderAdapterFactory->create(
+                    ['order' => $paymentInfo->getOrder()]
+                );
+
+                $commandSubject['partial_capture'] = false;
+                $commandSubject['amazon_order_id'] = $orderAdapter->getAmazonOrderID();
+                $commandSubject['multicurrency'] = $orderAdapter->getMulticurrencyDetails($commandSubject['amount']);
+
+                ContextHelper::assertOrderPayment($paymentInfo);
+
+                $command = $this->getCommand($paymentInfo);
+                if ($command) {
+                    if ($command == self::PARTIAL_CAPTURE) {
+                        $commandSubject['partial_capture'] = true;
+                        $command = self::SALE;
+                    }
+                    $this->commandPool->get($command)->execute($commandSubject);
                 }
-                $this->commandPool->get($command)->execute($commandSubject);
             }
+        } catch(\Exception $e) {
+            $this->exceptionLogger->logException($e);
+            throw $e;
         }
     }
 

--- a/src/Payment/Model/Adapter/AmazonPaymentAdapter.php
+++ b/src/Payment/Model/Adapter/AmazonPaymentAdapter.php
@@ -18,6 +18,7 @@ namespace Amazon\Payment\Model\Adapter;
 
 use Amazon\Core\Client\ClientFactoryInterface;
 use Amazon\Payment\Domain\AmazonSetOrderDetailsResponseFactory;
+use Amazon\Payment\Model\OrderLinkFactory;
 use Magento\Payment\Model\Method\Logger;
 use Amazon\Payment\Domain\AmazonAuthorizationResponseFactory;
 use Amazon\Payment\Domain\AmazonCaptureResponseFactory;
@@ -25,6 +26,9 @@ use Amazon\Payment\Gateway\Helper\SubjectReader;
 use Amazon\Core\Helper\Data;
 use Amazon\Payment\Api\Data\PendingAuthorizationInterfaceFactory;
 use Amazon\Payment\Api\Data\PendingCaptureInterfaceFactory;
+use Magento\Framework\UrlInterface;
+use Magento\Sales\Model\OrderRepository;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * Class AmazonPaymentAdapter
@@ -80,6 +84,21 @@ class AmazonPaymentAdapter
      */
     private $pendingAuthorizationFactory;
 
+    /**
+     * @var UrlInterface
+     */
+    private $urlBuilder;
+
+    /**
+     * @var OrderLinkFactory
+     */
+    private $orderLinkFactory;
+
+    /**
+     * @var OrderRepository
+     */
+    private $orderRepository;
+
     /**
      * AmazonPaymentAdapter constructor.
      * @param ClientFactoryInterface $clientFactory
@@ -91,6 +110,9 @@ class AmazonPaymentAdapter
      * @param SubjectReader $subjectReader
      * @param Data $coreHelper
      * @param Logger $logger
+     * @param UrlInterface $urlBuilder
+     * @param OrderLinkFactory $orderLinkFactory
+     * @param OrderRepository $orderRepository
      */
     public function __construct(
         ClientFactoryInterface $clientFactory,
@@ -101,7 +123,10 @@ class AmazonPaymentAdapter
         PendingAuthorizationInterfaceFactory $pendingAuthorizationFactory,
         SubjectReader $subjectReader,
         Data $coreHelper,
-        Logger $logger
+        Logger $logger,
+        UrlInterface $urlBuilder = null,
+        OrderLinkFactory $orderLinkFactory = null,
+        OrderRepository $orderRepository = null
     ) {
         $this->clientFactory = $clientFactory;
         $this->amazonSetOrderDetailsResponseFactory = $amazonSetOrderDetailsResponseFactory;
@@ -112,6 +137,9 @@ class AmazonPaymentAdapter
         $this->coreHelper = $coreHelper;
         $this->pendingCaptureFactory = $pendingCaptureFactory;
         $this->pendingAuthorizationFactory = $pendingAuthorizationFactory;
+        $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
+        $this->orderLinkFactory = $orderLinkFactory ?: ObjectManager::getInstance()->get(OrderLinkFactory::class);
+        $this->orderRepository = $orderRepository ?: ObjectManager::getInstance()->get(OrderRepository::class);
     }
 
     /**
@@ -158,7 +186,9 @@ class AmazonPaymentAdapter
 
         $response = $this->clientFactory->create($storeId)->confirmOrderReference(
             [
-                'amazon_order_reference_id' => $amazonOrderReferenceId
+                'amazon_order_reference_id' => $amazonOrderReferenceId,
+                'success_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout'),
+                'failure_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout')
             ]
         );
 
@@ -187,6 +217,22 @@ class AmazonPaymentAdapter
         return $response ? $response->getDetails() : $response;
     }
 
+    /**
+     * @param $amazonOrderReferenceId
+     * @return \Magento\Sales\Api\Data\OrderInterface
+     * @throws \Magento\Framework\Exception\InputException
+     * @throws \Magento\Framework\Exception\NoSuchEntityException
+     */
+    private function getOrderByReference($amazonOrderReferenceId)
+    {
+        $orderLink = $this->orderLinkFactory->create()->load($amazonOrderReferenceId, 'amazon_order_reference_id');
+        $orderId = $orderLink->getOrderId();
+        if ($orderId === null) {
+            return null;
+        }
+        return $this->orderRepository->get($orderId);
+    }
+
     /**
      * @param $data
      * @param bool $captureNow
@@ -196,7 +242,12 @@ class AmazonPaymentAdapter
     {
         $response = [];
         $confirmResponse = null;
-        $storeId = $this->subjectReader->getStoreId();
+        $order = $this->getOrderByReference($data['amazon_order_reference_id']);
+        if ($order) {
+            $storeId = $order->getStoreId();
+        } else {
+            $storeId = $this->subjectReader->getStoreId();
+        }
         $authMode = $this->coreHelper->getAuthorizationMode('store', $storeId);
 
         (isset($data['additional_information']) && $data['additional_information'] != 'default')
@@ -229,15 +280,6 @@ class AmazonPaymentAdapter
         $response['constraints'] = [];
         $response['amazon_order_reference_id'] = $data['amazon_order_reference_id'];
 
-        if (!$attempts) {
-            $detailResponse = $this->setOrderReferenceDetails($storeId, $data);
-
-            if (isset($detailResponse['constraints']) && !empty($detailResponse['constraints'])) {
-                $response['constraints'] = $detailResponse['constraints'];
-                return $response;
-            }
-        }
-
         $confirmResponse = $this->confirmOrderReference($storeId, $data['amazon_order_reference_id']);
 
         if ($confirmResponse->response['Status'] == 200) {

--- a/src/Payment/Model/Method/AmazonLoginMethod.php
+++ b/src/Payment/Model/Method/AmazonLoginMethod.php
@@ -60,7 +60,7 @@ class AmazonLoginMethod extends \Magento\Payment\Model\Method\AbstractMethod
     public function isActive($storeId = null)
     {
         return (bool)(int)$this->_scopeConfig->getValue(
-            'payment/amazon_pay/active',
+            AmazonCoreHelper::AMAZON_ACTIVE,
             \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
             $storeId
         ) && (bool)(int)$this->getConfigData('active', $storeId);

--- a/src/Payment/Model/OrderInformationManagement.php
+++ b/src/Payment/Model/OrderInformationManagement.php
@@ -32,6 +32,8 @@ use Magento\Quote\Model\Quote;
 use Magento\Store\Model\ScopeInterface;
 use AmazonPay\ResponseInterface;
 use Psr\Log\LoggerInterface;
+use Magento\Framework\UrlInterface;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
@@ -97,7 +99,8 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         AmazonSetOrderDetailsResponseFactory $amazonSetOrderDetailsResponseFactory,
         QuoteLinkInterfaceFactory $quoteLinkFactory,
         LoggerInterface $logger,
-        ProductMetadata $productMetadata
+        ProductMetadata $productMetadata,
+        UrlInterface $urlBuilder = null
     ) {
         $this->session                              = $session;
         $this->clientFactory                        = $clientFactory;
@@ -107,6 +110,7 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         $this->quoteLinkFactory                     = $quoteLinkFactory;
         $this->logger                               = $logger;
         $this->productMetadata                      = $productMetadata;
+        $this->urlBuilder = $urlBuilder ?: ObjectManager::getInstance()->get(UrlInterface::class);
     }
 
     /**
@@ -188,7 +192,9 @@ class OrderInformationManagement implements OrderInformationManagementInterface
         try {
             $response = $this->clientFactory->create($storeId)->confirmOrderReference(
                 [
-                    'amazon_order_reference_id' => $amazonOrderReferenceId
+                    'amazon_order_reference_id' => $amazonOrderReferenceId,
+                    'success_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout'),
+                    'failure_url' => $this->urlBuilder->getUrl('amazonpayments/payment/completecheckout')
                 ]
             );
 

--- /dev/null
+++ b/src/Payment/Plugin/ConfirmOrderReference.php
@@ -0,0 +1,104 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+namespace Amazon\Payment\Plugin;
+
+use Amazon\Core\Exception\AmazonWebapiException;
+use Amazon\Payment\Api\Data\QuoteLinkInterface;
+use Magento\Checkout\Model\Session;
+use Magento\Checkout\Api\PaymentInformationManagementInterface;
+use Magento\Quote\Api\PaymentMethodManagementInterface;
+use Amazon\Payment\Model\Adapter\AmazonPaymentAdapter;
+use Amazon\Payment\Model\OrderInformationManagement;
+use Magento\Quote\Api\Data\PaymentInterface;
+use Magento\Quote\Api\Data\AddressInterface;
+use Magento\Framework\Exception\LocalizedException;
+use Amazon\Payment\Gateway\Config\Config as GatewayConfig;
+use Magento\Quote\Api\CartRepositoryInterface;
+
+
+/**
+ * Class ConfirmOrderReference
+ *
+ * Confirm the OrderReference when payment details are saved
+ */
+class ConfirmOrderReference
+{
+    /**
+     * @var Session
+     */
+    private $checkoutSession;
+
+    /**
+     * @var OrderInformationManagement
+     */
+    private $orderInformationManagement;
+
+    /**
+     * @var CartRepositoryInterface
+     */
+    private $quoteRepository;
+
+    /**
+     * ConfirmOrderReference constructor.
+     * @param Session $checkoutSession
+     * @param OrderInformationManagement $orderInformationManagement
+     * @param CartRepositoryInterface $quoteRepository
+     */
+    public function __construct(
+        Session $checkoutSession,
+        OrderInformationManagement $orderInformationManagement,
+        CartRepositoryInterface $quoteRepository
+    ) {
+        $this->checkoutSession = $checkoutSession;
+        $this->orderInformationManagement = $orderInformationManagement;
+        $this->quoteRepository = $quoteRepository;
+    }
+
+    /**
+     * @param PaymentMethodManagementInterface $subject
+     * @param $result
+     * @param $cartId
+     * @param PaymentInterface $paymentMethod
+     * @param AddressInterface|null $billingAddress
+     * @return mixed
+     * @throws \Magento\Framework\Exception\LocalizedException
+     */
+    public function afterSet(
+        PaymentMethodManagementInterface $subject,
+        $result,
+        $cartId,
+        PaymentInterface $paymentMethod
+    ) {
+        if($paymentMethod->getMethod() == GatewayConfig::CODE) {
+            $quote = $this->quoteRepository->get($cartId);
+            $quoteExtensionAttributes = $quote->getExtensionAttributes();
+            if ($quoteExtensionAttributes) {
+                $amazonOrderReferenceId = $quoteExtensionAttributes
+                    ->getAmazonOrderReferenceId()
+                    ->getAmazonOrderReferenceId();
+
+                $this->orderInformationManagement->saveOrderInformation($amazonOrderReferenceId);
+                $this->orderInformationManagement->confirmOrderReference(
+                    $amazonOrderReferenceId,
+                    $quote->getStoreId()
+                );
+            }
+        }
+
+        return $result;
+    }
+}

--- a/src/Payment/Plugin/ShippingInformationManagement.php
+++ b/src/Payment/Plugin/ShippingInformationManagement.php
@@ -80,7 +80,9 @@ class ShippingInformationManagement
             return $return;
         }
 
-        $amazonOrderReferenceId = $quote->getExtensionAttributes()->getAmazonOrderReferenceId();
+        $amazonOrderReferenceId = $quote->getExtensionAttributes()
+            ->getAmazonOrderReferenceId()
+            ->getAmazonOrderReferenceId();
 
         if ($amazonOrderReferenceId) {
             $this->orderInformationManagement->saveOrderInformation(
@@ -92,6 +94,16 @@ class ShippingInformationManagement
             );
         }
 
+        /*
+         * Magento\Quote\Model\Quote::setShippingAddress merges into the existing shipping address,
+         *  rather than replacing it.  Because not all addresses have a region_id, make sure that
+         *  the region_id is explicitly emptied, to prevent the old one being used.
+         */
+        $shippingAddress = $shippingInformation->getShippingAddress();
+        if(!$shippingAddress->hasData('region_id')) {
+            $shippingAddress->setRegionId("");
+        }
+
         return $return;
     }
 }

--- a/src/Payment/Test/Mftf/Test/AmazonCheckoutDeclineTest.xml
+++ b/src/Payment/Test/Mftf/Test/AmazonCheckoutDeclineTest.xml
@@ -15,6 +15,9 @@
             <description value="Test CC decline message and then success page elements for placed order with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
@@ -36,6 +39,9 @@
             <description value="Test CC decline message and then success page elements for placed order with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
@@ -63,6 +69,9 @@
             <description value="Test CC decline message, logout, and redirect to cart with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
@@ -90,6 +99,9 @@
             <description value="Test CC timeout message with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
@@ -116,6 +128,9 @@
             <description value="Test CC timeout message with Amazon Pay"/>
             <severity value="CRITICAL"/>
             <group value="amazon_decline"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
         <!--Begin checkout-->
         <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
@@ -126,4 +141,64 @@
         <!--Transaction declined error message-->
         <waitForText userInput="Transaction has been declined" selector="{{AdminMessagesSection.errorMessage}}" stepKey="waitForText"/>
     </test>
+    <test name="AmazonCheckoutSCAAbandoned" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Amazon SCA Abandoned"/>
+            <title value="(SCA) Amazon SCA Abandoned"/>
+            <description value="Perform checkout from cart page and ensure SCA Abandoned page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with SCA Abandoned CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="4440" />
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="The SCA challenge was not completed successfully." selector="#checkoutError" stepKey="waitForText"/>
+    </test>
+    <test name="AmazonCheckoutSCAFailure" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Amazon SCA Failed"/>
+            <title value="(SCA) Amazon SCA Failed"/>
+            <description value="Perform checkout from cart page and ensure SCA Failure page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
+        <!--Begin checkout-->
+        <actionGroup ref="AmazonCheckoutBeginActionGroup" stepKey="AmazonCheckoutBeginActionGroup" />
+        <!--Place order with SCA Failure CC-->
+        <actionGroup ref="AmazonCheckoutCcActionGroup" stepKey="AmazonCheckoutCcActionGroupBad">
+            <argument name="cc" value="8320" />
+        </actionGroup>
+        <!--Transaction declined error message-->
+        <waitForText userInput="Amazon Pay was unable to authenticate the payment instrument." selector="#checkoutError" stepKey="waitForText"/>
+    </test>
 </tests>

--- a/src/Payment/Test/Mftf/Test/AmazonCheckoutSuccessTest.xml
+++ b/src/Payment/Test/Mftf/Test/AmazonCheckoutSuccessTest.xml
@@ -16,6 +16,9 @@
             <description value="Creates and loads simple product and adds it to cart using Amazon Pay button on product detail page."/>
             <severity value="BLOCKER"/>
             <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
 
         <before>
@@ -46,6 +49,9 @@
             <description value="Adds product to cart."/>
             <severity value="BLOCKER"/>
             <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
 
         <before>
@@ -74,6 +80,9 @@
             <description value="Perform checkout from product details page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
 
         <!--Place order-->
@@ -87,6 +96,9 @@
             <description value="Perform checkout from cart page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
 
         <!--Go to Cart-->
@@ -109,6 +121,9 @@
             <description value="Perform checkout from minicart and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
 
         <!--Open minicart-->
@@ -131,6 +146,9 @@
             <description value="Perform checkout from checkout page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
 
         <!--Go to Checkout-->
@@ -153,6 +171,9 @@
             <description value="Perform checkout after logging in from customer account page and ensure Success page."/>
             <severity value="CRITICAL"/>
             <group value="amazon_checkout"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
         </annotations>
 
         <!--Go to Customer page-->
@@ -162,6 +183,31 @@
         <click selector="{{AmazonCheckoutSection.loginButton}}" stepKey="clickAmazonCartButton"/>
         <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
 
+        <!--Place order-->
+        <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
+    </test>
+    <test name="AmazonCheckoutSCASuccess" extends="AmazonCheckoutAddProduct">
+        <annotations>
+            <features value="Amazon Pay"/>
+            <stories value="(SCA) Success page elements are presented for placed order with Amazon Pay"/>
+            <title value="(SCA) Amazon Pay Checkout from Cart"/>
+            <description value="Perform checkout from cart page and ensure Success page."/>
+            <severity value="CRITICAL"/>
+            <group value="amazon_sca"/>
+            <skip>
+                <issueId>AmazonPayCredentialSupport</issueId>
+            </skip>
+        </annotations>
+
+        <!--Go to Cart-->
+        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="cartOpenCart" />
+
+        <waitForAjaxLoad stepKey="waitForAjaxLoad"/>
+
+        <!--Login (popup)-->
+        <click selector="{{AmazonCheckoutSection.cartPayButton}}" stepKey="clickAmazonCartButton"/>
+        <actionGroup ref="AmazonLoginPopupActionGroup" stepKey="AmazonLoginPopupActionGroup" />
+
         <!--Place order-->
         <actionGroup ref="AmazonCheckoutSubmitActionGroup" stepKey="AmazonCheckoutSubmitActionGroup" />
     </test>

--- a/src/Payment/Test/Unit/Gateway/Command/CaptureStrategyCommandTest.php
+++ b/src/Payment/Test/Unit/Gateway/Command/CaptureStrategyCommandTest.php
@@ -17,6 +17,7 @@ namespace Amazon\Payment\Test\Unit\Gateway\Command;
 
 use Amazon\Payment\Gateway\Command\CaptureStrategyCommand;
 use Amazon\Core\Helper\Data;
+use Amazon\Payment\Gateway\Data\Order\OrderAdapterFactory;
 use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
 use Magento\Framework\Api\SearchCriteriaBuilder;
 use Magento\Framework\Api\FilterBuilder;
@@ -77,6 +78,11 @@ class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
      */
     private $coreHelper;
 
+    /**
+     * @var OrderAdapterFactory|MockObject
+     */
+    private $orderAdapterFactory;
+
     /**
      * Sets up base classes needed to mock the command strategy class
      */
@@ -91,6 +97,7 @@ class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
         $this->initTransactionRepositoryMock();
         $this->initFilterBuilderMock();
         $this->initSearchCriteriaBuilderMock();
+        $this->initOrderAdapterFactoryMock();
 
         $this->coreHelper = $this->getMockBuilder(\Amazon\Core\Helper\Data::class)
             ->disableOriginalConstructor()
@@ -101,7 +108,8 @@ class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
             $this->transactionRepository,
             $this->searchCriteriaBuilder,
             $this->filterBuilder,
-            $this->coreHelper
+            $this->coreHelper,
+            $this->orderAdapterFactory
         );
     }
 
@@ -264,4 +272,26 @@ class CaptureStrategyCommandTest extends \PHPUnit\Framework\TestCase
             ->setMethods(['getList', 'getTotalCount', 'delete', 'get', 'save', 'create', '__wakeup'])
             ->getMock();
     }
+
+    /**
+     * Create mock for Order Adapter Factory
+     */
+    public function initOrderAdapterFactoryMock()
+    {
+        $this->orderAdapterFactory = $this->getMockBuilder(OrderAdapterFactory::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['create'])
+            ->getMock();
+
+        $orderMock = $this->getMockBuilder(OrderAdapterInterface::class)
+            ->disableOriginalConstructor()
+            ->setMethods(['getAmazonOrderID'])
+            ->getMock();
+
+        $orderMock->method('getAmazonOrderID')
+            ->willReturn('123456');
+
+        $this->orderAdapterFactory->method('create')
+            ->willReturn($orderMock);
+    }
 }

--- a/src/Payment/composer.json
+++ b/src/Payment/composer.json
@@ -2,25 +2,26 @@
   "name": "amzn/amazon-pay-module",
   "description": "Amazon Pay module",
   "type": "magento2-module",
-  "version": "3.1.5",
+  "version": "3.2.11",
   "license": [
     "Apache-2.0"
   ],
   "require": {
     "php": "~7.1.3||~7.2.0",
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.1.5",
-    "amzn/login-with-amazon-module": "^3.1.5",
-    "magento/module-customer": "*",
-    "magento/module-eav": "*",
-    "magento/module-sales": "*",
-    "magento/module-quote": "*",
-    "magento/module-payment": "*",
-    "magento/module-backend": "*",
-    "magento/module-store": "*",
-    "magento/module-checkout": "*",
-    "magento/module-catalog": "*",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^3.2.11",
+    "amzn/login-with-amazon-module": "^3.2.11",
+    "magento/framework": "^102",
+    "magento/module-customer": "^102",
+    "magento/module-eav": "^102",
+    "magento/module-sales": "^102",
+    "magento/module-quote": "^101.1",
+    "magento/module-payment": "^100.3",
+    "magento/module-backend": "^101",
+    "magento/module-store": "^101",
+    "magento/module-checkout": "^100.3",
+    "magento/module-catalog": "^103",
     "magento/module-paypal": "*",
-    "magento/module-directory": "*"
+    "magento/module-directory": "^100.3"
   },
   "suggest": {
     "magento/module-customer": "*",

--- a/src/Payment/etc/di.xml
+++ b/src/Payment/etc/di.xml
@@ -242,6 +242,9 @@
     <type name="Amazon\Payment\Model\Method\AmazonLoginMethod">
         <plugin name="disable_amazon_payment_method" type="Amazon\Payment\Plugin\DisableAmazonPaymentMethod" sortOrder="10" disabled="false"/>
     </type>
+    <type name="Magento\Quote\Model\PaymentMethodManagement">
+        <plugin name="confirm_order_reference_on_payment_details_save" type="Amazon\Payment\Plugin\ConfirmOrderReference" sortOrder="10" disabled="false"/>
+    </type>
 
     <type name="Amazon\Payment\Cron\ProcessAmazonRefunds">
         <arguments>
@@ -281,6 +284,11 @@
             <argument name="logger" xsi:type="object">Amazon\Core\Logger\IpnLogger</argument>
         </arguments>
     </type>
+    <type name="Amazon\Core\Logger\ExceptionLogger">
+        <arguments>
+            <argument name="logger" xsi:type="object">Amazon\Core\Logger\Logger</argument>
+        </arguments>
+    </type>
     <type name="Magento\Framework\Webapi\ErrorProcessor">
         <plugin name="amazon_payment_webapi_error_processor" type="Amazon\Payment\Plugin\WebapiErrorProcessor" sortOrder="1"/>
     </type>

--- a/src/Payment/etc/module.xml
+++ b/src/Payment/etc/module.xml
@@ -16,7 +16,7 @@
  */
 -->
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Payment" setup_version="3.1.5" >
+    <module name="Amazon_Payment" setup_version="3.2.11" >
         <sequence>
             <module name="Amazon_Core"/>
             <module name="Amazon_Login"/>

--- a/src/Payment/view/frontend/requirejs-config.js
+++ b/src/Payment/view/frontend/requirejs-config.js
@@ -19,7 +19,6 @@ var config = {
             amazonWidgetsLoader: 'Amazon_Payment/js/amazon-widgets-loader',
             amazonButton: 'Amazon_Payment/js/amazon-button',
             amazonProductAdd: 'Amazon_Payment/js/amazon-product-add',
-            bluebird: 'Amazon_Payment/js/lib/bluebird.min',
             amazonPaymentConfig: 'Amazon_Payment/js/model/amazonPaymentConfig',
             sjcl: 'Amazon_Payment/js/lib/sjcl.min'
         }

--- a/src/Payment/view/frontend/web/js/action/place-order.js
+++ b/src/Payment/view/frontend/web/js/action/place-order.js
@@ -22,19 +22,20 @@ define(
         'Magento_Checkout/js/model/error-processor',
         'Magento_Customer/js/model/customer',
         'Magento_Checkout/js/model/full-screen-loader',
-        'Amazon_Payment/js/model/storage'
+        'Amazon_Payment/js/model/storage',
+        'Amazon_Payment/js/model/amazonPaymentConfig'
     ],
-    function (quote, urlBuilder, storage, url, errorProcessor, customer, fullScreenLoader, amazonStorage) {
+    function (quote, urlBuilder, storage, url, errorProcessor, customer, fullScreenLoader, amazonStorage, amazonPaymentConfig) {
         'use strict';
 
         return function (paymentData, redirectOnSuccess) {
-            var serviceUrl, payload, intervalId;
+            var serviceUrl, payload;
 
             redirectOnSuccess = redirectOnSuccess !== false;
 
             /** Checkout for guest and registered customer. */
             if (!customer.isLoggedIn()) {
-                serviceUrl = urlBuilder.createUrl('/guest-carts/:quoteId/payment-information', {
+                serviceUrl = urlBuilder.createUrl('/guest-carts/:quoteId/set-payment-information', {
                     quoteId: quote.getQuoteId()
                 });
                 payload = {
@@ -44,7 +45,7 @@ define(
                     billingAddress: quote.billingAddress()
                 };
             } else {
-                serviceUrl = urlBuilder.createUrl('/carts/mine/payment-information', {});
+                serviceUrl = urlBuilder.createUrl('/carts/mine/set-payment-information', {});
                 payload = {
                     cartId: quote.getQuoteId(),
                     paymentMethod: paymentData,
@@ -53,30 +54,44 @@ define(
             }
 
             fullScreenLoader.startLoader();
-
-            return storage.post(
-                serviceUrl,
-                JSON.stringify(payload)
-            ).done(
-                function () {
-                    if (redirectOnSuccess) {
-                        window.location.replace(url.build('checkout/onepage/success/'));
+            if(['de', 'uk'].indexOf(amazonPaymentConfig.getValue('region')) !== -1) {
+                console.log('SCA enabled for region: ' + amazonPaymentConfig.getValue('region'));
+                return OffAmazonPayments.initConfirmationFlow(amazonPaymentConfig.getValue('merchantId'), amazonStorage.getOrderReference(), function(confirmationFlow) {
+                    return storage.post(
+                        serviceUrl,
+                        JSON.stringify(payload)
+                    ).done(
+                        function () {
+                            confirmationFlow.success();
+                        }
+                    ).fail(
+                        function (response) {
+                            confirmationFlow.error();
+                            errorProcessor.process(response);
+                            amazonStorage.amazonDeclineCode(response.responseJSON.code);
+                            fullScreenLoader.stopLoader(true);
+                        }
+                    );
+                });
+            } else {
+                console.log('SCA disabled for region: ' + amazonPaymentConfig.getValue('region'));
+                return storage.post(
+                    serviceUrl,
+                    JSON.stringify(payload)
+                ).done(
+                    function () {
+                        if(redirectOnSuccess) {
+                            window.location.replace(url.build('amazonpayments/payment/completecheckout/?AuthenticationStatus=Success'));
+                        }
                     }
-                }
-            ).fail(
-                function (response) {
-                    errorProcessor.process(response);
-                    amazonStorage.amazonDeclineCode(response.responseJSON.code);
-                    fullScreenLoader.stopLoader(true);
-                    if (response.responseJSON.code === 4273) {
-                        intervalId = setInterval(function () {
-                            clearInterval(intervalId);
-                            window.location.replace(url.build('checkout/cart/'));
-                        }, 5000);
-
+                ).fail(
+                    function (response) {
+                        errorProcessor.process(response);
+                        amazonStorage.amazonDeclineCode(response.responseJSON.code);
+                        fullScreenLoader.stopLoader(true);
                     }
-                }
-            );
+                );
+            }
         };
     }
 );

--- a/src/Payment/view/frontend/web/js/amazon-button.js
+++ b/src/Payment/view/frontend/web/js/amazon-button.js
@@ -18,11 +18,13 @@ define([
     'Magento_Customer/js/section-config',
     'Amazon_Payment/js/model/amazonPaymentConfig',
     'amazonCsrf',
+    'Magento_Checkout/js/model/full-screen-loader',
     'modernizr/modernizr',
     'amazonCore',
     'jquery/ui',
-    'uiRegistry'
-], function ($, customerData, sectionConfig, amazonPaymentConfig, amazonCsrf) {
+    'uiRegistry',
+    'mage/cookies'
+], function ($, customerData, sectionConfig, amazonPaymentConfig, amazonCsrf, fullScreenLoader) {
     'use strict';
     var _this;
 
@@ -96,6 +98,7 @@ define([
                 if (sections) {
                     customerData.invalidate(sections);
                 }
+                $.mage.cookies.set('amazon_Login_accessToken', event.access_token);
                 window.location = _this.options.redirectUrl + '?access_token=' + event.access_token;
                 // jscs:enable requireCamelCaseOrUpperCaseIdentifiers
             },
@@ -150,6 +153,7 @@ define([
                      * Authorization callback
                      */
                     authorization: function () {
+                        fullScreenLoader.startLoader();
                         //eslint-disable-next-line no-undef
                         amazon.Login.authorize(_this._getLoginOptions(), _this._popupCallback());
                     }

--- a/src/Payment/view/frontend/web/js/amazon-core.js
+++ b/src/Payment/view/frontend/web/js/amazon-core.js
@@ -19,13 +19,12 @@ define([
     'mage/url',
     'amazonPaymentConfig',
     'amazonWidgetsLoader',
-    'bluebird',
-    'jquery/jquery-storageapi'
+    'jquery/jquery-storageapi',
+    'mage/cookies'
 ], function ($, ko, url, amazonPaymentConfig) {
     'use strict';
 
-    var clientId = amazonPaymentConfig.getValue('clientId'),
-        amazonDefined = ko.observable(false),
+    var amazonDefined = ko.observable(false),
         amazonLoginError = ko.observable(false),
         accessToken = ko.observable(null),
         // Match region config to amazon.Login.Region
@@ -33,23 +32,22 @@ define([
         sandboxMode,
         region;
 
-    if (typeof amazon === 'undefined') {
-        /**
-         * Amazon login ready callback
-         */
-        window.onAmazonLoginReady = function () {
-            setClientId(clientId);  //eslint-disable-line no-use-before-define
-            doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
+    accessToken($.mage.cookies.get('amazon_Login_accessToken'));
 
-            sandboxMode = amazonPaymentConfig.getValue('isSandboxEnabled', false);
-            amazon.Login.setSandboxMode(sandboxMode); //eslint-disable-line no-undef
+    var initAmazonLogin = function () {
+        amazon.Login.setClientId(amazonPaymentConfig.getValue('clientId')); //eslint-disable-line no-undef
+        amazon.Login.setSandboxMode(amazonPaymentConfig.getValue('isSandboxEnabled', false)); //eslint-disable-line no-undef
+        amazon.Login.setRegion(regions[amazonPaymentConfig.getValue('region')]); //eslint-disable-line no-undef
+        amazon.Login.setUseCookie(true); //eslint-disable-line no-undef
 
-            region = regions[amazonPaymentConfig.getValue('region')];
-            amazon.Login.setRegion(region); //eslint-disable-line no-undef
-        };
-    } else {
-        setClientId(clientId);  //eslint-disable-line no-use-before-define
         doLogoutOnFlagCookie(); //eslint-disable-line no-use-before-define
+        amazonDefined(true);
+    };
+
+    if (typeof amazon === 'undefined') {
+        window.onAmazonLoginReady = initAmazonLogin;
+    } else {
+        initAmazonLogin();
     }
 
     // Widgets.js ready callback
@@ -62,14 +60,13 @@ define([
      * @param {String} cid
      */
     function setClientId(cid) {
-        amazon.Login.setClientId(cid); //eslint-disable-line no-undef
-        amazonDefined(true);
     }
 
     /**
      * Log user out of amazon
      */
     function amazonLogout() {
+        $.mage.cookies.clear('amazon_Login_accessToken');
         $.ajax({
             url: url.build('amazon/logout'),
             context: this
@@ -109,39 +106,30 @@ define([
         amazonLoginError(true);
     }
 
-    return {
-        /**
-         * Verify a user is logged into amazon
-         */
-        verifyAmazonLoggedIn: function () {
-            var defer  = $.Deferred(),
-                loginOptions = {
-                    scope: amazonPaymentConfig.getValue('loginScope'),
-                    popup: true,
-                    interactive: 'never'
-                };
-
-            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
-            amazon.Login.authorize(loginOptions, function (response) { //eslint-disable-line no-undef
-                if (response.error) {
-                    defer.reject(response.error);
-                } else {
-                    accessToken(response.access_token);
-                    defer.resolve(!response.error);
-                }
-            });
-            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers
-
-            return defer.promise();
-        },
+    function handleWidgetError(error) {
+        console.log('OffAmazonPayments.Widgets.AddressBook', error.getErrorCode(), error.getErrorMessage());
+        switch (error.getErrorCode()) {
+            case 'BuyerSessionExpired':
+                messageList.addErrorMessage({message: $.mage.__('Your Amazon session has expired.  Please sign in again by clicking the Amazon Pay Button.')});
+                amazonStorage.amazonlogOut();
+                break;
+            case 'ITP':
+                // ITP errors are how handled within the widget code
+                break;
+            default:
+                messageList.addErrorMessage({message: $.mage.__(error.getErrorMessage())});
+        }
+    }
 
+    return {
         /**
          * Log user out of Amazon
          */
         AmazonLogout: amazonLogout,
         amazonDefined: amazonDefined,
         accessToken: accessToken,
-        amazonLoginError: amazonLoginError
+        amazonLoginError: amazonLoginError,
+        handleWidgetError: handleWidgetError
     };
 
 });

--- a/src/Payment/view/frontend/web/js/lib/bluebird.min.js
+++ /dev/null
@@ -1,32 +0,0 @@
-// jscs:disable
-/* @preserve
- * The MIT License (MIT)
- *
- * Copyright (c) 2013-2015 Petka Antonov
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- *
- */
-/**
- * bluebird build version 3.3.4
- * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
- */
-!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;"undefined"!=typeof window?e=window:"undefined"!=typeof global?e=global:"undefined"!=typeof self&&(e=self),e.Promise=t()}}(function(){var t,e,n;return function r(t,e,n){function i(s,a){if(!e[s]){if(!t[s]){var c="function"==typeof _dereq_&&_dereq_;if(!a&&c)return c(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var u=e[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return i(n?n:e)},u,u.exports,r,t,e,n)}return e[s].exports}for(var o="function"==typeof _dereq_&&_dereq_,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(t,e,n){"use strict";e.exports=function(t){function e(t){var e=new n(t),r=e.promise();return e.setHowMany(1),e.setUnwrap(),e.init(),r}var n=t._SomePromiseArray;t.any=function(t){return e(t)},t.prototype.any=function(){return e(this)}}},{}],2:[function(t,e,n){"use strict";function r(){this._isTickUsed=!1,this._lateQueue=new u(16),this._normalQueue=new u(16),this._haveDrainedQueues=!1,this._trampolineEnabled=!0;var t=this;this.drainQueues=function(){t._drainQueues()},this._schedule=l}function i(t,e,n){this._lateQueue.push(t,e,n),this._queueTick()}function o(t,e,n){this._normalQueue.push(t,e,n),this._queueTick()}function s(t){this._normalQueue._pushOne(t),this._queueTick()}var a;try{throw new Error}catch(c){a=c}var l=t("./schedule"),u=t("./queue"),p=t("./util");r.prototype.enableTrampoline=function(){this._trampolineEnabled=!0},r.prototype.disableTrampolineIfNecessary=function(){p.hasDevTools&&(this._trampolineEnabled=!1)},r.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},r.prototype.fatalError=function(t,e){e?(process.stderr.write("Fatal "+(t instanceof Error?t.stack:t)+"\n"),process.exit(2)):this.throwLater(t)},r.prototype.throwLater=function(t,e){if(1===arguments.length&&(e=t,t=function(){throw e}),"undefined"!=typeof setTimeout)setTimeout(function(){t(e)},0);else try{this._schedule(function(){t(e)})}catch(n){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},p.hasDevTools?(r.prototype.invokeLater=function(t,e,n){this._trampolineEnabled?i.call(this,t,e,n):this._schedule(function(){setTimeout(function(){t.call(e,n)},100)})},r.prototype.invoke=function(t,e,n){this._trampolineEnabled?o.call(this,t,e,n):this._schedule(function(){t.call(e,n)})},r.prototype.settlePromises=function(t){this._trampolineEnabled?s.call(this,t):this._schedule(function(){t._settlePromises()})}):(r.prototype.invokeLater=i,r.prototype.invoke=o,r.prototype.settlePromises=s),r.prototype.invokeFirst=function(t,e,n){this._normalQueue.unshift(t,e,n),this._queueTick()},r.prototype._drainQueue=function(t){for(;t.length()>0;){var e=t.shift();if("function"==typeof e){var n=t.shift(),r=t.shift();e.call(n,r)}else e._settlePromises()}},r.prototype._drainQueues=function(){this._drainQueue(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,this._drainQueue(this._lateQueue)},r.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},r.prototype._reset=function(){this._isTickUsed=!1},e.exports=r,e.exports.firstLineError=a},{"./queue":26,"./schedule":29,"./util":36}],3:[function(t,e,n){"use strict";e.exports=function(t,e,n,r){var i=!1,o=function(t,e){this._reject(e)},s=function(t,e){e.promiseRejectionQueued=!0,e.bindingPromise._then(o,o,null,this,t)},a=function(t,e){0===(50397184&this._bitField)&&this._resolveCallback(e.target)},c=function(t,e){e.promiseRejectionQueued||this._reject(t)};t.prototype.bind=function(o){i||(i=!0,t.prototype._propagateFrom=r.propagateFromFunction(),t.prototype._boundValue=r.boundValueFunction());var l=n(o),u=new t(e);u._propagateFrom(this,1);var p=this._target();if(u._setBoundTo(l),l instanceof t){var h={promiseRejectionQueued:!1,promise:u,target:p,bindingPromise:l};p._then(e,s,void 0,u,h),l._then(a,c,void 0,u,h),u._setOnCancel(l)}else u._resolveCallback(p);return u},t.prototype._setBoundTo=function(t){void 0!==t?(this._bitField=2097152|this._bitField,this._boundTo=t):this._bitField=-2097153&this._bitField},t.prototype._isBound=function(){return 2097152===(2097152&this._bitField)},t.bind=function(e,n){return t.resolve(n).bind(e)}}},{}],4:[function(t,e,n){"use strict";function r(){try{Promise===o&&(Promise=i)}catch(t){}return o}var i;"undefined"!=typeof Promise&&(i=Promise);var o=t("./promise")();o.noConflict=r,e.exports=o},{"./promise":22}],5:[function(t,e,n){"use strict";var r=Object.create;if(r){var i=r(null),o=r(null);i[" size"]=o[" size"]=0}e.exports=function(e){function n(t,n){var r;if(null!=t&&(r=t[n]),"function"!=typeof r){var i="Object "+a.classString(t)+" has no method '"+a.toString(n)+"'";throw new e.TypeError(i)}return r}function r(t){var e=this.pop(),r=n(t,e);return r.apply(t,this)}function i(t){return t[this]}function o(t){var e=+this;return 0>e&&(e=Math.max(0,e+t.length)),t[e]}var s,a=t("./util"),c=a.canEvaluate;a.isIdentifier;e.prototype.call=function(t){var e=[].slice.call(arguments,1);return e.push(t),this._then(r,void 0,void 0,e,void 0)},e.prototype.get=function(t){var e,n="number"==typeof t;if(n)e=o;else if(c){var r=s(t);e=null!==r?r:i}else e=i;return this._then(e,void 0,void 0,t,void 0)}}},{"./util":36}],6:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util"),s=o.tryCatch,a=o.errorObj,c=e._async;e.prototype["break"]=e.prototype.cancel=function(){if(!i.cancellation())return this._warn("cancellation is disabled");for(var t=this,e=t;t.isCancellable();){if(!t._cancelBy(e)){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}var n=t._cancellationParent;if(null==n||!n.isCancellable()){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}t._isFollowing()&&t._followee().cancel(),e=t,t=n}},e.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},e.prototype._enoughBranchesHaveCancelled=function(){return void 0===this._branchesRemainingToCancel||this._branchesRemainingToCancel<=0},e.prototype._cancelBy=function(t){return t===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),this._enoughBranchesHaveCancelled()?(this._invokeOnCancel(),!0):!1)},e.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},e.prototype._cancel=function(){this.isCancellable()&&(this._setCancelled(),c.invoke(this._cancelPromises,this,void 0))},e.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},e.prototype._unsetOnCancel=function(){this._onCancelField=void 0},e.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},e.prototype._doInvokeOnCancel=function(t,e){if(o.isArray(t))for(var n=0;n<t.length;++n)this._doInvokeOnCancel(t[n],e);else if(void 0!==t)if("function"==typeof t){if(!e){var r=s(t).call(this._boundValue());r===a&&(this._attachExtraTrace(r.e),c.throwLater(r.e))}}else t._resultCancelled(this)},e.prototype._invokeOnCancel=function(){var t=this._onCancel();this._unsetOnCancel(),c.invoke(this._doInvokeOnCancel,this,t)},e.prototype._invokeInternalOnCancel=function(){this.isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},e.prototype._resultCancelled=function(){this.cancel()}}},{"./util":36}],7:[function(t,e,n){"use strict";e.exports=function(e){function n(t,n,a){return function(c){var l=a._boundValue();t:for(var u=0;u<t.length;++u){var p=t[u];if(p===Error||null!=p&&p.prototype instanceof Error){if(c instanceof p)return o(n).call(l,c)}else if("function"==typeof p){var h=o(p).call(l,c);if(h===s)return h;if(h)return o(n).call(l,c)}else if(r.isObject(c)){for(var f=i(p),_=0;_<f.length;++_){var d=f[_];if(p[d]!=c[d])continue t}return o(n).call(l,c)}}return e}}var r=t("./util"),i=t("./es5").keys,o=r.tryCatch,s=r.errorObj;return n}},{"./es5":13,"./util":36}],8:[function(t,e,n){"use strict";e.exports=function(t){function e(){this._trace=new e.CapturedTrace(r())}function n(){return i?new e:void 0}function r(){var t=o.length-1;return t>=0?o[t]:void 0}var i=!1,o=[];return t.prototype._promiseCreated=function(){},t.prototype._pushContext=function(){},t.prototype._popContext=function(){return null},t._peekContext=t.prototype._peekContext=function(){},e.prototype._pushContext=function(){void 0!==this._trace&&(this._trace._promiseCreated=null,o.push(this._trace))},e.prototype._popContext=function(){if(void 0!==this._trace){var t=o.pop(),e=t._promiseCreated;return t._promiseCreated=null,e}return null},e.CapturedTrace=null,e.create=n,e.deactivateLongStackTraces=function(){},e.activateLongStackTraces=function(){var n=t.prototype._pushContext,o=t.prototype._popContext,s=t._peekContext,a=t.prototype._peekContext,c=t.prototype._promiseCreated;e.deactivateLongStackTraces=function(){t.prototype._pushContext=n,t.prototype._popContext=o,t._peekContext=s,t.prototype._peekContext=a,t.prototype._promiseCreated=c,i=!1},i=!0,t.prototype._pushContext=e.prototype._pushContext,t.prototype._popContext=e.prototype._popContext,t._peekContext=t.prototype._peekContext=r,t.prototype._promiseCreated=function(){var t=this._peekContext();t&&null==t._promiseCreated&&(t._promiseCreated=this)}},e}},{}],9:[function(t,e,n){"use strict";e.exports=function(e,n){function r(t,e){return{promise:e}}function i(){return!1}function o(t,e,n){var r=this;try{t(e,n,function(t){if("function"!=typeof t)throw new TypeError("onCancel must be a function, got: "+H.toString(t));r._attachCancellationCallback(t)})}catch(i){return i}}function s(t){if(!this.isCancellable())return this;var e=this._onCancel();void 0!==e?H.isArray(e)?e.push(t):this._setOnCancel([e,t]):this._setOnCancel(t)}function a(){return this._onCancelField}function c(t){this._onCancelField=t}function l(){this._cancellationParent=void 0,this._onCancelField=void 0}function u(t,e){if(0!==(1&e)){this._cancellationParent=t;var n=t._branchesRemainingToCancel;void 0===n&&(n=0),t._branchesRemainingToCancel=n+1}0!==(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)}function p(t,e){0!==(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)}function h(){var t=this._boundTo;return void 0!==t&&t instanceof e?t.isFulfilled()?t.value():void 0:t}function f(){this._trace=new O(this._peekContext())}function _(t,e){if(N(t)){var n=this._trace;if(void 0!==n&&e&&(n=n._parent),void 0!==n)n.attachExtraTrace(t);else if(!t.__stackCleaned__){var r=j(t);H.notEnumerableProp(t,"stack",r.message+"\n"+r.stack.join("\n")),H.notEnumerableProp(t,"__stackCleaned__",!0)}}}function d(t,e,n,r,i){if(void 0===t&&null!==e&&z){if(void 0!==i&&i._returnedNonUndefined())return;var o=r._bitField;if(0===(65535&o))return;n&&(n+=" ");var s="a promise was created in a "+n+"handler but was not returned from it";r._warn(s,!0,e)}}function v(t,e){var n=t+" is deprecated and will be removed in a future version.";return e&&(n+=" Use "+e+" instead."),y(n)}function y(t,n,r){if(rt.warnings){var i,o=new L(t);if(n)r._attachExtraTrace(o);else if(rt.longStackTraces&&(i=e._peekContext()))i.attachExtraTrace(o);else{var s=j(o);o.stack=s.message+"\n"+s.stack.join("\n")}Y("warning",o)||k(o,"",!0)}}function g(t,e){for(var n=0;n<e.length-1;++n)e[n].push("From previous event:"),e[n]=e[n].join("\n");return n<e.length&&(e[n]=e[n].join("\n")),t+"\n"+e.join("\n")}function m(t){for(var e=0;e<t.length;++e)(0===t[e].length||e+1<t.length&&t[e][0]===t[e+1][0])&&(t.splice(e,1),e--)}function b(t){for(var e=t[0],n=1;n<t.length;++n){for(var r=t[n],i=e.length-1,o=e[i],s=-1,a=r.length-1;a>=0;--a)if(r[a]===o){s=a;break}for(var a=s;a>=0;--a){var c=r[a];if(e[i]!==c)break;e.pop(),i--}e=r}}function w(t){for(var e=[],n=0;n<t.length;++n){var r=t[n],i="    (No stack trace)"===r||B.test(r),o=i&&tt(r);i&&!o&&(q&&" "!==r.charAt(0)&&(r="    "+r),e.push(r))}return e}function C(t){for(var e=t.stack.replace(/\s+$/g,"").split("\n"),n=0;n<e.length;++n){var r=e[n];if("    (No stack trace)"===r||B.test(r))break}return n>0&&(e=e.slice(n)),e}function j(t){var e=t.stack,n=t.toString();return e="string"==typeof e&&e.length>0?C(t):["    (No stack trace)"],{message:n,stack:w(e)}}function k(t,e,n){if("undefined"!=typeof console){var r;if(H.isObject(t)){var i=t.stack;r=e+M(i,t)}else r=e+String(t);"function"==typeof D?D(r,n):("function"==typeof console.log||"object"==typeof console.log)&&console.log(r)}}function E(t,e,n,r){var i=!1;try{"function"==typeof e&&(i=!0,"rejectionHandled"===t?e(r):e(n,r))}catch(o){I.throwLater(o)}"unhandledRejection"===t?Y(t,n,r)||i||k(n,"Unhandled rejection "):Y(t,r)}function F(t){var e;if("function"==typeof t)e="[function "+(t.name||"anonymous")+"]";else{e=t&&"function"==typeof t.toString?t.toString():H.toString(t);var n=/\[object [a-zA-Z0-9$_]+\]/;if(n.test(e))try{var r=JSON.stringify(t);e=r}catch(i){}0===e.length&&(e="(empty array)")}return"(<"+x(e)+">, no stack trace)"}function x(t){var e=41;return t.length<e?t:t.substr(0,e-3)+"..."}function T(){return"function"==typeof nt}function R(t){var e=t.match(et);return e?{fileName:e[1],line:parseInt(e[2],10)}:void 0}function P(t,e){if(T()){for(var n,r,i=t.stack.split("\n"),o=e.stack.split("\n"),s=-1,a=-1,c=0;c<i.length;++c){var l=R(i[c]);if(l){n=l.fileName,s=l.line;break}}for(var c=0;c<o.length;++c){var l=R(o[c]);if(l){r=l.fileName,a=l.line;break}}0>s||0>a||!n||!r||n!==r||s>=a||(tt=function(t){if(U.test(t))return!0;var e=R(t);return e&&e.fileName===n&&s<=e.line&&e.line<=a?!0:!1})}}function O(t){this._parent=t,this._promisesCreated=0;var e=this._length=1+(void 0===t?0:t._length);nt(this,O),e>32&&this.uncycle()}var S,A,D,V=e._getDomain,I=e._async,L=t("./errors").Warning,H=t("./util"),N=H.canAttachTrace,U=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,B=null,M=null,q=!1,Q=!(0==H.env("BLUEBIRD_DEBUG")||!H.env("BLUEBIRD_DEBUG")&&"development"!==H.env("NODE_ENV")),$=!(0==H.env("BLUEBIRD_WARNINGS")||!Q&&!H.env("BLUEBIRD_WARNINGS")),G=!(0==H.env("BLUEBIRD_LONG_STACK_TRACES")||!Q&&!H.env("BLUEBIRD_LONG_STACK_TRACES")),z=0!=H.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&($||!!H.env("BLUEBIRD_W_FORGOTTEN_RETURN"));e.prototype.suppressUnhandledRejections=function(){var t=this._target();t._bitField=-1048577&t._bitField|524288},e.prototype._ensurePossibleRejectionHandled=function(){0===(524288&this._bitField)&&(this._setRejectionIsUnhandled(),I.invokeLater(this._notifyUnhandledRejection,this,void 0))},e.prototype._notifyUnhandledRejectionIsHandled=function(){E("rejectionHandled",S,void 0,this)},e.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},e.prototype._returnedNonUndefined=function(){return 0!==(268435456&this._bitField)},e.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var t=this._settledValue();this._setUnhandledRejectionIsNotified(),E("unhandledRejection",A,t,this)}},e.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},e.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-262145&this._bitField},e.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},e.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},e.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-1048577&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},e.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},e.prototype._warn=function(t,e,n){return y(t,e,n||this)},e.onPossiblyUnhandledRejection=function(t){var e=V();A="function"==typeof t?null===e?t:e.bind(t):void 0},e.onUnhandledRejectionHandled=function(t){var e=V();S="function"==typeof t?null===e?t:e.bind(t):void 0};var X=function(){};e.longStackTraces=function(){if(I.haveItemsQueued()&&!rt.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!rt.longStackTraces&&T()){var t=e.prototype._captureStackTrace,r=e.prototype._attachExtraTrace;rt.longStackTraces=!0,X=function(){if(I.haveItemsQueued()&&!rt.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");e.prototype._captureStackTrace=t,e.prototype._attachExtraTrace=r,n.deactivateLongStackTraces(),I.enableTrampoline(),rt.longStackTraces=!1},e.prototype._captureStackTrace=f,e.prototype._attachExtraTrace=_,n.activateLongStackTraces(),I.disableTrampolineIfNecessary()}},e.hasLongStackTraces=function(){return rt.longStackTraces&&T()};var W=function(){try{var t=document.createEvent("CustomEvent");return t.initCustomEvent("testingtheevent",!1,!0,{}),H.global.dispatchEvent(t),function(t,e){var n=document.createEvent("CustomEvent");return n.initCustomEvent(t.toLowerCase(),!1,!0,e),!H.global.dispatchEvent(n)}}catch(e){}return function(){return!1}}(),K=function(){return H.isNode?function(){return process.emit.apply(process,arguments)}:H.global?function(t){var e="on"+t.toLowerCase(),n=H.global[e];return n?(n.apply(H.global,[].slice.call(arguments,1)),!0):!1}:function(){return!1}}(),J={promiseCreated:r,promiseFulfilled:r,promiseRejected:r,promiseResolved:r,promiseCancelled:r,promiseChained:function(t,e,n){return{promise:e,child:n}},warning:function(t,e){return{warning:e}},unhandledRejection:function(t,e,n){return{reason:e,promise:n}},rejectionHandled:r},Y=function(t){var e=!1;try{e=K.apply(null,arguments)}catch(n){I.throwLater(n),e=!0}var r=!1;try{r=W(t,J[t].apply(null,arguments))}catch(n){I.throwLater(n),r=!0}return r||e};e.config=function(t){if(t=Object(t),"longStackTraces"in t&&(t.longStackTraces?e.longStackTraces():!t.longStackTraces&&e.hasLongStackTraces()&&X()),"warnings"in t){var n=t.warnings;rt.warnings=!!n,z=rt.warnings,H.isObject(n)&&"wForgottenReturn"in n&&(z=!!n.wForgottenReturn)}if("cancellation"in t&&t.cancellation&&!rt.cancellation){if(I.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");e.prototype._clearCancellationData=l,e.prototype._propagateFrom=u,e.prototype._onCancel=a,e.prototype._setOnCancel=c,e.prototype._attachCancellationCallback=s,e.prototype._execute=o,Z=u,rt.cancellation=!0}"monitoring"in t&&(t.monitoring&&!rt.monitoring?(rt.monitoring=!0,e.prototype._fireEvent=Y):!t.monitoring&&rt.monitoring&&(rt.monitoring=!1,e.prototype._fireEvent=i))},e.prototype._fireEvent=i,e.prototype._execute=function(t,e,n){try{t(e,n)}catch(r){return r}},e.prototype._onCancel=function(){},e.prototype._setOnCancel=function(t){},e.prototype._attachCancellationCallback=function(t){},e.prototype._captureStackTrace=function(){},e.prototype._attachExtraTrace=function(){},e.prototype._clearCancellationData=function(){},e.prototype._propagateFrom=function(t,e){};var Z=p,tt=function(){return!1},et=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;H.inherits(O,Error),n.CapturedTrace=O,O.prototype.uncycle=function(){var t=this._length;if(!(2>t)){for(var e=[],n={},r=0,i=this;void 0!==i;++r)e.push(i),i=i._parent;t=this._length=r;for(var r=t-1;r>=0;--r){var o=e[r].stack;void 0===n[o]&&(n[o]=r)}for(var r=0;t>r;++r){var s=e[r].stack,a=n[s];if(void 0!==a&&a!==r){a>0&&(e[a-1]._parent=void 0,e[a-1]._length=1),e[r]._parent=void 0,e[r]._length=1;var c=r>0?e[r-1]:this;t-1>a?(c._parent=e[a+1],c._parent.uncycle(),c._length=c._parent._length+1):(c._parent=void 0,c._length=1);for(var l=c._length+1,u=r-2;u>=0;--u)e[u]._length=l,l++;return}}}},O.prototype.attachExtraTrace=function(t){if(!t.__stackCleaned__){this.uncycle();for(var e=j(t),n=e.message,r=[e.stack],i=this;void 0!==i;)r.push(w(i.stack.split("\n"))),i=i._parent;b(r),m(r),H.notEnumerableProp(t,"stack",g(n,r)),H.notEnumerableProp(t,"__stackCleaned__",!0)}};var nt=function(){var t=/^\s*at\s*/,e=function(t,e){return"string"==typeof t?t:void 0!==e.name&&void 0!==e.message?e.toString():F(e)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,B=t,M=e;var n=Error.captureStackTrace;return tt=function(t){return U.test(t)},function(t,e){Error.stackTraceLimit+=6,n(t,e),Error.stackTraceLimit-=6}}var r=new Error;if("string"==typeof r.stack&&r.stack.split("\n")[0].indexOf("stackDetection@")>=0)return B=/@/,M=e,q=!0,function(t){t.stack=(new Error).stack};var i;try{throw new Error}catch(o){i="stack"in o}return"stack"in r||!i||"number"!=typeof Error.stackTraceLimit?(M=function(t,e){return"string"==typeof t?t:"object"!=typeof e&&"function"!=typeof e||void 0===e.name||void 0===e.message?F(e):e.toString()},null):(B=t,M=e,function(t){Error.stackTraceLimit+=6;try{throw new Error}catch(e){t.stack=e.stack}Error.stackTraceLimit-=6})}([]);"undefined"!=typeof console&&"undefined"!=typeof console.warn&&(D=function(t){console.warn(t)},H.isNode&&process.stderr.isTTY?D=function(t,e){var n=e?"[33m":"[31m";console.warn(n+t+"[0m\n")}:H.isNode||"string"!=typeof(new Error).stack||(D=function(t,e){console.warn("%c"+t,e?"color: darkorange":"color: red")}));var rt={warnings:$,longStackTraces:!1,cancellation:!1,monitoring:!1};return G&&e.longStackTraces(),{longStackTraces:function(){return rt.longStackTraces},warnings:function(){return rt.warnings},cancellation:function(){return rt.cancellation},monitoring:function(){return rt.monitoring},propagateFromFunction:function(){return Z},boundValueFunction:function(){return h},checkForgottenReturns:d,setBounds:P,warn:y,deprecated:v,CapturedTrace:O,fireDomEvent:W,fireGlobalEvent:K}}},{"./errors":12,"./util":36}],10:[function(t,e,n){"use strict";e.exports=function(t){function e(){return this.value}function n(){throw this.reason}t.prototype["return"]=t.prototype.thenReturn=function(n){return n instanceof t&&n.suppressUnhandledRejections(),this._then(e,void 0,void 0,{value:n},void 0)},t.prototype["throw"]=t.prototype.thenThrow=function(t){return this._then(n,void 0,void 0,{reason:t},void 0)},t.prototype.catchThrow=function(t){if(arguments.length<=1)return this._then(void 0,n,void 0,{reason:t},void 0);var e=arguments[1],r=function(){throw e};return this.caught(t,r)},t.prototype.catchReturn=function(n){if(arguments.length<=1)return n instanceof t&&n.suppressUnhandledRejections(),this._then(void 0,e,void 0,{value:n},void 0);var r=arguments[1];r instanceof t&&r.suppressUnhandledRejections();var i=function(){return r};return this.caught(n,i)}}},{}],11:[function(t,e,n){"use strict";e.exports=function(t,e){function n(){return o(this)}function r(t,n){return i(t,n,e,e)}var i=t.reduce,o=t.all;t.prototype.each=function(t){return this.mapSeries(t)._then(n,void 0,void 0,this,void 0)},t.prototype.mapSeries=function(t){return i(this,t,e,e)},t.each=function(t,e){return r(t,e)._then(n,void 0,void 0,t,void 0)},t.mapSeries=r}},{}],12:[function(t,e,n){"use strict";function r(t,e){function n(r){return this instanceof n?(p(this,"message","string"==typeof r?r:e),p(this,"name",t),void(Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this))):new n(r)}return u(n,Error),n}function i(t){return this instanceof i?(p(this,"name","OperationalError"),p(this,"message",t),this.cause=t,this.isOperational=!0,void(t instanceof Error?(p(this,"message",t.message),p(this,"stack",t.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor))):new i(t)}var o,s,a=t("./es5"),c=a.freeze,l=t("./util"),u=l.inherits,p=l.notEnumerableProp,h=r("Warning","warning"),f=r("CancellationError","cancellation error"),_=r("TimeoutError","timeout error"),d=r("AggregateError","aggregate error");try{o=TypeError,s=RangeError}catch(v){o=r("TypeError","type error"),s=r("RangeError","range error")}for(var y="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),g=0;g<y.length;++g)"function"==typeof Array.prototype[y[g]]&&(d.prototype[y[g]]=Array.prototype[y[g]]);a.defineProperty(d.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),d.prototype.isOperational=!0;var m=0;d.prototype.toString=function(){var t=Array(4*m+1).join(" "),e="\n"+t+"AggregateError of:\n";m++,t=Array(4*m+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",i=r.split("\n"),o=0;o<i.length;++o)i[o]=t+i[o];r=i.join("\n"),e+=r+"\n"}return m--,e},u(i,Error);var b=Error.__BluebirdErrorTypes__;b||(b=c({CancellationError:f,TimeoutError:_,OperationalError:i,RejectionError:i,AggregateError:d}),a.defineProperty(Error,"__BluebirdErrorTypes__",{value:b,writable:!1,enumerable:!1,configurable:!1})),e.exports={Error:Error,TypeError:o,RangeError:s,CancellationError:b.CancellationError,OperationalError:b.OperationalError,TimeoutError:b.TimeoutError,AggregateError:b.AggregateError,Warning:h}},{"./es5":13,"./util":36}],13:[function(t,e,n){var r=function(){"use strict";return void 0===this}();if(r)e.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,o={}.toString,s={}.constructor.prototype,a=function(t){var e=[];for(var n in t)i.call(t,n)&&e.push(n);return e},c=function(t,e){return{value:t[e]}},l=function(t,e,n){return t[e]=n.value,t},u=function(t){return t},p=function(t){try{return Object(t).constructor.prototype}catch(e){return s}},h=function(t){try{return"[object Array]"===o.call(t)}catch(e){return!1}};e.exports={isArray:h,keys:a,names:a,defineProperty:l,getDescriptor:c,freeze:u,getPrototypeOf:p,isES5:r,propertyIsWritable:function(){return!0}}}},{}],14:[function(t,e,n){"use strict";e.exports=function(t,e){var n=t.map;t.prototype.filter=function(t,r){return n(this,t,r,e)},t.filter=function(t,r,i){return n(t,r,i,e)}}},{}],15:[function(t,e,n){"use strict";e.exports=function(e,n){function r(t,e,n){this.promise=t,this.type=e,this.handler=n,this.called=!1,this.cancelPromise=null}function i(t){this.finallyHandler=t}function o(t,e){return null!=t.cancelPromise?(arguments.length>1?t.cancelPromise._reject(e):t.cancelPromise._cancel(),t.cancelPromise=null,!0):!1}function s(){return c.call(this,this.promise._target()._settledValue())}function a(t){return o(this,t)?void 0:(p.e=t,p)}function c(t){var r=this.promise,c=this.handler;if(!this.called){this.called=!0;var l=this.isFinallyHandler()?c.call(r._boundValue()):c.call(r._boundValue(),t);if(void 0!==l){r._setReturnedNonUndefined();var h=n(l,r);if(h instanceof e){if(null!=this.cancelPromise){if(h.isCancelled()){var f=new u("late cancellation observer");return r._attachExtraTrace(f),p.e=f,p}h.isPending()&&h._attachCancellationCallback(new i(this))}return h._then(s,a,void 0,this,void 0)}}}return r.isRejected()?(o(this),p.e=t,p):(o(this),t)}var l=t("./util"),u=e.CancellationError,p=l.errorObj;return r.prototype.isFinallyHandler=function(){return 0===this.type},i.prototype._resultCancelled=function(){o(this.finallyHandler)},e.prototype._passThrough=function(t,e,n,i){return"function"!=typeof t?this.then():this._then(n,i,void 0,new r(this,e,t),void 0)},e.prototype.lastly=e.prototype["finally"]=function(t){return this._passThrough(t,0,c,c)},e.prototype.tap=function(t){return this._passThrough(t,1,c)},r}},{"./util":36}],16:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function a(t,n,r){for(var o=0;o<n.length;++o){r._pushContext();var s=f(n[o])(t);if(r._popContext(),s===h){r._pushContext();var a=e.reject(h.e);return r._popContext(),a}var c=i(s,r);if(c instanceof e)return c}return null}function c(t,n,i,o){var s=this._promise=new e(r);s._captureStackTrace(),s._setOnCancel(this),this._stack=o,this._generatorFunction=t,this._receiver=n,this._generator=void 0,this._yieldHandlers="function"==typeof i?[i].concat(_):_,this._yieldedPromise=null}var l=t("./errors"),u=l.TypeError,p=t("./util"),h=p.errorObj,f=p.tryCatch,_=[];p.inherits(c,o),c.prototype._isResolved=function(){return null===this._promise},c.prototype._cleanup=function(){this._promise=this._generator=null},c.prototype._promiseCancelled=function(){if(!this._isResolved()){var t,n="undefined"!=typeof this._generator["return"];if(n)this._promise._pushContext(),t=f(this._generator["return"]).call(this._generator,void 0),this._promise._popContext();else{var r=new e.CancellationError("generator .return() sentinel");e.coroutine.returnSentinel=r,this._promise._attachExtraTrace(r),this._promise._pushContext(),t=f(this._generator["throw"]).call(this._generator,r),this._promise._popContext(),t===h&&t.e===r&&(t=null)}var i=this._promise;this._cleanup(),t===h?i._rejectCallback(t.e,!1):i.cancel()}},c.prototype._promiseFulfilled=function(t){this._yieldedPromise=null,this._promise._pushContext();var e=f(this._generator.next).call(this._generator,t);this._promise._popContext(),this._continue(e)},c.prototype._promiseRejected=function(t){this._yieldedPromise=null,this._promise._attachExtraTrace(t),this._promise._pushContext();var e=f(this._generator["throw"]).call(this._generator,t);this._promise._popContext(),this._continue(e)},c.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof e){var t=this._yieldedPromise;this._yieldedPromise=null,this._promiseCancelled(),t.cancel()}},c.prototype.promise=function(){return this._promise},c.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=void 0,this._promiseFulfilled(void 0)},c.prototype._continue=function(t){var n=this._promise;if(t===h)return this._cleanup(),n._rejectCallback(t.e,!1);var r=t.value;if(t.done===!0)return this._cleanup(),n._resolveCallback(r);var o=i(r,this._promise);if(!(o instanceof e)&&(o=a(o,this._yieldHandlers,this._promise),null===o))return void this._promiseRejected(new u("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",r)+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")));o=o._target();var s=o._bitField;0===(50397184&s)?(this._yieldedPromise=o,o._proxy(this,null)):0!==(33554432&s)?this._promiseFulfilled(o._value()):0!==(16777216&s)?this._promiseRejected(o._reason()):this._promiseCancelled()},e.coroutine=function(t,e){if("function"!=typeof t)throw new u("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(e).yieldHandler,r=c,i=(new Error).stack;return function(){var e=t.apply(this,arguments),o=new r(void 0,void 0,n,i),s=o.promise();return o._generator=e,o._promiseFulfilled(void 0),s}},e.coroutine.addYieldHandler=function(t){if("function"!=typeof t)throw new u("expecting a function but got "+p.classString(t));_.push(t)},e.spawn=function(t){if(s.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof t)return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var r=new c(t,this),i=r.promise();return r._run(e.spawn),i}}},{"./errors":12,"./util":36}],17:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util");o.canEvaluate,o.tryCatch,o.errorObj;e.join=function(){var t,e=arguments.length-1;if(e>0&&"function"==typeof arguments[e]){t=arguments[e];var r}var i=[].slice.call(arguments);t&&i.pop();var r=new n(i).promise();return void 0!==t?r.spread(t):r}}},{"./util":36}],18:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function a(t,e,n,r){this.constructor$(t),this._promise._captureStackTrace();var i=l();this._callback=null===i?e:i.bind(e),this._preservedValues=r===o?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=n>=1?[]:f,this._init$(void 0,-2)}function c(t,e,n,i){if("function"!=typeof e)return r("expecting a function but got "+u.classString(e));var o="object"==typeof n&&null!==n?n.concurrency:0;return o="number"==typeof o&&isFinite(o)&&o>=1?o:0,new a(t,e,o,i).promise()}var l=e._getDomain,u=t("./util"),p=u.tryCatch,h=u.errorObj,f=[];u.inherits(a,n),a.prototype._init=function(){},a.prototype._promiseFulfilled=function(t,n){
-    var r=this._values,o=this.length(),a=this._preservedValues,c=this._limit;if(0>n){if(n=-1*n-1,r[n]=t,c>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(c>=1&&this._inFlight>=c)return r[n]=t,this._queue.push(n),!1;null!==a&&(a[n]=t);var l=this._promise,u=this._callback,f=l._boundValue();l._pushContext();var _=p(u).call(f,t,n,o),d=l._popContext();if(s.checkForgottenReturns(_,d,null!==a?"Promise.filter":"Promise.map",l),_===h)return this._reject(_.e),!0;var v=i(_,this._promise);if(v instanceof e){v=v._target();var y=v._bitField;if(0===(50397184&y))return c>=1&&this._inFlight++,r[n]=v,v._proxy(this,-1*(n+1)),!1;if(0===(33554432&y))return 0!==(16777216&y)?(this._reject(v._reason()),!0):(this._cancel(),!0);_=v._value()}r[n]=_}var g=++this._totalResolved;return g>=o?(null!==a?this._filter(r,a):this._resolve(r),!0):!1},a.prototype._drainQueue=function(){for(var t=this._queue,e=this._limit,n=this._values;t.length>0&&this._inFlight<e;){if(this._isResolved())return;var r=t.pop();this._promiseFulfilled(n[r],r)}},a.prototype._filter=function(t,e){for(var n=e.length,r=new Array(n),i=0,o=0;n>o;++o)t[o]&&(r[i++]=e[o]);r.length=i,this._resolve(r)},a.prototype.preservedValues=function(){return this._preservedValues},e.prototype.map=function(t,e){return c(this,t,e,null)},e.map=function(t,e,n,r){return c(t,e,n,r)}}},{"./util":36}],19:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){var s=t("./util"),a=s.tryCatch;e.method=function(t){if("function"!=typeof t)throw new e.TypeError("expecting a function but got "+s.classString(t));return function(){var r=new e(n);r._captureStackTrace(),r._pushContext();var i=a(t).apply(this,arguments),s=r._popContext();return o.checkForgottenReturns(i,s,"Promise.method",r),r._resolveFromSyncValue(i),r}},e.attempt=e["try"]=function(t){if("function"!=typeof t)return i("expecting a function but got "+s.classString(t));var r=new e(n);r._captureStackTrace(),r._pushContext();var c;if(arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var l=arguments[1],u=arguments[2];c=s.isArray(l)?a(t).apply(u,l):a(t).call(u,l)}else c=a(t)();var p=r._popContext();return o.checkForgottenReturns(c,p,"Promise.try",r),r._resolveFromSyncValue(c),r},e.prototype._resolveFromSyncValue=function(t){t===s.errorObj?this._rejectCallback(t.e,!1):this._resolveCallback(t,!0)}}},{"./util":36}],20:[function(t,e,n){"use strict";function r(t){return t instanceof Error&&u.getPrototypeOf(t)===Error.prototype}function i(t){var e;if(r(t)){e=new l(t),e.name=t.name,e.message=t.message,e.stack=t.stack;for(var n=u.keys(t),i=0;i<n.length;++i){var o=n[i];p.test(o)||(e[o]=t[o])}return e}return s.markAsOriginatingFromRejection(t),t}function o(t,e){return function(n,r){if(null!==t){if(n){var o=i(a(n));t._attachExtraTrace(o),t._reject(o)}else if(e){var s=[].slice.call(arguments,1);t._fulfill(s)}else t._fulfill(r);t=null}}}var s=t("./util"),a=s.maybeWrapAsError,c=t("./errors"),l=c.OperationalError,u=t("./es5"),p=/^(?:name|message|stack|cause)$/;e.exports=o},{"./errors":12,"./es5":13,"./util":36}],21:[function(t,e,n){"use strict";e.exports=function(e){function n(t,e){var n=this;if(!o.isArray(t))return r.call(n,t,e);var i=a(e).apply(n._boundValue(),[null].concat(t));i===c&&s.throwLater(i.e)}function r(t,e){var n=this,r=n._boundValue(),i=void 0===t?a(e).call(r,null):a(e).call(r,null,t);i===c&&s.throwLater(i.e)}function i(t,e){var n=this;if(!t){var r=new Error(t+"");r.cause=t,t=r}var i=a(e).call(n._boundValue(),t);i===c&&s.throwLater(i.e)}var o=t("./util"),s=e._async,a=o.tryCatch,c=o.errorObj;e.prototype.asCallback=e.prototype.nodeify=function(t,e){if("function"==typeof t){var o=r;void 0!==e&&Object(e).spread&&(o=n),this._then(o,i,void 0,this,t)}return this}}},{"./util":36}],22:[function(t,e,n){"use strict";e.exports=function(){function e(){}function n(t,e){if("function"!=typeof e)throw new y("expecting a function but got "+h.classString(e));if(t.constructor!==r)throw new y("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n")}function r(t){this._bitField=0,this._fulfillmentHandler0=void 0,this._rejectionHandler0=void 0,this._promise0=void 0,this._receiver0=void 0,t!==m&&(n(this,t),this._resolveFromExecutor(t)),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function i(t){this.promise._resolveCallback(t)}function o(t){this.promise._rejectCallback(t,!1)}function s(t){var e=new r(m);e._fulfillmentHandler0=t,e._rejectionHandler0=t,e._promise0=t,e._receiver0=t}var a,c=function(){return new y("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},l=function(){return new r.PromiseInspection(this._target())},u=function(t){return r.reject(new y(t))},p={},h=t("./util");a=h.isNode?function(){var t=process.domain;return void 0===t&&(t=null),t}:function(){return null},h.notEnumerableProp(r,"_getDomain",a);var f=t("./es5"),_=t("./async"),d=new _;f.defineProperty(r,"_async",{value:d});var v=t("./errors"),y=r.TypeError=v.TypeError;r.RangeError=v.RangeError;var g=r.CancellationError=v.CancellationError;r.TimeoutError=v.TimeoutError,r.OperationalError=v.OperationalError,r.RejectionError=v.OperationalError,r.AggregateError=v.AggregateError;var m=function(){},b={},w={},C=t("./thenables")(r,m),j=t("./promise_array")(r,m,C,u,e),k=t("./context")(r),E=k.create,F=t("./debuggability")(r,k),x=(F.CapturedTrace,t("./finally")(r,C)),T=t("./catch_filter")(w),R=t("./nodeback"),P=h.errorObj,O=h.tryCatch;return r.prototype.toString=function(){return"[object Promise]"},r.prototype.caught=r.prototype["catch"]=function(t){var e=arguments.length;if(e>1){var n,r=new Array(e-1),i=0;for(n=0;e-1>n;++n){var o=arguments[n];if(!h.isObject(o))return u("expecting an object but got "+h.classString(o));r[i++]=o}return r.length=i,t=arguments[n],this.then(void 0,T(r,t,this))}return this.then(void 0,t)},r.prototype.reflect=function(){return this._then(l,l,void 0,this,void 0)},r.prototype.then=function(t,e){if(F.warnings()&&arguments.length>0&&"function"!=typeof t&&"function"!=typeof e){var n=".then() only accepts functions but was passed: "+h.classString(t);arguments.length>1&&(n+=", "+h.classString(e)),this._warn(n)}return this._then(t,e,void 0,void 0,void 0)},r.prototype.done=function(t,e){var n=this._then(t,e,void 0,void 0,void 0);n._setIsFinal()},r.prototype.spread=function(t){return"function"!=typeof t?u("expecting a function but got "+h.classString(t)):this.all()._then(t,void 0,void 0,b,void 0)},r.prototype.toJSON=function(){var t={isFulfilled:!1,isRejected:!1,fulfillmentValue:void 0,rejectionReason:void 0};return this.isFulfilled()?(t.fulfillmentValue=this.value(),t.isFulfilled=!0):this.isRejected()&&(t.rejectionReason=this.reason(),t.isRejected=!0),t},r.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new j(this).promise()},r.prototype.error=function(t){return this.caught(h.originatesFromRejection,t)},r.is=function(t){return t instanceof r},r.fromNode=r.fromCallback=function(t){var e=new r(m);e._captureStackTrace();var n=arguments.length>1?!!Object(arguments[1]).multiArgs:!1,i=O(t)(R(e,n));return i===P&&e._rejectCallback(i.e,!0),e._isFateSealed()||e._setAsyncGuaranteed(),e},r.all=function(t){return new j(t).promise()},r.cast=function(t){var e=C(t);return e instanceof r||(e=new r(m),e._captureStackTrace(),e._setFulfilled(),e._rejectionHandler0=t),e},r.resolve=r.fulfilled=r.cast,r.reject=r.rejected=function(t){var e=new r(m);return e._captureStackTrace(),e._rejectCallback(t,!0),e},r.setScheduler=function(t){if("function"!=typeof t)throw new y("expecting a function but got "+h.classString(t));var e=d._schedule;return d._schedule=t,e},r.prototype._then=function(t,e,n,i,o){var s=void 0!==o,c=s?o:new r(m),l=this._target(),u=l._bitField;s||(c._propagateFrom(this,3),c._captureStackTrace(),void 0===i&&0!==(2097152&this._bitField)&&(i=0!==(50397184&u)?this._boundValue():l===this?void 0:this._boundTo),this._fireEvent("promiseChained",this,c));var p=a();if(0!==(50397184&u)){var h,f,_=l._settlePromiseCtx;0!==(33554432&u)?(f=l._rejectionHandler0,h=t):0!==(16777216&u)?(f=l._fulfillmentHandler0,h=e,l._unsetRejectionIsUnhandled()):(_=l._settlePromiseLateCancellationObserver,f=new g("late cancellation observer"),l._attachExtraTrace(f),h=e),d.invoke(_,l,{handler:null===p?h:"function"==typeof h&&p.bind(h),promise:c,receiver:i,value:f})}else l._addCallbacks(t,e,c,i,p);return c},r.prototype._length=function(){return 65535&this._bitField},r.prototype._isFateSealed=function(){return 0!==(117506048&this._bitField)},r.prototype._isFollowing=function(){return 67108864===(67108864&this._bitField)},r.prototype._setLength=function(t){this._bitField=-65536&this._bitField|65535&t},r.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},r.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},r.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},r.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},r.prototype._isFinal=function(){return(4194304&this._bitField)>0},r.prototype._unsetCancelled=function(){this._bitField=-65537&this._bitField},r.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},r.prototype._setAsyncGuaranteed=function(){this._bitField=134217728|this._bitField},r.prototype._receiverAt=function(t){var e=0===t?this._receiver0:this[4*t-4+3];return e===p?void 0:void 0===e&&this._isBound()?this._boundValue():e},r.prototype._promiseAt=function(t){return this[4*t-4+2]},r.prototype._fulfillmentHandlerAt=function(t){return this[4*t-4+0]},r.prototype._rejectionHandlerAt=function(t){return this[4*t-4+1]},r.prototype._boundValue=function(){},r.prototype._migrateCallback0=function(t){var e=(t._bitField,t._fulfillmentHandler0),n=t._rejectionHandler0,r=t._promise0,i=t._receiverAt(0);void 0===i&&(i=p),this._addCallbacks(e,n,r,i,null)},r.prototype._migrateCallbackAt=function(t,e){var n=t._fulfillmentHandlerAt(e),r=t._rejectionHandlerAt(e),i=t._promiseAt(e),o=t._receiverAt(e);void 0===o&&(o=p),this._addCallbacks(n,r,i,o,null)},r.prototype._addCallbacks=function(t,e,n,r,i){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=r,"function"==typeof t&&(this._fulfillmentHandler0=null===i?t:i.bind(t)),"function"==typeof e&&(this._rejectionHandler0=null===i?e:i.bind(e));else{var s=4*o-4;this[s+2]=n,this[s+3]=r,"function"==typeof t&&(this[s+0]=null===i?t:i.bind(t)),"function"==typeof e&&(this[s+1]=null===i?e:i.bind(e))}return this._setLength(o+1),o},r.prototype._proxy=function(t,e){this._addCallbacks(void 0,void 0,e,t,null)},r.prototype._resolveCallback=function(t,e){if(0===(117506048&this._bitField)){if(t===this)return this._rejectCallback(c(),!1);var n=C(t,this);if(!(n instanceof r))return this._fulfill(t);e&&this._propagateFrom(n,2);var i=n._target();if(i===this)return void this._reject(c());var o=i._bitField;if(0===(50397184&o)){var s=this._length();s>0&&i._migrateCallback0(this);for(var a=1;s>a;++a)i._migrateCallbackAt(this,a);this._setFollowing(),this._setLength(0),this._setFollowee(i)}else if(0!==(33554432&o))this._fulfill(i._value());else if(0!==(16777216&o))this._reject(i._reason());else{var l=new g("late cancellation observer");i._attachExtraTrace(l),this._reject(l)}}},r.prototype._rejectCallback=function(t,e,n){var r=h.ensureErrorObject(t),i=r===t;if(!i&&!n&&F.warnings()){var o="a promise was rejected with a non-error: "+h.classString(t);this._warn(o,!0)}this._attachExtraTrace(r,e?i:!1),this._reject(t)},r.prototype._resolveFromExecutor=function(t){var e=this;this._captureStackTrace(),this._pushContext();var n=!0,r=this._execute(t,function(t){e._resolveCallback(t)},function(t){e._rejectCallback(t,n)});n=!1,this._popContext(),void 0!==r&&e._rejectCallback(r,!0)},r.prototype._settlePromiseFromHandler=function(t,e,n,r){var i=r._bitField;if(0===(65536&i)){r._pushContext();var o;e===b?n&&"number"==typeof n.length?o=O(t).apply(this._boundValue(),n):(o=P,o.e=new y("cannot .spread() a non-array: "+h.classString(n))):o=O(t).call(e,n);var s=r._popContext();i=r._bitField,0===(65536&i)&&(o===w?r._reject(n):o===P?r._rejectCallback(o.e,!1):(F.checkForgottenReturns(o,s,"",r,this),r._resolveCallback(o)))}},r.prototype._target=function(){for(var t=this;t._isFollowing();)t=t._followee();return t},r.prototype._followee=function(){return this._rejectionHandler0},r.prototype._setFollowee=function(t){this._rejectionHandler0=t},r.prototype._settlePromise=function(t,n,i,o){var s=t instanceof r,a=this._bitField,c=0!==(134217728&a);0!==(65536&a)?(s&&t._invokeInternalOnCancel(),i instanceof x&&i.isFinallyHandler()?(i.cancelPromise=t,O(n).call(i,o)===P&&t._reject(P.e)):n===l?t._fulfill(l.call(i)):i instanceof e?i._promiseCancelled(t):s||t instanceof j?t._cancel():i.cancel()):"function"==typeof n?s?(c&&t._setAsyncGuaranteed(),this._settlePromiseFromHandler(n,i,o,t)):n.call(i,o,t):i instanceof e?i._isResolved()||(0!==(33554432&a)?i._promiseFulfilled(o,t):i._promiseRejected(o,t)):s&&(c&&t._setAsyncGuaranteed(),0!==(33554432&a)?t._fulfill(o):t._reject(o))},r.prototype._settlePromiseLateCancellationObserver=function(t){var e=t.handler,n=t.promise,i=t.receiver,o=t.value;"function"==typeof e?n instanceof r?this._settlePromiseFromHandler(e,i,o,n):e.call(i,o,n):n instanceof r&&n._reject(o)},r.prototype._settlePromiseCtx=function(t){this._settlePromise(t.promise,t.handler,t.receiver,t.value)},r.prototype._settlePromise0=function(t,e,n){var r=this._promise0,i=this._receiverAt(0);this._promise0=void 0,this._receiver0=void 0,this._settlePromise(r,t,i,e)},r.prototype._clearCallbackDataAtIndex=function(t){var e=4*t-4;this[e+2]=this[e+3]=this[e+0]=this[e+1]=void 0},r.prototype._fulfill=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(t===this){var n=c();return this._attachExtraTrace(n),this._reject(n)}this._setFulfilled(),this._rejectionHandler0=t,(65535&e)>0&&(0!==(134217728&e)?this._settlePromises():d.settlePromises(this))}},r.prototype._reject=function(t){var e=this._bitField;if(!((117506048&e)>>>16))return this._setRejected(),this._fulfillmentHandler0=t,this._isFinal()?d.fatalError(t,h.isNode):void((65535&e)>0?d.settlePromises(this):this._ensurePossibleRejectionHandled())},r.prototype._fulfillPromises=function(t,e){for(var n=1;t>n;n++){var r=this._fulfillmentHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},r.prototype._rejectPromises=function(t,e){for(var n=1;t>n;n++){var r=this._rejectionHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},r.prototype._settlePromises=function(){var t=this._bitField,e=65535&t;if(e>0){if(0!==(16842752&t)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,t),this._rejectPromises(e,n)}else{var r=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,r,t),this._fulfillPromises(e,r)}this._setLength(0)}this._clearCancellationData()},r.prototype._settledValue=function(){var t=this._bitField;return 0!==(33554432&t)?this._rejectionHandler0:0!==(16777216&t)?this._fulfillmentHandler0:void 0},r.defer=r.pending=function(){F.deprecated("Promise.defer","new Promise");var t=new r(m);return{promise:t,resolve:i,reject:o}},h.notEnumerableProp(r,"_makeSelfResolutionError",c),t("./method")(r,m,C,u,F),t("./bind")(r,m,C,F),t("./cancel")(r,j,u,F),t("./direct_resolve")(r),t("./synchronous_inspection")(r),t("./join")(r,j,C,m,F),r.Promise=r,t("./map.js")(r,j,u,C,m,F),t("./using.js")(r,u,C,E,m,F),t("./timers.js")(r,m,F),t("./generators.js")(r,u,m,C,e,F),t("./nodeify.js")(r),t("./call_get.js")(r),t("./props.js")(r,j,C,u),t("./race.js")(r,m,C,u),t("./reduce.js")(r,j,u,C,m,F),t("./settle.js")(r,j,F),t("./some.js")(r,j,u),t("./promisify.js")(r,m),t("./any.js")(r),t("./each.js")(r,m),t("./filter.js")(r,m),h.toFastProperties(r),h.toFastProperties(r.prototype),s({a:1}),s({b:2}),s({c:3}),s(1),s(function(){}),s(void 0),s(!1),s(new r(m)),F.setBounds(_.firstLineError,h.lastLineError),r}},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){function s(t){switch(t){case-2:return[];case-3:return{}}}function a(t){var r=this._promise=new e(n);t instanceof e&&r._propagateFrom(t,3),r._setOnCancel(this),this._values=t,this._length=0,this._totalResolved=0,this._init(void 0,-2)}var c=t("./util");c.isArray;return c.inherits(a,o),a.prototype.length=function(){return this._length},a.prototype.promise=function(){return this._promise},a.prototype._init=function l(t,n){var o=r(this._values,this._promise);if(o instanceof e){o=o._target();var a=o._bitField;if(this._values=o,0===(50397184&a))return this._promise._setAsyncGuaranteed(),o._then(l,this._reject,void 0,this,n);if(0===(33554432&a))return 0!==(16777216&a)?this._reject(o._reason()):this._cancel();o=o._value()}if(o=c.asArray(o),null===o){var u=i("expecting an array or an iterable object but got "+c.classString(o)).reason();return void this._promise._rejectCallback(u,!1)}return 0===o.length?void(-5===n?this._resolveEmptyArray():this._resolve(s(n))):void this._iterate(o)},a.prototype._iterate=function(t){var n=this.getActualLength(t.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var i=this._promise,o=!1,s=null,a=0;n>a;++a){var c=r(t[a],i);c instanceof e?(c=c._target(),s=c._bitField):s=null,o?null!==s&&c.suppressUnhandledRejections():null!==s?0===(50397184&s)?(c._proxy(this,a),this._values[a]=c):o=0!==(33554432&s)?this._promiseFulfilled(c._value(),a):0!==(16777216&s)?this._promiseRejected(c._reason(),a):this._promiseCancelled(a):o=this._promiseFulfilled(c,a)}o||i._setAsyncGuaranteed()},a.prototype._isResolved=function(){return null===this._values},a.prototype._resolve=function(t){this._values=null,this._promise._fulfill(t)},a.prototype._cancel=function(){!this._isResolved()&&this._promise.isCancellable()&&(this._values=null,this._promise._cancel())},a.prototype._reject=function(t){this._values=null,this._promise._rejectCallback(t,!1)},a.prototype._promiseFulfilled=function(t,e){this._values[e]=t;var n=++this._totalResolved;return n>=this._length?(this._resolve(this._values),!0):!1},a.prototype._promiseCancelled=function(){return this._cancel(),!0},a.prototype._promiseRejected=function(t){return this._totalResolved++,this._reject(t),!0},a.prototype._resultCancelled=function(){if(!this._isResolved()){var t=this._values;if(this._cancel(),t instanceof e)t.cancel();else for(var n=0;n<t.length;++n)t[n]instanceof e&&t[n].cancel()}},a.prototype.shouldCopyValues=function(){return!0},a.prototype.getActualLength=function(t){return t},a}},{"./util":36}],24:[function(t,e,n){"use strict";e.exports=function(e,n){function r(t){return!C.test(t)}function i(t){try{return t.__isPromisified__===!0}catch(e){return!1}}function o(t,e,n){var r=f.getDataPropertyOrDefault(t,e+n,b);return r?i(r):!1}function s(t,e,n){for(var r=0;r<t.length;r+=2){var i=t[r];if(n.test(i))for(var o=i.replace(n,""),s=0;s<t.length;s+=2)if(t[s]===o)throw new g("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",e))}}function a(t,e,n,r){for(var a=f.inheritedDataKeys(t),c=[],l=0;l<a.length;++l){var u=a[l],p=t[u],h=r===j?!0:j(u,p,t);"function"!=typeof p||i(p)||o(t,u,e)||!r(u,p,t,h)||c.push(u,p)}return s(c,e,n),c}function c(t,r,i,o,s,a){function c(){var i=r;r===h&&(i=this);var o=new e(n);o._captureStackTrace();var s="string"==typeof u&&this!==l?this[u]:t,c=_(o,a);try{s.apply(i,d(arguments,c))}catch(p){o._rejectCallback(v(p),!0,!0)}return o._isFateSealed()||o._setAsyncGuaranteed(),o}var l=function(){return this}(),u=t;return"string"==typeof u&&(t=o),f.notEnumerableProp(c,"__isPromisified__",!0),c}function l(t,e,n,r,i){for(var o=new RegExp(k(e)+"$"),s=a(t,e,o,n),c=0,l=s.length;l>c;c+=2){var u=s[c],p=s[c+1],_=u+e;if(r===E)t[_]=E(u,h,u,p,e,i);else{var d=r(p,function(){return E(u,h,u,p,e,i)});f.notEnumerableProp(d,"__isPromisified__",!0),t[_]=d}}return f.toFastProperties(t),t}function u(t,e,n){return E(t,e,void 0,t,null,n)}var p,h={},f=t("./util"),_=t("./nodeback"),d=f.withAppended,v=f.maybeWrapAsError,y=f.canEvaluate,g=t("./errors").TypeError,m="Async",b={__isPromisified__:!0},w=["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"],C=new RegExp("^(?:"+w.join("|")+")$"),j=function(t){return f.isIdentifier(t)&&"_"!==t.charAt(0)&&"constructor"!==t},k=function(t){return t.replace(/([$])/,"\\$")},E=y?p:c;e.promisify=function(t,e){if("function"!=typeof t)throw new g("expecting a function but got "+f.classString(t));if(i(t))return t;e=Object(e);var n=void 0===e.context?h:e.context,o=!!e.multiArgs,s=u(t,n,o);return f.copyDescriptors(t,s,r),s},e.promisifyAll=function(t,e){if("function"!=typeof t&&"object"!=typeof t)throw new g("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");e=Object(e);var n=!!e.multiArgs,r=e.suffix;"string"!=typeof r&&(r=m);var i=e.filter;"function"!=typeof i&&(i=j);var o=e.promisifier;if("function"!=typeof o&&(o=E),!f.isIdentifier(r))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var s=f.inheritedDataKeys(t),a=0;a<s.length;++a){var c=t[s[a]];"constructor"!==s[a]&&f.isClass(c)&&(l(c.prototype,r,i,o,n),l(c,r,i,o,n))}return l(t,r,i,o,n)}}},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){function o(t){var e,n=!1;if(void 0!==a&&t instanceof a)e=p(t),n=!0;else{var r=u.keys(t),i=r.length;e=new Array(2*i);for(var o=0;i>o;++o){var s=r[o];e[o]=t[s],e[o+i]=s}}this.constructor$(e),this._isMap=n,this._init$(void 0,-3)}function s(t){var n,s=r(t);return l(s)?(n=s instanceof e?s._then(e.props,void 0,void 0,void 0,void 0):new o(s).promise(),s instanceof e&&n._propagateFrom(s,2),n):i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}var a,c=t("./util"),l=c.isObject,u=t("./es5");"function"==typeof Map&&(a=Map);var p=function(){function t(t,r){this[e]=t,this[e+n]=r,e++}var e=0,n=0;return function(r){n=r.size,e=0;var i=new Array(2*r.size);return r.forEach(t,i),i}}(),h=function(t){for(var e=new a,n=t.length/2|0,r=0;n>r;++r){var i=t[n+r],o=t[r];e.set(i,o)}return e};c.inherits(o,n),o.prototype._init=function(){},o.prototype._promiseFulfilled=function(t,e){this._values[e]=t;var n=++this._totalResolved;if(n>=this._length){var r;if(this._isMap)r=h(this._values);else{r={};for(var i=this.length(),o=0,s=this.length();s>o;++o)r[this._values[o+i]]=this._values[o]}return this._resolve(r),!0}return!1},o.prototype.shouldCopyValues=function(){return!1},o.prototype.getActualLength=function(t){return t>>1},e.prototype.props=function(){return s(this)},e.props=function(t){return s(t)}}},{"./es5":13,"./util":36}],26:[function(t,e,n){"use strict";function r(t,e,n,r,i){for(var o=0;i>o;++o)n[o+r]=t[o+e],t[o+e]=void 0}function i(t){this._capacity=t,this._length=0,this._front=0}i.prototype._willBeOverCapacity=function(t){return this._capacity<t},i.prototype._pushOne=function(t){var e=this.length();this._checkCapacity(e+1);var n=this._front+e&this._capacity-1;this[n]=t,this._length=e+1},i.prototype._unshiftOne=function(t){var e=this._capacity;this._checkCapacity(this.length()+1);var n=this._front,r=(n-1&e-1^e)-e;this[r]=t,this._front=r,this._length=this.length()+1},i.prototype.unshift=function(t,e,n){this._unshiftOne(n),this._unshiftOne(e),this._unshiftOne(t)},i.prototype.push=function(t,e,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(t),this._pushOne(e),void this._pushOne(n);var i=this._front+r-3;this._checkCapacity(r);var o=this._capacity-1;this[i+0&o]=t,this[i+1&o]=e,this[i+2&o]=n,this._length=r},i.prototype.shift=function(){var t=this._front,e=this[t];return this[t]=void 0,this._front=t+1&this._capacity-1,this._length--,e},i.prototype.length=function(){return this._length},i.prototype._checkCapacity=function(t){this._capacity<t&&this._resizeTo(this._capacity<<1)},i.prototype._resizeTo=function(t){var e=this._capacity;this._capacity=t;var n=this._front,i=this._length,o=n+i&e-1;r(this,0,this,e,o)},e.exports=i},{}],27:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){function o(t,o){var c=r(t);if(c instanceof e)return a(c);if(t=s.asArray(t),null===t)return i("expecting an array or an iterable object but got "+s.classString(t));var l=new e(n);void 0!==o&&l._propagateFrom(o,3);for(var u=l._fulfill,p=l._reject,h=0,f=t.length;f>h;++h){var _=t[h];(void 0!==_||h in t)&&e.cast(_)._then(u,p,void 0,l,null)}return l}var s=t("./util"),a=function(t){return t.then(function(e){return o(e,t)})};e.race=function(t){return o(t,void 0)},e.prototype.race=function(){return o(this,void 0)}}},{"./util":36}],28:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function a(t,n,r,i){this.constructor$(t);var s=h();this._fn=null===s?n:s.bind(n),void 0!==r&&(r=e.resolve(r),r._attachCancellationCallback(this)),this._initialValue=r,this._currentCancellable=null,this._eachValues=i===o?[]:void 0,this._promise._captureStackTrace(),this._init$(void 0,-5)}function c(t,e){this.isFulfilled()?e._resolve(t):e._reject(t)}function l(t,e,n,i){if("function"!=typeof e)return r("expecting a function but got "+f.classString(e));var o=new a(t,e,n,i);return o.promise()}function u(t){this.accum=t,this.array._gotAccum(t);var n=i(this.value,this.array._promise);return n instanceof e?(this.array._currentCancellable=n,n._then(p,void 0,void 0,this,void 0)):p.call(this,n)}function p(t){var n=this.array,r=n._promise,i=_(n._fn);r._pushContext();var o;o=void 0!==n._eachValues?i.call(r._boundValue(),t,this.index,this.length):i.call(r._boundValue(),this.accum,t,this.index,this.length),o instanceof e&&(n._currentCancellable=o);var a=r._popContext();return s.checkForgottenReturns(o,a,void 0!==n._eachValues?"Promise.each":"Promise.reduce",r),o}var h=e._getDomain,f=t("./util"),_=f.tryCatch;f.inherits(a,n),a.prototype._gotAccum=function(t){void 0!==this._eachValues&&t!==o&&this._eachValues.push(t)},a.prototype._eachComplete=function(t){return this._eachValues.push(t),this._eachValues},a.prototype._init=function(){},a.prototype._resolveEmptyArray=function(){this._resolve(void 0!==this._eachValues?this._eachValues:this._initialValue)},a.prototype.shouldCopyValues=function(){return!1},a.prototype._resolve=function(t){this._promise._resolveCallback(t),this._values=null},a.prototype._resultCancelled=function(t){return t===this._initialValue?this._cancel():void(this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof e&&this._currentCancellable.cancel(),this._initialValue instanceof e&&this._initialValue.cancel()))},a.prototype._iterate=function(t){this._values=t;var n,r,i=t.length;if(void 0!==this._initialValue?(n=this._initialValue,r=0):(n=e.resolve(t[0]),r=1),this._currentCancellable=n,!n.isRejected())for(;i>r;++r){var o={accum:null,value:t[r],index:r,length:i,array:this};n=n._then(u,void 0,void 0,o,void 0)}void 0!==this._eachValues&&(n=n._then(this._eachComplete,void 0,void 0,this,void 0)),n._then(c,c,void 0,n,this)},e.prototype.reduce=function(t,e){return l(this,t,e,null)},e.reduce=function(t,e,n,r){return l(t,e,n,r)}}},{"./util":36}],29:[function(t,e,n){"use strict";var r,i=t("./util"),o=function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")};if(i.isNode&&"undefined"==typeof MutationObserver){var s=global.setImmediate,a=process.nextTick;r=i.isRecentNode?function(t){s.call(global,t)}:function(t){a.call(process,t)}}else r="undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&window.navigator.standalone?"undefined"!=typeof setImmediate?function(t){setImmediate(t)}:"undefined"!=typeof setTimeout?function(t){setTimeout(t,0)}:o:function(){var t=document.createElement("div"),e={attributes:!0},n=!1,r=document.createElement("div"),i=new MutationObserver(function(){t.classList.toggle("foo"),n=!1});i.observe(r,e);var o=function(){n||(n=!0,r.classList.toggle("foo"))};return function(n){var r=new MutationObserver(function(){r.disconnect(),n()});r.observe(t,e),o()}}();e.exports=r},{"./util":36}],30:[function(t,e,n){"use strict";e.exports=function(e,n,r){function i(t){this.constructor$(t)}var o=e.PromiseInspection,s=t("./util");s.inherits(i,n),i.prototype._promiseResolved=function(t,e){this._values[t]=e;var n=++this._totalResolved;return n>=this._length?(this._resolve(this._values),!0):!1},i.prototype._promiseFulfilled=function(t,e){var n=new o;return n._bitField=33554432,n._settledValueField=t,this._promiseResolved(e,n)},i.prototype._promiseRejected=function(t,e){var n=new o;return n._bitField=16777216,n._settledValueField=t,this._promiseResolved(e,n)},e.settle=function(t){return r.deprecated(".settle()",".reflect()"),new i(t).promise()},e.prototype.settle=function(){return e.settle(this)}}},{"./util":36}],31:[function(t,e,n){"use strict";e.exports=function(e,n,r){function i(t){this.constructor$(t),this._howMany=0,this._unwrap=!1,this._initialized=!1}function o(t,e){if((0|e)!==e||0>e)return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new i(t),o=n.promise();return n.setHowMany(e),n.init(),o}var s=t("./util"),a=t("./errors").RangeError,c=t("./errors").AggregateError,l=s.isArray,u={};s.inherits(i,n),i.prototype._init=function(){if(this._initialized){if(0===this._howMany)return void this._resolve([]);this._init$(void 0,-5);var t=l(this._values);!this._isResolved()&&t&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}},i.prototype.init=function(){this._initialized=!0,this._init()},i.prototype.setUnwrap=function(){this._unwrap=!0},i.prototype.howMany=function(){return this._howMany},i.prototype.setHowMany=function(t){this._howMany=t},i.prototype._promiseFulfilled=function(t){return this._addFulfilled(t),this._fulfilled()===this.howMany()?(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0):!1},i.prototype._promiseRejected=function(t){return this._addRejected(t),this._checkOutcome()},i.prototype._promiseCancelled=function(){return this._values instanceof e||null==this._values?this._cancel():(this._addRejected(u),this._checkOutcome())},i.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var t=new c,e=this.length();e<this._values.length;++e)this._values[e]!==u&&t.push(this._values[e]);return t.length>0?this._reject(t):this._cancel(),!0}return!1},i.prototype._fulfilled=function(){return this._totalResolved},i.prototype._rejected=function(){return this._values.length-this.length()},i.prototype._addRejected=function(t){this._values.push(t)},i.prototype._addFulfilled=function(t){this._values[this._totalResolved++]=t},i.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},i.prototype._getRangeError=function(t){var e="Input array must contain at least "+this._howMany+" items but contains only "+t+" items";return new a(e)},i.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},e.some=function(t,e){return o(t,e)},e.prototype.some=function(t){return o(this,t)},e._SomePromiseArray=i}},{"./errors":12,"./util":36}],32:[function(t,e,n){"use strict";e.exports=function(t){function e(t){void 0!==t?(t=t._target(),
-    this._bitField=t._bitField,this._settledValueField=t._isFateSealed()?t._settledValue():void 0):(this._bitField=0,this._settledValueField=void 0)}e.prototype._settledValue=function(){return this._settledValueField};var n=e.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=e.prototype.error=e.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},i=e.prototype.isFulfilled=function(){return 0!==(33554432&this._bitField)},o=e.prototype.isRejected=function(){return 0!==(16777216&this._bitField)},s=e.prototype.isPending=function(){return 0===(50397184&this._bitField)},a=e.prototype.isResolved=function(){return 0!==(50331648&this._bitField)};e.prototype.isCancelled=t.prototype._isCancelled=function(){return 65536===(65536&this._bitField)},t.prototype.isCancelled=function(){return this._target()._isCancelled()},t.prototype.isPending=function(){return s.call(this._target())},t.prototype.isRejected=function(){return o.call(this._target())},t.prototype.isFulfilled=function(){return i.call(this._target())},t.prototype.isResolved=function(){return a.call(this._target())},t.prototype.value=function(){return n.call(this._target())},t.prototype.reason=function(){var t=this._target();return t._unsetRejectionIsUnhandled(),r.call(t)},t.prototype._value=function(){return this._settledValue()},t.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},t.PromiseInspection=e}},{}],33:[function(t,e,n){"use strict";e.exports=function(e,n){function r(t,r){if(u(t)){if(t instanceof e)return t;var i=o(t);if(i===l){r&&r._pushContext();var c=e.reject(i.e);return r&&r._popContext(),c}if("function"==typeof i){if(s(t)){var c=new e(n);return t._then(c._fulfill,c._reject,void 0,c,null),c}return a(t,i,r)}}return t}function i(t){return t.then}function o(t){try{return i(t)}catch(e){return l.e=e,l}}function s(t){return p.call(t,"_promise0")}function a(t,r,i){function o(t){a&&(a._resolveCallback(t),a=null)}function s(t){a&&(a._rejectCallback(t,p,!0),a=null)}var a=new e(n),u=a;i&&i._pushContext(),a._captureStackTrace(),i&&i._popContext();var p=!0,h=c.tryCatch(r).call(t,o,s);return p=!1,a&&h===l&&(a._rejectCallback(h.e,!0,!0),a=null),u}var c=t("./util"),l=c.errorObj,u=c.isObject,p={}.hasOwnProperty;return r}},{"./util":36}],34:[function(t,e,n){"use strict";e.exports=function(e,n,r){function i(t){this.handle=t}function o(t){return clearTimeout(this.handle),t}function s(t){throw clearTimeout(this.handle),t}var a=t("./util"),c=e.TimeoutError;i.prototype._resultCancelled=function(){clearTimeout(this.handle)};var l=function(t){return u(+this).thenReturn(t)},u=e.delay=function(t,o){var s,a;return void 0!==o?(s=e.resolve(o)._then(l,null,null,t,void 0),r.cancellation()&&o instanceof e&&s._setOnCancel(o)):(s=new e(n),a=setTimeout(function(){s._fulfill()},+t),r.cancellation()&&s._setOnCancel(new i(a))),s._setAsyncGuaranteed(),s};e.prototype.delay=function(t){return u(t,this)};var p=function(t,e,n){var r;r="string"!=typeof e?e instanceof Error?e:new c("operation timed out"):new c(e),a.markAsOriginatingFromRejection(r),t._attachExtraTrace(r),t._reject(r),null!=n&&n.cancel()};e.prototype.timeout=function(t,e){t=+t;var n,a,c=new i(setTimeout(function(){n.isPending()&&p(n,e,a)},t));return r.cancellation()?(a=this.then(),n=a._then(o,s,void 0,c,void 0),n._setOnCancel(c)):n=this._then(o,s,void 0,c,void 0),n}}},{"./util":36}],35:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function a(t){setTimeout(function(){throw t},0)}function c(t){var e=r(t);return e!==t&&"function"==typeof t._isDisposable&&"function"==typeof t._getDisposer&&t._isDisposable()&&e._setDisposable(t._getDisposer()),e}function l(t,n){function i(){if(s>=l)return u._fulfill();var o=c(t[s++]);if(o instanceof e&&o._isDisposable()){try{o=r(o._getDisposer().tryDispose(n),t.promise)}catch(p){return a(p)}if(o instanceof e)return o._then(i,a,null,null,null)}i()}var s=0,l=t.length,u=new e(o);return i(),u}function u(t,e,n){this._data=t,this._promise=e,this._context=n}function p(t,e,n){this.constructor$(t,e,n)}function h(t){return u.isDisposer(t)?(this.resources[this.index]._setDisposable(t),t.promise()):t}function f(t){this.length=t,this.promise=null,this[t-1]=null}var _=t("./util"),d=t("./errors").TypeError,v=t("./util").inherits,y=_.errorObj,g=_.tryCatch;u.prototype.data=function(){return this._data},u.prototype.promise=function(){return this._promise},u.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():null},u.prototype.tryDispose=function(t){var e=this.resource(),n=this._context;void 0!==n&&n._pushContext();var r=null!==e?this.doDispose(e,t):null;return void 0!==n&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},u.isDisposer=function(t){return null!=t&&"function"==typeof t.resource&&"function"==typeof t.tryDispose},v(p,u),p.prototype.doDispose=function(t,e){var n=this.data();return n.call(t,t,e)},f.prototype._resultCancelled=function(){for(var t=this.length,n=0;t>n;++n){var r=this[n];r instanceof e&&r.cancel()}},e.using=function(){var t=arguments.length;if(2>t)return n("you must pass at least 2 arguments to Promise.using");var i=arguments[t-1];if("function"!=typeof i)return n("expecting a function but got "+_.classString(i));var o,a=!0;2===t&&Array.isArray(arguments[0])?(o=arguments[0],t=o.length,a=!1):(o=arguments,t--);for(var c=new f(t),p=0;t>p;++p){var d=o[p];if(u.isDisposer(d)){var v=d;d=d.promise(),d._setDisposable(v)}else{var m=r(d);m instanceof e&&(d=m._then(h,null,null,{resources:c,index:p},void 0))}c[p]=d}for(var b=new Array(c.length),p=0;p<b.length;++p)b[p]=e.resolve(c[p]).reflect();var w=e.all(b).then(function(t){for(var e=0;e<t.length;++e){var n=t[e];if(n.isRejected())return y.e=n.error(),y;if(!n.isFulfilled())return void w.cancel();t[e]=n.value()}C._pushContext(),i=g(i);var r=a?i.apply(void 0,t):i(t),o=C._popContext();return s.checkForgottenReturns(r,o,"Promise.using",C),r}),C=w.lastly(function(){var t=new e.PromiseInspection(w);return l(c,t)});return c.promise=C,C._setOnCancel(c),C},e.prototype._setDisposable=function(t){this._bitField=131072|this._bitField,this._disposer=t},e.prototype._isDisposable=function(){return(131072&this._bitField)>0},e.prototype._getDisposer=function(){return this._disposer},e.prototype._unsetDisposable=function(){this._bitField=-131073&this._bitField,this._disposer=void 0},e.prototype.disposer=function(t){if("function"==typeof t)return new p(t,this,i());throw new d}}},{"./errors":12,"./util":36}],36:[function(t,e,n){"use strict";function r(){try{var t=x;return x=null,t.apply(this,arguments)}catch(e){return F.e=e,F}}function i(t){return x=t,r}function o(t){return null==t||t===!0||t===!1||"string"==typeof t||"number"==typeof t}function s(t){return"function"==typeof t||"object"==typeof t&&null!==t}function a(t){return o(t)?new Error(v(t)):t}function c(t,e){var n,r=t.length,i=new Array(r+1);for(n=0;r>n;++n)i[n]=t[n];return i[n]=e,i}function l(t,e,n){if(!k.isES5)return{}.hasOwnProperty.call(t,e)?t[e]:void 0;var r=Object.getOwnPropertyDescriptor(t,e);return null!=r?null==r.get&&null==r.set?r.value:n:void 0}function u(t,e,n){if(o(t))return t;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return k.defineProperty(t,e,r),t}function p(t){throw t}function h(t){try{if("function"==typeof t){var e=k.names(t.prototype),n=k.isES5&&e.length>1,r=e.length>0&&!(1===e.length&&"constructor"===e[0]),i=O.test(t+"")&&k.names(t).length>0;if(n||r||i)return!0}return!1}catch(o){return!1}}function f(t){function e(){}e.prototype=t;for(var n=8;n--;)new e;return t}function _(t){return S.test(t)}function d(t,e,n){for(var r=new Array(t),i=0;t>i;++i)r[i]=e+i+n;return r}function v(t){try{return t+""}catch(e){return"[no string representation]"}}function y(t){return null!==t&&"object"==typeof t&&"string"==typeof t.message&&"string"==typeof t.name}function g(t){try{u(t,"isOperational",!0)}catch(e){}}function m(t){return null==t?!1:t instanceof Error.__BluebirdErrorTypes__.OperationalError||t.isOperational===!0}function b(t){return y(t)&&k.propertyIsWritable(t,"stack")}function w(t){return{}.toString.call(t)}function C(t,e,n){for(var r=k.names(t),i=0;i<r.length;++i){var o=r[i];if(n(o))try{k.defineProperty(e,o,k.getDescriptor(t,o))}catch(s){}}}function j(t,e){return I?process.env[t]:e}var k=t("./es5"),E="undefined"==typeof navigator,F={e:{}},x,T="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:void 0!==this?this:null,R=function(t,e){function n(){this.constructor=t,this.constructor$=e;for(var n in e.prototype)r.call(e.prototype,n)&&"$"!==n.charAt(n.length-1)&&(this[n+"$"]=e.prototype[n])}var r={}.hasOwnProperty;return n.prototype=e.prototype,t.prototype=new n,t.prototype},P=function(){var t=[Array.prototype,Object.prototype,Function.prototype],e=function(e){for(var n=0;n<t.length;++n)if(t[n]===e)return!0;return!1};if(k.isES5){var n=Object.getOwnPropertyNames;return function(t){for(var r=[],i=Object.create(null);null!=t&&!e(t);){var o;try{o=n(t)}catch(s){return r}for(var a=0;a<o.length;++a){var c=o[a];if(!i[c]){i[c]=!0;var l=Object.getOwnPropertyDescriptor(t,c);null!=l&&null==l.get&&null==l.set&&r.push(c)}}t=k.getPrototypeOf(t)}return r}}var r={}.hasOwnProperty;return function(n){if(e(n))return[];var i=[];t:for(var o in n)if(r.call(n,o))i.push(o);else{for(var s=0;s<t.length;++s)if(r.call(t[s],o))continue t;i.push(o)}return i}}(),O=/this\s*\.\s*\S+\s*=/,S=/^[a-z$_][a-z$_0-9]*$/i,A=function(){return"stack"in new Error?function(t){return b(t)?t:new Error(v(t))}:function(t){if(b(t))return t;try{throw new Error(v(t))}catch(e){return e}}}(),D=function(t){return k.isArray(t)?t:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var V="function"==typeof Array.from?function(t){return Array.from(t)}:function(t){for(var e,n=[],r=t[Symbol.iterator]();!(e=r.next()).done;)n.push(e.value);return n};D=function(t){return k.isArray(t)?t:null!=t&&"function"==typeof t[Symbol.iterator]?V(t):null}}var I="undefined"!=typeof process&&"[object process]"===w(process).toLowerCase(),L={isClass:h,isIdentifier:_,inheritedDataKeys:P,getDataPropertyOrDefault:l,thrower:p,isArray:k.isArray,asArray:D,notEnumerableProp:u,isPrimitive:o,isObject:s,isError:y,canEvaluate:E,errorObj:F,tryCatch:i,inherits:R,withAppended:c,maybeWrapAsError:a,toFastProperties:f,filledRange:d,toString:v,canAttachTrace:b,ensureErrorObject:A,originatesFromRejection:m,markAsOriginatingFromRejection:g,classString:w,copyDescriptors:C,hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:I,env:j,global:T};L.isRecentNode=L.isNode&&function(){var t=process.versions.node.split(".").map(Number);return 0===t[0]&&t[1]>10||t[0]>0}(),L.isNode&&L.toFastProperties(process);try{throw new Error}catch(H){L.lastLineError=H}e.exports=L},{"./es5":13}]},{},[4])(4)}),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise);
\ No newline at end of file

--- a/src/Payment/view/frontend/web/js/model/storage.js
+++ b/src/Payment/view/frontend/web/js/model/storage.js
@@ -33,8 +33,6 @@ define(
             orderReference,
             addressConsentToken = amazonCore.accessToken,
             //eslint-disable-next-line no-use-before-define
-            isAmazonDefined = amazonCore.amazonDefined.subscribe(checkAmazonDefined),
-            //eslint-disable-next-line no-use-before-define
             amazonLoginError = amazonCore.amazonLoginError.subscribe(setAmazonLoggedOutIfLoginError),
             amazonDeclineCode = ko.observable(false),
             sandboxSimulationReference = ko.observable('default'),
@@ -50,25 +48,12 @@ define(
             }),
             isLoginRedirectPage = $('body').hasClass('amazon-login-login-processauthhash');
 
-        /**
-         * Subscribes to amazonDefined observable which runs when amazon object becomes available
-         * @param {String} amazonDefined
-         */
-        function checkAmazonDefined(amazonDefined) {
-            if (amazonDefined && !isLoginRedirectPage) {
-                verifyAmazonLoggedIn(); //eslint-disable-line no-use-before-define
-                //remove subscription to amazonDefined once loaded
-                isAmazonDefined.dispose();
-            }
-        }
 
         /**
          * Log out amazon user
          */
         function amazonLogOut() {
-            if (amazonCore.amazonDefined()) {
-                amazonCore.AmazonLogout();
-            }
+            amazonCore.AmazonLogout();
             this.isAmazonAccountLoggedIn(false);
         }
 
@@ -89,19 +74,14 @@ define(
             }
         });
 
-        //run this on loading storage model. If not defined subscribe will trigger when true
-        checkAmazonDefined(amazonCore.amazonDefined());
+        verifyAmazonLoggedIn();
         setAmazonLoggedOutIfLoginError(amazonCore.amazonLoginError());
 
         /**
          * Verifies amazon user is logged in
          */
         function verifyAmazonLoggedIn() {
-            amazonCore.verifyAmazonLoggedIn().then(function (response) {
-                if (!amazonCore.amazonLoginError()) {
-                    isAmazonAccountLoggedIn(response);
-                }
-            });
+            isAmazonAccountLoggedIn(!!amazonCore.accessToken());
         }
 
         return {
@@ -115,6 +95,7 @@ define(
             isQuoteDirty: isQuoteDirty,
             isPwaVisible: isPwaVisible,
             amazonlogOut: amazonLogOut,
+            amazonDefined: amazonCore.amazonDefined,
 
             /**
              * Set order reference

--- a/src/Payment/view/frontend/web/js/view/checkout-widget-address.js
+++ b/src/Payment/view/frontend/web/js/view/checkout-widget-address.js
@@ -11,6 +11,7 @@ define(
         'Magento_Checkout/js/model/shipping-rate-processor/new-address',
         'Magento_Checkout/js/action/set-shipping-information',
         'Amazon_Payment/js/model/storage',
+        'amazonCore',
         'Magento_Checkout/js/model/shipping-service',
         'Magento_Checkout/js/model/address-converter',
         'mage/storage',
@@ -31,6 +32,7 @@ define(
         shippingProcessor,
         setShippingInformationAction,
         amazonStorage,
+        amazonCore,
         shippingService,
         addressConverter,
         storage,
@@ -71,7 +73,16 @@ define(
              * Call when component template is rendered
              */
             initAddressWidget: function () {
-                self.renderAddressWidget();
+                if(amazonStorage.amazonDefined()) {
+                    self.renderAddressWidget();
+                } else {
+                    var subscription = amazonStorage.amazonDefined.subscribe(function (defined) { //eslint-disable-line vars-on-top
+                        if (defined) {
+                            self.renderAddressWidget();
+                            subscription.dispose();
+                        }
+                    });
+                }
             },
 
             /**
@@ -104,9 +115,7 @@ define(
                     /**
                      * Error callback
                      */
-                    onError: function (error) {
-                        console.log('OffAmazonPayments.Widgets.AddressBook', error.getErrorCode(), error.getErrorMessage());
-                    }
+                    onError: amazonCore.handleWidgetError
                 }).bind(self.options.addressWidgetDOMId);
             },
 

--- a/src/Payment/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
+++ b/src/Payment/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
@@ -7,6 +7,7 @@ define(
         'Magento_Customer/js/customer-data',
         'Magento_Checkout/js/model/quote',
         'Amazon_Payment/js/model/storage',
+        'amazonCore',
         'mage/storage',
         'Magento_Checkout/js/model/full-screen-loader',
         'Amazon_Payment/js/action/place-order',
@@ -27,6 +28,7 @@ define(
         customerData,
         quote,
         amazonStorage,
+        amazonCore,
         storage,
         fullScreenLoader,
         placeOrderAction,
@@ -41,8 +43,7 @@ define(
     ) {
         'use strict';
 
-        var context,
-            countryData = customerData.get('directory-data');
+        var countryData = customerData.get('directory-data');
 
         return Component.extend({
             defaults: {
@@ -63,7 +64,6 @@ define(
              * Inits
              */
             initialize: function () {
-                context = this;
                 this._super();
             },
 
@@ -71,10 +71,10 @@ define(
              * Init payment widget
              */
             initPaymentWidget: function () {
-                var $amazonPayment = $(context.apInputDOMId);
+                var $amazonPayment = $(this.apInputDOMId);
 
-                context.initDefaultValues();
-                context.renderPaymentWidget();
+                this.initDefaultValues();
+                this.renderPaymentWidget();
                 $amazonPayment.trigger('click'); //activate Amazon Pay method on render
                 $amazonPayment.trigger('rendered');
             },
@@ -84,11 +84,11 @@ define(
              */
             initDefaultValues: function () {
                 registry.get('amazonPayment', function (amazonPayment) {
-                    context.widgetScope = amazonPayment.loginScope;
-                    context.sellerId = amazonPayment.merchantId;
-                    context.presentmentCurrency = amazonPayment.presentmentCurrency;
-                    context.useMultiCurrency = amazonPayment.useMultiCurrency;
-                });
+                    this.widgetScope = amazonPayment.loginScope;
+                    this.sellerId = amazonPayment.merchantId;
+                    this.presentmentCurrency = amazonPayment.presentmentCurrency;
+                    this.useMultiCurrency = amazonPayment.useMultiCurrency;
+                }.bind(this));
             },
 
             /**
@@ -96,8 +96,8 @@ define(
              */
             renderPaymentWidget: function () {
                 var widget = new OffAmazonPayments.Widgets.Wallet({ // eslint-disable-line no-undef
-                    sellerId: context.sellerId,
-                    scope: context.widgetScope,
+                    sellerId: this.sellerId,
+                    scope: this.widgetScope,
                     amazonOrderReferenceId: amazonStorage.getOrderReference(),
 
                     /**
@@ -105,8 +105,8 @@ define(
                      */
                     onPaymentSelect: function () { // orderReference
                         amazonStorage.isPlaceOrderDisabled(true);
-                        context.setBillingAddressFromAmazon();
-                    },
+                        this.setBillingAddressFromAmazon();
+                    }.bind(this),
                     design: {
                         designMode: 'responsive'
                     },
@@ -114,18 +114,16 @@ define(
                     /**
                      * Error callback
                      */
-                    onError: function (error) {
-                        errorProcessor.process(error);
-                    }
+                    onError: amazonCore.handleWidgetError
                 });
-                if (context.useMultiCurrency) {
-                    widget.setPresentmentCurrency(context.presentmentCurrency);
-                    $(context.presentmentDOMId).hide();
+                if (this.useMultiCurrency) {
+                    widget.setPresentmentCurrency(this.presentmentCurrency);
+                    $(this.presentmentDOMId).hide();
                 }
                 else {
-                    $(context.presentmentDOMId).show();
+                    $(this.presentmentDOMId).show();
                 }
-                widget.bind(context.paymentWidgetDOMId);
+                widget.bind(this.paymentWidgetDOMId);
             },
 
             /**
@@ -183,10 +181,10 @@ define(
                         amazonStorage.isPlaceOrderDisabled(false);
 
                         if (window.checkoutConfig.amazonLogin.amazon_customer_email) {
-                            var customerField = $(context.customerEmail).val();
+                            var customerField = $(this.customerEmail).val();
 
                             if (!customerField) {
-                                $(context.customerEmail).val(window.checkoutConfig.amazonLogin.amazon_customer_email);
+                                $(this.customerEmail).val(window.checkoutConfig.amazonLogin.amazon_customer_email);
                             }
                         }
                     }
@@ -228,8 +226,8 @@ define(
                     placeOrder = placeOrderAction(this.getData(), this.redirectAfterPlaceOrder);
 
                     $.when(placeOrder).fail(function () {
-                        context.isPlaceOrderActionAllowed(true);
-                    }).done(this.afterPlaceOrder.bind(this));
+                        this.isPlaceOrderActionAllowed(true);
+                    }.bind(this)).done(this.afterPlaceOrder.bind(this));
 
                     return true;
                 }

--- a/src/Payment/view/frontend/web/js/view/shipping-address/inline-form.js
+++ b/src/Payment/view/frontend/web/js/view/shipping-address/inline-form.js
@@ -16,29 +16,25 @@ define([
          */
         initObservable: function () {
             this._super();
-            amazonStorage.isAmazonAccountLoggedIn.subscribe(function (value) {
-                var elem = document.getElementById(this.formSelector);
-
-                if (elem && value === false) {
-                    document.getElementById(this.formSelector).style.display = 'block';
-                }
-            }, this);
-
+            amazonStorage.isAmazonAccountLoggedIn.subscribe(this.hideInlineForm, this);
             return this;
         },
 
         /**
-         * Show/hide inline form
+         * Show/hide inline form depending on Amazon login status
          */
         manipulateInlineForm: function () {
-            var elem;
+            this.hideInlineForm(amazonStorage.isAmazonAccountLoggedIn());
+        },
 
-            if (amazonStorage.isAmazonAccountLoggedIn()) {
-                elem = document.getElementById(this.formSelector);
+        /**
+         * Show/hide inline form
+         */
+        hideInlineForm: function(hide) {
+            var elem = document.getElementById(this.formSelector);
 
-                if (elem) {
-                    document.getElementById(this.formSelector).style.display = 'none';
-                }
+            if (elem) {
+                document.getElementById(this.formSelector).style.display = hide ? 'none' : 'block';
             }
         }
     });

