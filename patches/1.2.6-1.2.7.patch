--- /dev/null
+++ b/CODE_OF_CONDUCT.md
@@ -0,0 +1,4 @@
+## Code of Conduct
+This project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct). 
+For more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact 
+opensource-codeofconduct@amazon.com with any additional questions or comments.

--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,61 @@
+# Contributing Guidelines
+
+Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional 
+documentation, we greatly value feedback and contributions from our community.
+
+Please read through this document before submitting any issues or pull requests to ensure we have all the necessary 
+information to effectively respond to your bug report or contribution.
+
+
+## Reporting Bugs/Feature Requests
+
+We welcome you to use the GitHub issue tracker to report bugs or suggest features.
+
+When filing an issue, please check [existing open](https://github.com/amzn/amazon-payments-magento-2-plugin/issues), or [recently closed](https://github.com/amzn/amazon-payments-magento-2-plugin/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already 
+reported the issue. Please try to include as much information as you can. Details like these are incredibly useful:
+
+* A reproducible test case or series of steps
+* The version of our code being used
+* Any modifications you've made relevant to the bug
+* Anything unusual about your environment or deployment
+
+
+## Contributing via Pull Requests
+Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:
+
+1. You are working against the latest source on the *master* branch.
+2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.
+3. You open an issue to discuss any significant work - we would hate for your time to be wasted.
+
+To send us a pull request, please:
+
+1. Fork the repository.
+2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.
+3. Ensure local tests pass.
+4. Commit to your fork using clear commit messages.
+5. Send us a pull request, answering any default questions in the pull request interface.
+6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.
+
+GitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and 
+[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).
+
+
+## Finding contributions to work on
+Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/amzn/amazon-payments-magento-2-plugin/labels/help%20wanted) issues is a great place to start. 
+
+
+## Code of Conduct
+This project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct). 
+For more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact 
+opensource-codeofconduct@amazon.com with any additional questions or comments.
+
+
+## Security issue notifications
+If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.
+
+
+## Licensing
+
+See the [LICENSE](https://github.com/amzn/amazon-payments-magento-2-plugin/blob/master/LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.
+
+We may ask you to sign a [Contributor License Agreement (CLA)](http://en.wikipedia.org/wiki/Contributor_License_Agreement) for larger changes.

--- a/README.md
+++ b/README.md
@@ -7,8 +7,14 @@ Amazon Pay offers a familiar and convenient buying experience that can help your
 For more information about Amazon Pay and Magento 2, please visit our [Amazon Pay for Magento](https://pay.amazon.com/sp/magento) site or review our [Complete User Guide](https://amzn.github.io/amazon-payments-magento-2-plugin).
 
 ## Pre-Requisites
-* Magento 2.1+
-    * [Magento 2 System Requirements](http://devdocs.magento.com/magento-system-requirements.html)
+* Which version to download?
+
+| Magento Version  | Github Branch |
+| ------------- | ------------- |
+| 2.1.0 - 2.2.3  | [1.x](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/1.x) |
+| 2.2.4 - 2.2.5  | [2.x](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/2.x) |
+| 2.2.6 and above  | [master](https://github.com/amzn/amazon-payments-magento-2-plugin/tree/master) |
+
 * SSL is installed on your site and active on Checkout and Login pages
 * A verified Amazon Pay merchant account - [sign up here](https://pay.amazon.com/signup)!
 

--- a/composer.json
+++ b/composer.json
@@ -2,7 +2,7 @@
   "name": "amzn/amazon-pay-and-login-magento-2-module",
   "description": "Official Magento2 Plugin to integrate with Amazon Pay and Login with Amazon",
   "type": "magento2-module",
-  "version": "1.2.6",
+  "version": "1.2.7",
   "license": [
     "Apache-2.0"
   ],

--- a/docs/conf.py
+++ b/docs/conf.py
@@ -60,9 +60,9 @@ author = u'Amazon.com Inc or its affiliates'
 # built documents.
 #
 # The short X.Y version.
-version = u'1.2.6'
+version = u'1.2.7'
 # The full version, including alpha/beta/rc tags.
-release = u'1.2.6'
+release = u'1.2.7'
 
 # The language for content autogenerated by Sphinx. Refer to documentation
 # for a list of supported languages.

--- a/docs/configuration.rst
+++ b/docs/configuration.rst
@@ -25,7 +25,12 @@ The credentials can be found in Seller Central at :menuselection:`Integration --
 
 Payment Region
 ..............
-Select the region where you registered your seller account from the provided list. If you're unsure about this information, please consult the Amazon Pay merchant support.
+Select the region where you registered your seller account from the provided list. If you're unsure about this information, please consult the Amazon Pay merchant support. Supported regions are:
+
+* Euro (use for countries that use EUR as their currency, e.g. Germany, France, Italy, Spain, etc.)
+* United Kingdom
+* United States
+* Japan
 
 Sandbox
 .......

--- a/docs/installation.rst
+++ b/docs/installation.rst
@@ -20,12 +20,12 @@ In case you are not able or willing to use the web installation, you can install
 
 * Sign in to your server via SSH
 * `cd` into you Magento installation directory
-* Install the extension via composer: `composer require amzn/amazon-payments-magento-2-plugin:^1.2.6`
+* Install the extension via composer: `composer require amzn/amazon-payments-magento-2-plugin:^1.2.7`
 * Enable the extension: `php bin/magento module:enable Amazon_Core Amazon_Login Amazon_Payment`
 * Upgrade the Magento installation: `php bin/magento setup:upgrade`
 * Follow any advice the upgrade routine provides
 
-.. note:: `composer require amzn/amazon-payments-magento-2-plugin:^1.2.6` will always install the most current, non-breaking, Amazon Pay extension for you, when you run an update. To fix it to a specifix version, please remove the `^`
+.. note:: `composer require amzn/amazon-payments-magento-2-plugin:^1.2.7` will always install the most current, non-breaking, Amazon Pay extension for you, when you run an update. To fix it to a specifix version, please remove the `^`
 
 In production mode, you will also have to compile the code and the dependency injection (DI) configuration and deploy static content
 

--- a/marketplace-composer.json
+++ b/marketplace-composer.json
@@ -2,13 +2,13 @@
   "name": "amzn/amazon-pay-and-login-magento-2-module",
   "description": "Official Magento2 Plugin to integrate with Amazon Pay and Login with Amazon",
   "type": "metapackage",
-  "version": "1.2.6",
+  "version": "1.2.7",
   "license": [
     "Apache-2.0"
   ],
   "require": {
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "1.2.6",
-    "amzn/login-with-amazon-module": "1.2.6",
-    "amzn/amazon-pay-module": "1.2.6"
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "1.2.7",
+    "amzn/login-with-amazon-module": "1.2.7",
+    "amzn/amazon-pay-module": "1.2.7"
   }
 }

--- a/src/Core/Helper/Data.php
+++ b/src/Core/Helper/Data.php
@@ -22,6 +22,9 @@ use Magento\Store\Model\ScopeInterface;
 use Magento\Store\Model\StoreManagerInterface;
 use Magento\Framework\Module\ModuleListInterface;
 
+/**
+ * @SuppressWarnings(PHPMD.ExcessivePublicCount)
+ */
 class Data extends AbstractHelper
 {
     const AMAZON_SECRET_KEY = 'secret_key';
@@ -31,8 +34,9 @@ class Data extends AbstractHelper
     const AMAZON_CLIENT_SECRET = 'client_secret';
     const AMAZON_REGION = 'region';
     const AMAZON_SANDBOX = 'sandbox';
+    const AMAZON_ACTIVE = 'payment/amazon_payment/active';
 
-    protected $amazonAccountUrl
+    private $amazonAccountUrl
         = [
             'us' => 'https://payments.amazon.com/overview',
             'uk' => 'https://payments.amazon.co.uk/overview',
@@ -43,7 +47,7 @@ class Data extends AbstractHelper
     /**
      * @var Array
      */
-    protected $amazonCredentialsFields
+    private $amazonCredentialsFields
         = [
             self::AMAZON_SECRET_KEY,
             self::AMAZON_ACCESS_KEY,
@@ -55,7 +59,7 @@ class Data extends AbstractHelper
     /**
      * @var Array
      */
-    protected $amazonCredentialsEncryptedFields
+    private $amazonCredentialsEncryptedFields
         = [
             self::AMAZON_SECRET_KEY,
             self::AMAZON_CLIENT_SECRET
@@ -64,12 +68,12 @@ class Data extends AbstractHelper
     /**
      * @var EncryptorInterface
      */
-    protected $encryptor;
+    private $encryptor;
 
     /**
      * @var StoreManagerInterface
      */
-    protected $storeManager;
+    private $storeManager;
 
     /**
      * @var \Amazon\Core\Helper\ClientIp
@@ -79,7 +83,7 @@ class Data extends AbstractHelper
     /**
      * @var ModuleListInterface
      */
-    protected $moduleList;
+    private $moduleList;
 
     /**
      * Data constructor.
@@ -218,7 +222,7 @@ class Data extends AbstractHelper
             'de' => 'https://static-eu.payments-amazon.com/OffAmazonPayments/de/lpa/js/Widgets.js?nomin',
             'uk' => 'https://static-eu.payments-amazon.com/OffAmazonPayments/uk/lpa/js/Widgets.js?nomin',
             'us' => 'https://static-na.payments-amazon.com/OffAmazonPayments/us/js/Widgets.js?nomin',
-            'jp' => 'https://origin-na.ssl-images-amazon.com/images/G/09/EP/offAmazonPayments/sandbox/prod/lpa/js/Widgets.js?nomin',
+            'jp' => 'https://static-fe.payments-amazon.com/OffAmazonPayments/jp/lpa/js/Widgets.js?nomin',
         ];
 
         if ($sandboxEnabled) {
@@ -226,7 +230,7 @@ class Data extends AbstractHelper
                 'de' => 'https://static-eu.payments-amazon.com/OffAmazonPayments/de/sandbox/lpa/js/Widgets.js?nomin',
                 'uk' => 'https://static-eu.payments-amazon.com/OffAmazonPayments/uk/sandbox/lpa/js/Widgets.js?nomin',
                 'us' => 'https://static-na.payments-amazon.com/OffAmazonPayments/us/sandbox/js/Widgets.js?nomin',
-                'jp' => 'https://origin-na.ssl-images-amazon.com/images/G/09/EP/offAmazonPayments/sandbox/prod/lpa/js/Widgets.js?nomin',
+                'jp' => 'https://static-fe.payments-amazon.com/OffAmazonPayments/jp/sandbox/lpa/js/Widgets.js?nomin',
             ];
         }
 
@@ -290,7 +294,7 @@ class Data extends AbstractHelper
         }
 
         return $this->scopeConfig->isSetFlag(
-            'payment/amazon_payment/pwa_enabled',
+            self::AMAZON_ACTIVE,
             $scope,
             $scopeCode
         );
@@ -312,6 +316,14 @@ class Data extends AbstractHelper
         );
     }
 
+    /*
+     * @return bool
+     */
+    public function isEnabled($scope = ScopeInterface::SCOPE_STORE, $scopeCode = null)
+    {
+        return $this->isLwaEnabled($scope, $scopeCode) || $this->isPwaEnabled($scope, $scopeCode);
+    }
+
     /*
      * @return string
      */
@@ -521,7 +533,8 @@ class Data extends AbstractHelper
 
         if (in_array($context, ['authorization', 'authorization_capture'])) {
             $simulationStrings['Authorization:Declined:InvalidPaymentMethod']
-                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"InvalidPaymentMethod", "PaymentMethodUpdateTimeInMins":5}}';
+                = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"InvalidPaymentMethod", ' .
+                  '"PaymentMethodUpdateTimeInMins":5}}';
             $simulationStrings['Authorization:Declined:AmazonRejected']
                 = '{"SandboxSimulation": {"State":"Declined", "ReasonCode":"AmazonRejected"}}';
             $simulationStrings['Authorization:Declined:TransactionTimedOut']

--- a/src/Core/Model/Config/SimplePath.php
+++ b/src/Core/Model/Config/SimplePath.php
@@ -334,8 +334,8 @@ class SimplePath
      */
     public function autoEnable()
     {
-        if (!$this->getConfig('payment/amazon_payment/pwa_enabled')) {
-            $this->config->saveConfig('payment/amazon_payment/pwa_enabled', true, $this->_scope, $this->_scopeId);
+        if (!$this->getConfig('payment/amazon_payment/active')) {
+            $this->config->saveConfig('payment/amazon_payment/active', true, $this->_scope, $this->_scopeId);
             $this->messageManager->addSuccess(__("Login and Pay with Amazon is now enabled."));
         }
     }

--- a/src/Core/composer.json
+++ b/src/Core/composer.json
@@ -2,7 +2,7 @@
   "name": "amzn/amazon-pay-and-login-with-amazon-core-module",
   "description": "Shared functionality for Amazon Pay and Login with Amazon modules",
   "type": "magento2-module",
-  "version": "1.2.6",
+  "version": "1.2.7",
   "license": [
     "Apache-2.0"
   ],

--- a/src/Core/etc/adminhtml/system.xml
+++ b/src/Core/etc/adminhtml/system.xml
@@ -66,10 +66,10 @@
                     </group>
                     <group id="options" translate="label" type="text" sortOrder="20" showInDefault="1" showInWebsite="1" showInStore="1">
                         <label>Options</label>
-                        <field id="pwa_enabled" translate="label" type="select" sortOrder="10" showInDefault="1" showInWebsite="1" showInStore="1">
+                        <field id="active" translate="label" type="select" sortOrder="10" showInDefault="1" showInWebsite="1" showInStore="1">
                             <label>Enable Amazon Pay</label>
                             <source_model>Magento\Config\Model\Config\Source\Yesno</source_model>
-                            <config_path>payment/amazon_payment/pwa_enabled</config_path>
+                            <config_path>payment/amazon_payment/active</config_path>
                         </field>
                         <field id="lwa_enabled" translate="label" type="select" sortOrder="20" showInDefault="1" showInWebsite="1" showInStore="1">
                             <label>Enable Login with Amazon</label>

--- a/src/Core/etc/config.xml
+++ b/src/Core/etc/config.xml
@@ -3,7 +3,7 @@
     <default>
         <payment>
             <amazon_payment>
-                <active>1</active>
+                <active>0</active>
                 <is_gateway>1</is_gateway>
                 <title>Amazon Pay</title>
                 <sort_order>1</sort_order>
@@ -15,7 +15,6 @@
                 <can_void>1</can_void>
                 <can_use_checkout>1</can_use_checkout>
                 <packstation_terms>Packstation,Pack-Station,Pack Station,PO Box,Post Office box,Locker</packstation_terms>
-                <pwa_enabled>0</pwa_enabled>
                 <lwa_enabled>0</lwa_enabled>
                 <authorization_mode>synchronous</authorization_mode>
                 <update_mechanism>polling</update_mechanism>

--- a/src/Core/etc/module.xml
+++ b/src/Core/etc/module.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0"?>
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:Module/etc/module.xsd">
-    <module name="Amazon_Core" setup_version="1.2.6">
+    <module name="Amazon_Core" setup_version="1.2.7">
         <sequence>
             <module name="Magento_Store"/>
             <module name="Magento_Customer"/>

--- a/src/Core/i18n/en_US.csv
+++ b/src/Core/i18n/en_US.csv
@@ -1,84 +1,117 @@
-"click here to display the categories","click here to display the categories"
-"No Simulation","No Simulation"
+"--","--"
+"A comma-separated list of case-insensitive terms which will be used to check whether a Customer Address is a locker or packing station.","A comma-separated list of case-insensitive terms which will be used to check whether a Customer Address is a locker or packing station."
+"A shop account for this email address already exists. Please enter your shop accounts password to log in without leaving the shop.","A store account for this email address already exists. Please enter your store account password to log in without leaving the store."
+"Access Key Id","Access Key Id"
+"Action is not available","Action is not available"
+"Advanced","Advanced"
+"Allowed IPs","Allowed IPs"
+"Allowed Javascript Origins","Allowed Javascript Origins"
+"Allowed Return URLs","Allowed Return URLs"
+"Amazon authorize invalid state : %1 with reason %2","Unexpected state for the Amazon Pay authoriziation. State: %1, Reason code: %2"
+"Amazon capture declined : %1","Amazon Pay declined the capture. Reason code: %1"
+"Amazon capture invalid state : %1 with reason %2","Unexpected state for the Amazon Pay capture. State: %1, Reason code: %2"
+"Amazon could not process your request.","Amazon Pay could not process your request. Please try again."
+"Amazon refund invalid state : %1 with reason %2","Unexpected state for the Amazon Pay refund. State: %1, Reason code: %2"
+"Amazon Pay","Amazon Pay"
+"Amazon Pay button in minicart","Amazon Pay button in minicart"
+"Amazon Pay button is visible on Product Page","Amazon Pay button is visible on Product Page"
+"Amazon Pay Logo","Amazon Pay Logo"
+"An unsupported currency is currently selected. Please review our configuration guide.","An unsupported currency is currently selected. Please review our configuration guide."
+"Are you an Amazon customer? Pay now with address and payment details stored in your Amazon account.","Are you an Amazon customer? Pay now with address and payment details stored in your Amazon account."
+"Asynchronous","Asynchronous"
+"Authorization Mode","Authorization Mode"
 "Authorization soft decline","Authorization soft decline"
 "Authorization hard decline","Authorization hard decline"
 "Authorization timed out","Authorization timed out"
+"Back","Back"
+"Button Color","Button Color"
+"Button Display Language","Button Display Language"
+"Button Size","Button Size"
 "Capture declined","Capture declined"
 "Capture pending","Capture pending"
-"Refund declined","Refund declined"
-"Synchronous","Synchronous"
-"Asynchronous","Asynchronous"
-"Synchronous if Possible","Synchronous if Possible"
-"Gold","Gold"
-"Light Gray","Light Gray"
-"Dark Gray","Dark Gray"
-"Small","Small"
-"Medium","Medium"
-"Large","Large"
-"Extra Large","Extra Large"
-"Login with Amazon / Amazon Pay","Login with Amazon / Amazon Pay"
-"Login / Pay","Login / Pay"
-"Amazon Pay Logo","Amazon Pay Logo"
-"Charge on Shipment","Charge on Shipment"
+"Captured amount of %1 online","Captured amount of %1 online."
+"Capture declined for Order <a href=""%2"">#%1</a>","Capture declined for Order <a href=""%2"">#%1</a>"
+"Capture pending approval from the payment gateway","Capture pending approval from the payment gateway. Please check back later."
 "Charge on Order","Charge on Order"
-"Euro Region","Euro Region"
-"United Kingdom","United Kingdom"
-"United States","United States"
-"Japan","Japan"
-"Data Polling via Cron Job","Data Polling via Cron Job"
-"Instant Payment Notifications","Instant Payment Notifications"
-"Amazon Pay","Amazon Pay"
-General,General
-Credentials,Credentials
-"Merchant Id","Merchant Id"
-"Access Key Id","Access Key Id"
-"Secret Access Key","Secret Access Key"
+"Charge on Shipment","Charge on Shipment"
+"click here to display the categories","click here to display the categories"
 "Client Id","Client Id"
 "Client Secret","Client Secret"
+"Comma separated. The ""Login with Amazon"" and ""Amazon Pay"" buttons will <em>only</em> be rendered for clients having the above IPs.
+                            If the field is empty, the buttons will be visible to all clients.","Comma separated. The ""Login with Amazon"" and ""Amazon Pay"" buttons will <em>only</em> be rendered for clients having the above IPs.
+                            If the field is empty, the buttons will be visible to all clients."
+"Continue as Guest","Continue as Guest"
+"Controls button and widget language. The default is your shop's locale. Available options can be found <a href=""https://payments.amazon.co.uk/developer/documentation/lpwa/201953980#ENTER_LANGUAGE_PARAMETER"">here</a>.","Controls button and widget language. The default is your shop's locale. Available options can be found <a href=""https://payments.amazon.co.uk/developer/documentation/lpwa/201953980#ENTER_LANGUAGE_PARAMETER"">here</a>."
+"Could not find the ""multiline_count"" config of the ""street"" Customer address attribute.","Could not find the ""multiline_count"" config of the ""street"" Customer address attribute."
+"Credentials,Credentials"
 "Credentials JSON","Credentials JSON"
-"Payment Region","Payment Region"
-Sandbox,Sandbox
-"Allowed Javascript Origins","Allowed Javascript Origins"
-"Allowed Return URLs","Allowed Return URLs"
-Options,Options
+"Dark Gray","Dark Gray"
+"Data Polling via Cron Job","Data Polling via Cron Job"
+"Declined amount of %1 online","Online Capture of amount %1 was declined."
+"Developer Options","Developer Options"
 "Enable Amazon Pay","Enable Amazon Pay"
 "Enable Login with Amazon","Enable Login with Amazon"
-"Payment Action","Payment Action"
-"Authorization Mode","Authorization Mode"
-"Update Mechanism","Update Mechanism"
-"Amazon Pay button is visible on Product Page","Amazon Pay button is visible on Product Page"
-Advanced,Advanced
-Frontend,Frontend
-"Button Display Language","Button Display Language"
-"Controls button and widget language. The default is your shop's locale. Available options can be found <a href=""https://payments.amazon.co.uk/developer/documentation/lpwa/201953980#ENTER_LANGUAGE_PARAMETER"">here</a>.","Controls button and widget language. The default is your shop's locale. Available options can be found <a href=""https://payments.amazon.co.uk/developer/documentation/lpwa/201953980#ENTER_LANGUAGE_PARAMETER"">here</a>."
-"Button Color","Button Color"
-"Button Size","Button Size"
-"Sales Options","Sales Options"
-"New Order Status","New Order Status"
-"Sales Exclusions","Sales Exclusions"
-"Is Packing Stations Terms Validation Enabled","Is Packing Stations Terms Validation Enabled"
-"Packing Stations Terms","Packing Stations Terms"
-"A comma-separated list of case-insensitive terms which will be used to check whether a Customer Address is a locker or packing station.","A comma-separated list of case-insensitive terms which will be used to check whether a Customer Address is a locker or packing station."
+"Euro Region","Euro Region"
+"Error processing Amazon Login","Error processing Amazon Login"
 "Excluded Categories","Excluded Categories"
-"The ""Amazon Pay"" button will not be available for products of the selected categories.","The ""Amazon Pay"" button will not be available for products of the selected categories."
-"Developer Options","Developer Options"
-Logging,Logging
-"Allowed IPs","Allowed IPs"
-"Comma separated. The ""Login with Amazon"" and ""Amazon Pay"" buttons will <em>only</em> be rendered for clients having the above IPs.
-                            If the field is empty, the buttons will be visible to all clients.","Comma separated. The ""Login with Amazon"" and ""Amazon Pay"" buttons will <em>only</em> be rendered for clients having the above IPs.
-                            If the field is empty, the buttons will be visible to all clients."
-"Module version","Module version"
-"--","--"
-"Amazon Pay button in minicart","Amazon Pay button in minicart"
-"An unsupported currency is currently selected. Review our <a href=""%s"" target=""_blank"">configuration guide</a> for more information.","An unsupported currency is currently selected. Review our <a href=""%s"" target=""_blank"">configuration guide</a> for more information."
-"You will be registering for a %s account based on the base currency of your shop (%s). For more information, click <a href=""%s"" target=""_blank"">here</a>.","You will be registering for a %s account based on the base currency of your shop (%s). For more information, click <a href=""%s"" target=""_blank"">here</a>."
+"Extra Large","Extra Large"
+"Forgot Your Password?","Forgot Your Password?"
+"Frontend","Frontend"
+"General","General"
 "Get started with account registration","Get started with account registration"
+"Gold","Gold"
+"In order to enable automatic account configuration using Amazon's secure key exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin.","In order to enable automatic account configuration using Amazon's secure key exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin."
+"Instant Payment Notifications","Instant Payment Notifications"
+"Is Packing Stations Terms Validation Enabled","Is Packing Stations Terms Validation Enabled"
+"I've already setup Pay with Amazon, I want to edit my settings","I've already setup Amazon Pay, I want to edit my settings"
+"Japan","Japan"
+"Large","Large"
+"Light Gray","Light Gray"
+"Logging","Logging"
+"Login / Pay","Login / Pay"
+"Login with Amazon","Login with Amazon"
+"Login with Amazon / Amazon Pay","Login with Amazon / Amazon Pay"
+"Login with Amazon available in authentication popup","Login with Amazon available in authentication popup"
+"Medium","Medium"
+"Merchant Id","Merchant Id"
+"Module version","Module version"
 "My account is ready, I need to connect it to Magento","My account is ready, I need to connect it to Magento"
+"New Order Status","New Order Status"
+"No Simulation","No Simulation"
+"Ok","Ok"
+"Options","Options"
 "or","or"
-"I've already setup Pay with Amazon, I want to edit my settings","I've already setup Amazon Pay, I want to edit my settings"
-"Back","Back"
-"Updating your config with new keys, please wait...","Updating your config with new keys, please wait..."
-"In order to enable automatic account configuration using Amazon's secure key exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin.","In order to enable automatic account configuration using Amazon's secure key exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin."
+"Packing Stations Terms","Packing Stations Terms"
+"Password","Password"
 "Paste JSON credentials here","Paste JSON credentials here"
+"Payment Action","Payment Action"
+"Payment Region","Payment Region"
+"Please select a payment method.","Please select a payment method."
+"Refund declined","Refund declined"
+"* Required Fields","* Required Fields"
+"Return to standard checkout","Return to standard checkout"
+"Sales Exclusions","Sales Exclusions"
+"Sales Options","Sales Options"
+"Sandbox","Sandbox"
 "Save Credentials","Save Credentials"
+"Secret Access Key","Secret Access Key"
+"Securely login into our website using your existing Amazon details.","Securely login to our website using your existing Amazon details."
+"Simulate Payment Scenarios","Simulate Payment Scenarios"
+"Small","Small"
+"Synchronous","Synchronous"
+"Synchronous if Possible","Synchronous if Possible"
+"The ""Amazon Pay"" button will not be available for products of the selected categories.","The ""Amazon Pay"" button will not be available for products of the selected categories."
+"the country for your address is not allowed for this store","The country associated with your address is not allowed for this store."
+"The currency selected is not supported by Amazon Pay","The currency selected is not supported by Amazon Pay on this store."
+"the email address for your Amazon account is invalid","The email address for your Amazon account is invalid."
+"There has been a problem with the selected payment method on your Amazon account. Please choose another one.","There has been a problem with the selected payment method on your Amazon account. Please choose another one."
+"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Unfortunately it is not possible to Pay with Amazon Pay for this order. Please choose another payment method."
+"United Kingdom","United Kingdom"
+"United States","United States"
+"Update Mechanism","Update Mechanism"
+"Updating your config with new keys, please wait...","Updating your config with new keys, please wait..."
 "Valid JSON credentials are required.","Valid JSON credentials are required."
+"Welcome back!","Welcome back!"
+"With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop.","With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop."
+"You will be registering for a %1 account based on the base currency of your shop (%2).","You will be registering for a %1 account based on the base currency of your shop (%2)."
+"Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
\ No newline at end of file

--- a/src/Core/view/adminhtml/templates/system/config/simplepath_admin.phtml
+++ b/src/Core/view/adminhtml/templates/system/config/simplepath_admin.phtml
@@ -16,7 +16,7 @@
     </div>
 
     <span style="display:inline-block;padding:1em 0em;">
-        <button><span><?php echo __('Get started with account registration'); ?></span></button>
+        <button><span><?= $block->escapeHtml(__('Get started with account registration')); ?></span></button>
         &nbsp; &nbsp;
         <button><span><?php echo __('My account is ready, I need to connect it to Magento'); ?></span></button>
     </span>
@@ -40,7 +40,7 @@
 </div>
 
 <div id="amazon_simplepath_back" style="display:none;margin-bottom:1em;margin-top:-0.5em;">
-  <a href="#">&laquo; <?php echo __('Back'); ?></a>
+  <a href="#">&laquo; <?= $block->escapeHtml(__('Back')); ?></a>
 </div>
 
 <script>

--- a/src/Core/view/frontend/templates/config.phtml
+++ b/src/Core/view/frontend/templates/config.phtml
@@ -15,11 +15,11 @@
  */
 ?>
 
-<?php if ($block->isExtensionEnabled()): ?>
+<?php if ($block->isExtensionEnabled()) : ?>
 <script>
 
 require (['uiRegistry'], function(registry) {
-    registry.set('amazonPayment', <?php /* @noEscape */ echo \Zend_Json::encode($block->getConfig()); ?>);
+    registry.set('amazonPayment', <?= /* @noEscape */ \Zend_Json::encode($block->getConfig()); ?>);
 });
 
 </script>

--- /dev/null
+++ b/src/Login/Controller/Login.php
@@ -0,0 +1,191 @@
+<?php
+/**
+ * Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+namespace Amazon\Login\Controller;
+
+use Amazon\Core\Client\ClientFactoryInterface;
+use Amazon\Core\Api\Data\AmazonCustomerInterface;
+use Amazon\Core\Domain\AmazonCustomerFactory;
+use Amazon\Core\Helper\Data as AmazonCoreHelper;
+use Amazon\Login\Model\Validator\AccessTokenRequestValidator;
+use Amazon\Login\Model\Customer\Account\Redirect as AccountRedirect;
+use Amazon\Login\Helper\Session;
+use Magento\Customer\Model\Session as CustomerSession;
+use Magento\Customer\Model\Url;
+use Magento\Framework\App\Action\Action;
+use Magento\Framework\App\Action\Context;
+use Psr\Log\LoggerInterface;
+use Amazon\Login\Api\CustomerManagerInterface;
+use Amazon\Login\Api\Customer\CompositeMatcherInterface;
+
+/**
+ * Login with token controller
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
+ */
+abstract class Login extends Action
+{
+    /**
+     * @var AmazonCustomerFactory
+     */
+    protected $amazonCustomerFactory;
+
+    /**
+     * @var ClientFactoryInterface
+     */
+    protected $clientFactory;
+
+    /**
+     * @var AmazonCoreHelper
+     */
+    protected $amazonCoreHelper;
+
+    /**
+     * @var Url
+     */
+    protected $customerUrl;
+
+    /**
+     * @var AccessTokenRequestValidator
+     */
+    protected $accessTokenRequestValidator;
+
+    /**
+     * @var AccountRedirect
+     */
+    protected $accountRedirect;
+
+    /**
+     * @var CompositeMatcherInterface
+     */
+    protected $matcher;
+
+    /**
+     * @var CustomerManagerInterface
+     */
+    protected $customerLinkManagement;
+
+    /**
+     * @var CustomerSession
+     */
+    protected $customerSession;
+
+    /**
+     * @var Session
+     */
+    protected $session;
+
+    /**
+     * @var LoggerInterface
+     */
+    protected $logger;
+
+    /**
+     * @param AmazonCustomerFactory       $amazonCustomerFactory
+     * @param ClientFactoryInterface      $clientFactory
+     * @param LoggerInterface             $logger
+     * @param AmazonCoreHelper            $amazonCoreHelper
+     * @param Url                         $customerUrl
+     * @param AccessTokenRequestValidator $accessTokenRequestValidator
+     * @param AccountRedirect $accountRedirect
+     * @param CompositeMatcherInterface $matcher
+     * @param CustomerLinkManagementInterface $customerLinkManagement
+     * @param CustomerSession $customerSession
+     * @param Session $session
+     * @param LoggerInterface $logger
+     * @SuppressWarnings(PHPMD.ExcessiveParameterList)
+     */
+    public function __construct(
+        Context $context,
+        AmazonCustomerFactory $amazonCustomerFactory,
+        ClientFactoryInterface $clientFactory,
+        AmazonCoreHelper $amazonCoreHelper,
+        Url $customerUrl,
+        AccessTokenRequestValidator $accessTokenRequestValidator,
+        AccountRedirect $accountRedirect,
+        CompositeMatcherInterface $matcher,
+        CustomerManagerInterface $customerLinkManagement,
+        CustomerSession $customerSession,
+        Session $session,
+        LoggerInterface $logger
+    ) {
+        $this->amazonCustomerFactory       = $amazonCustomerFactory;
+        $this->clientFactory               = $clientFactory;
+        $this->amazonCoreHelper            = $amazonCoreHelper;
+        $this->customerUrl                 = $customerUrl;
+        $this->accessTokenRequestValidator = $accessTokenRequestValidator;
+        $this->accountRedirect             = $accountRedirect;
+        $this->matcher                     = $matcher;
+        $this->customerLinkManagement      = $customerLinkManagement;
+        $this->customerSession             = $customerSession;
+        $this->session                     = $session;
+        $this->logger                      = $logger;
+        parent::__construct($context);
+    }
+
+    /**
+     * Load userinfo from access token
+     *
+     * @return AmazonCustomerInterface
+     */
+    protected function getAmazonCustomer()
+    {
+        try {
+            $userInfo = $this->clientFactory
+                             ->create()
+                             ->getUserInfo($this->getRequest()->getParam('access_token'));
+
+            if (is_array($userInfo) && isset($userInfo['user_id'])) {
+                $data = [
+                    'id'      => $userInfo['user_id'],
+                    'email'   => $userInfo['email'],
+                    'name'    => $userInfo['name'],
+                    'country' => $this->amazonCoreHelper->getRegion(),
+                ];
+                $amazonCustomer = $this->amazonCustomerFactory->create($data);
+
+                return $amazonCustomer;
+            }
+        } catch (\Exception $e) {
+            $this->logger->error($e);
+            $this->messageManager->addErrorMessage(__('Error processing Amazon Login'));
+        }
+
+        return false;
+    }
+
+    /**
+     * @return bool
+     */
+    protected function isValidToken()
+    {
+        return $this->accessTokenRequestValidator->isValid($this->getRequest());
+    }
+
+    /**
+     * @return string
+     */
+    protected function getRedirectLogin()
+    {
+        return $this->_redirect($this->customerUrl->getLoginUrl());
+    }
+
+    /**
+     * @return string
+     */
+    protected function getRedirectAccount()
+    {
+        return $this->accountRedirect->getRedirect();
+    }
+}

--- a/src/Login/Controller/Login/Authorize.php
+++ b/src/Login/Controller/Login/Authorize.php
@@ -15,137 +15,30 @@
  */
 namespace Amazon\Login\Controller\Login;
 
-use Amazon\Core\Client\ClientFactoryInterface;
-use Amazon\Core\Domain\AmazonCustomer;
-use Amazon\Core\Domain\AmazonCustomerFactory;
-use Amazon\Core\Helper\Data as AmazonCoreHelper;
-use Amazon\Login\Api\Customer\CompositeMatcherInterface;
-use Amazon\Login\Api\CustomerManagerInterface;
+use Amazon\Core\Api\Data\AmazonCustomerInterface;
 use Amazon\Login\Domain\ValidationCredentials;
-use Amazon\Login\Helper\Session;
-use Amazon\Login\Model\Validator\AccessTokenRequestValidator;
-use Amazon\Login\Model\Customer\Account\Redirect as AccountRedirect;
-use Magento\Customer\Model\Url;
-use Magento\Framework\App\Action\Action;
-use Magento\Framework\App\Action\Context;
-use Magento\Framework\Exception\NotFoundException;
 use Magento\Framework\Exception\ValidatorException;
-use Psr\Log\LoggerInterface;
+use Magento\Framework\Exception\NotFoundException;
 use Zend_Validate;
 
-class Authorize extends Action
+class Authorize extends \Amazon\Login\Controller\Login
 {
     /**
-     * @var ClientFactoryInterface
-     */
-    protected $clientFactory;
-
-    /**
-     * @var CompositeMatcherInterface
+     * {@inheritdoc}
      */
-    protected $matcher;
-
-    /**
-     * @var CustomerManagerInterface
-     */
-    protected $customerManager;
-
-    /**
-     * @var Session
-     */
-    protected $session;
-
-    /**
-     * @var AccountRedirect
-     */
-    protected $accountRedirect;
-
-    /**
-     * @var AmazonCustomerFactory
-     */
-    protected $amazonCustomerFactory;
-
-    /**
-     * @var LoggerInterface
-     */
-    protected $logger;
-
-    /**
-     * @var AmazonCoreHelper
-     */
-    protected $amazonCoreHelper;
-
-    /**
-     * @var Url
-     */
-    protected $customerUrl;
-
-    /**
-     * @var AccessTokenRequestValidator
-     */
-    protected $accessTokenRequestValidator;
-
-    /**
-     * @param Context                     $context
-     * @param ClientFactoryInterface      $clientFactory
-     * @param CompositeMatcherInterface   $matcher
-     * @param CustomerManagerInterface    $customerManager
-     * @param Session                     $session
-     * @param AccountRedirect             $accountRedirect
-     * @param AmazonCustomerFactory       $amazonCustomerFactory
-     * @param LoggerInterface             $logger
-     * @param AmazonCoreHelper            $amazonCoreHelper
-     * @param Url                         $customerUrl
-     * @param AccessTokenRequestValidator $accessTokenRequestValidator
-     */
-    public function __construct(
-        Context $context,
-        ClientFactoryInterface $clientFactory,
-        CompositeMatcherInterface $matcher,
-        CustomerManagerInterface $customerManager,
-        Session $session,
-        AccountRedirect $accountRedirect,
-        AmazonCustomerFactory $amazonCustomerFactory,
-        LoggerInterface $logger,
-        AmazonCoreHelper $amazonCoreHelper,
-        Url $customerUrl,
-        AccessTokenRequestValidator $accessTokenRequestValidator
-    ) {
-        parent::__construct($context);
-
-        $this->clientFactory               = $clientFactory;
-        $this->matcher                     = $matcher;
-        $this->customerManager             = $customerManager;
-        $this->session                     = $session;
-        $this->accountRedirect             = $accountRedirect;
-        $this->amazonCustomerFactory       = $amazonCustomerFactory;
-        $this->logger                      = $logger;
-        $this->amazonCoreHelper            = $amazonCoreHelper;
-        $this->customerUrl                 = $customerUrl;
-        $this->accessTokenRequestValidator = $accessTokenRequestValidator;
-    }
-
     public function execute()
     {
-        if (! $this->amazonCoreHelper->isLwaEnabled()) {
+        if (!$this->amazonCoreHelper->isLwaEnabled()) {
             throw new NotFoundException(__('Action is not available'));
         }
 
-        if (! $this->accessTokenRequestValidator->isValid($this->getRequest())) {
-            return $this->_redirect($this->customerUrl->getLoginUrl());
+        if (!$this->isValidToken()) {
+            return $this->getRedirectLogin();
         }
 
         try {
-            $userInfo = $this->clientFactory->create()->getUserInfo($this->getRequest()->getParam('access_token'));
-
-            if (is_array($userInfo) && isset($userInfo['user_id'])) {
-                $amazonCustomer = $this->amazonCustomerFactory->create([
-                    'id'    => $userInfo['user_id'],
-                    'email' => $userInfo['email'],
-                    'name'  => $userInfo['name'],
-                    'country' => $this->amazonCoreHelper->getRegion()
-                ]);
-
+            $amazonCustomer = $this->getAmazonCustomer();
+            if ($amazonCustomer) {
                 $processed = $this->processAmazonCustomer($amazonCustomer);
 
                 if ($processed instanceof ValidationCredentials) {
@@ -167,10 +60,10 @@ class Authorize extends Action
             $this->_eventManager->dispatch('amazon_login_authorize_error', ['exception' => $e]);
         }
 
-        return $this->accountRedirect->getRedirect();
+        return $this->getRedirectAccount();
     }
 
-    protected function processAmazonCustomer(AmazonCustomer $amazonCustomer)
+    protected function processAmazonCustomer(AmazonCustomerInterface $amazonCustomer)
     {
         $customerData = $this->matcher->match($amazonCustomer);
 
@@ -183,20 +76,20 @@ class Authorize extends Action
                 return new ValidationCredentials($customerData->getId(), $amazonCustomer->getId());
             }
 
-            $this->customerManager->updateLink($customerData->getId(), $amazonCustomer->getId());
+            $this->customerLinkManagement->updateLink($customerData->getId(), $amazonCustomer->getId());
         }
 
         return $customerData;
     }
 
-    protected function createCustomer(AmazonCustomer $amazonCustomer)
+    protected function createCustomer(AmazonCustomerInterface $amazonCustomer)
     {
         if (! Zend_Validate::is($amazonCustomer->getEmail(), 'EmailAddress')) {
             throw new ValidatorException(__('the email address for your Amazon account is invalid'));
         }
 
-        $customerData = $this->customerManager->create($amazonCustomer);
-        $this->customerManager->updateLink($customerData->getId(), $amazonCustomer->getId());
+        $customerData = $this->customerLinkManagement->create($amazonCustomer);
+        $this->customerLinkManagement->updateLink($customerData->getId(), $amazonCustomer->getId());
 
         return $customerData;
     }

--- a/src/Login/Controller/Login/Guest.php
+++ b/src/Login/Controller/Login/Guest.php
@@ -13,94 +13,79 @@
  * express or implied. See the License for the specific language governing
  * permissions and limitations under the License.
  */
+
 namespace Amazon\Login\Controller\Login;
 
 use Amazon\Core\Client\ClientFactoryInterface;
-use Amazon\Core\Domain\AmazonCustomer;
-use Amazon\Core\Domain\AmazonCustomerFactory;
 use Amazon\Core\Helper\Data as AmazonCoreHelper;
 use Amazon\Login\Model\Validator\AccessTokenRequestValidator;
-use Amazon\Login\Model\Customer\Account\Redirect as AccountRedirect;
-use Magento\Customer\Model\Session;
+use Magento\Checkout\Model\Session;
 use Magento\Customer\Model\Url;
 use Magento\Framework\App\Action\Action;
 use Magento\Framework\App\Action\Context;
-use Magento\Framework\Exception\NotFoundException;
 use Psr\Log\LoggerInterface;
 
 class Guest extends Action
 {
     /**
-     * @var AmazonCustomerFactory
+     * @var AmazonCoreHelper
      */
-    protected $amazonCustomerFactory;
+    private $amazonCoreHelper;
 
     /**
-     * @var ClientFactoryInterface
+     * @var Url
      */
-    protected $clientFactory;
+    private $customerUrl;
 
     /**
-     * @var LoggerInterface
+     * @var AccessTokenRequestValidator
      */
-    protected $logger;
+    private $accessTokenRequestValidator;
 
     /**
      * @var Session
      */
-    protected $customerSession;
+    private $session;
 
     /**
-     * @var AmazonCoreHelper
-     */
-    protected $amazonCoreHelper;
-
-    /**
-     * @var Url
+     * @var ClientFactoryInterface
      */
-    protected $customerUrl;
+    private $clientFactory;
 
     /**
-     * @var AccessTokenRequestValidator
+     * @var LoggerInterface
      */
-    protected $accessTokenRequestValidator;
+    private $logger;
 
-    /**
-     * @var AccountRedirect
-     */
-    protected $accountRedirect;
+    private $quoteRepository;
 
     /**
-     * @param Context                     $context
-     * @param AmazonCustomerFactory       $amazonCustomerFactory
-     * @param ClientFactoryInterface      $clientFactory
-     * @param LoggerInterface             $logger
-     * @param Session                     $customerSession
-     * @param AmazonCoreHelper            $amazonCoreHelper
-     * @param Url                         $customerUrl
+     * Guest constructor.
+     * @param Context $context
+     * @param AmazonCoreHelper $amazonCoreHelper
+     * @param Url $customerUrl
      * @param AccessTokenRequestValidator $accessTokenRequestValidator
-     * @param AccountRedirect             $accountRedirect
+     * @param Session $session
+     * @param ClientFactoryInterface $clientFactory
+     * @param LoggerInterface $logger
      */
     public function __construct(
         Context $context,
-        AmazonCustomerFactory $amazonCustomerFactory,
-        ClientFactoryInterface $clientFactory,
-        LoggerInterface $logger,
-        Session $customerSession,
         AmazonCoreHelper $amazonCoreHelper,
         Url $customerUrl,
         AccessTokenRequestValidator $accessTokenRequestValidator,
-        AccountRedirect $accountRedirect
-    ) {
-        parent::__construct($context);
-        $this->amazonCustomerFactory = $amazonCustomerFactory;
-        $this->clientFactory = $clientFactory;
-        $this->logger = $logger;
-        $this->customerSession = $customerSession;
+        Session $session,
+        ClientFactoryInterface $clientFactory,
+        LoggerInterface $logger
+    )
+    {
         $this->amazonCoreHelper = $amazonCoreHelper;
         $this->customerUrl = $customerUrl;
         $this->accessTokenRequestValidator = $accessTokenRequestValidator;
-        $this->accountRedirect = $accountRedirect;
+        $this->session = $session;
+        $this->clientFactory = $clientFactory;
+        $this->logger = $logger;
+        parent::__construct($context);
     }
 
     /**
@@ -108,43 +93,70 @@ class Guest extends Action
      */
     public function execute()
     {
-        if ($this->amazonCoreHelper->isLwaEnabled()) {
-            throw new NotFoundException(__('Action is not available'));
+        if (!$this->isValidToken()) {
+            return $this->getRedirectLogin();
         }
 
-        if (! $this->accessTokenRequestValidator->isValid($this->getRequest())) {
-            return $this->_redirect($this->customerUrl->getLoginUrl());
+        $customerData = $this->getAmazonCustomer();
+        if ($customerData && isset($customerData['email'])) {
+            $quote = $this->session->getQuote();
+
+            if ($quote) {
+                $quote->setCustomerEmail($customerData['email']);
+                $quote->save();
+            }
         }
 
+        return $this->_redirect('checkout');
+    }
+
+    /**
+     * @return string
+     */
+    private function getRedirectLogin()
+    {
+        return $this->_redirect($this->customerUrl->getLoginUrl());
+    }
+
+    /**
+     * @return bool
+     */
+    private function isValidToken()
+    {
+        $isValid = false;
+        try {
+            $isValid = $this->accessTokenRequestValidator->isValid($this->getRequest());
+        } catch (\Zend_Validate_Exception $e) {
+            $this->logger->error($e);
+        }
+
+        return $isValid;
+    }
+
+    /**
+     * @return array
+     */
+    private function getAmazonCustomer()
+    {
         try {
             $userInfo = $this->clientFactory
-                             ->create()
-                             ->getUserInfo($this->getRequest()->getParam('access_token'));
+                ->create()
+                ->getUserInfo($this->getRequest()->getParam('access_token'));
 
             if (is_array($userInfo) && isset($userInfo['user_id'])) {
-                $amazonCustomer = $this->amazonCustomerFactory->create([
-                    'id'    => $userInfo['user_id'],
+                $data = [
+                    'id' => $userInfo['user_id'],
                     'email' => $userInfo['email'],
-                    'name'  => $userInfo['name'],
-                    'country' => $this->amazonCoreHelper->getRegion()
-                ]);
+                    'name' => $userInfo['name'],
+                    'country' => $this->amazonCoreHelper->getRegion(),
+                ];
 
-                $this->storeUserInfoToSession($amazonCustomer);
+                return $data;
             }
         } catch (\Exception $e) {
             $this->logger->error($e);
-            $this->messageManager->addErrorMessage(__('Error processing Amazon Login'));
         }
 
-        return $this->accountRedirect->getRedirect();
-    }
-
-    /**
-     * @param AmazonCustomer $amazonCustomer
-     * @return void
-     */
-    protected function storeUserInfoToSession(AmazonCustomer $amazonCustomer)
-    {
-        $this->customerSession->setAmazonCustomer($amazonCustomer);
+        return [];
     }
 }

--- a/src/Login/Controller/Login/ProcessAuthHash.php
+++ b/src/Login/Controller/Login/ProcessAuthHash.php
@@ -23,7 +23,7 @@ class ProcessAuthHash extends \Magento\Framework\App\Action\Action
     /**
      * @var PageFactory
      */
-    protected $pageFactory;
+    private $pageFactory;
 
     /**
      * @param Context     $context

--- a/src/Login/Controller/Login/Validate.php
+++ b/src/Login/Controller/Login/Validate.php
@@ -19,12 +19,16 @@ use Magento\Framework\App\Action\Action;
 use Magento\Framework\App\Action\Context;
 use Magento\Framework\View\Result\PageFactory;
 
+/**
+ * Class Validate
+ * @package Amazon\Login\Controller\Login
+ */
 class Validate extends Action
 {
     /**
      * @var PageFactory
      */
-    protected $pageFactory;
+    private $pageFactory;
 
     /**
      * Validate constructor.
@@ -41,6 +45,9 @@ class Validate extends Action
         $this->pageFactory = $pageFactory;
     }
 
+    /**
+     * @return \Magento\Framework\App\ResponseInterface|\Magento\Framework\Controller\ResultInterface|\Magento\Framework\View\Result\Page
+     */
     public function execute()
     {
         return $this->pageFactory->create();

--- a/src/Login/Controller/Login/ValidatePost.php
+++ b/src/Login/Controller/Login/ValidatePost.php
@@ -29,27 +29,27 @@ class ValidatePost extends Action
     /**
      * @var Session
      */
-    protected $session;
+    private $session;
 
     /**
      * @var AccountRedirect
      */
-    protected $accountRedirect;
+    private $accountRedirect;
 
     /**
      * @var CustomerRegistry
      */
-    protected $customerRegistry;
+    private $customerRegistry;
 
     /**
      * @var Encryptor
      */
-    protected $encryptor;
+    private $encryptor;
 
     /**
      * @var CustomerManagerInterface
      */
-    protected $customerManager;
+    private $customerLinkManagement;
 
     /**
      * ValidatePost constructor.
@@ -59,7 +59,7 @@ class ValidatePost extends Action
      * @param AccountRedirect          $accountRedirect
      * @param CustomerRegistry         $customerRegistry
      * @param Encryptor                $encryptor
-     * @param CustomerManagerInterface $customerManager
+     * @param customerLinkManagement   $customerLinkManagement
      */
     public function __construct(
         Context $context,
@@ -67,15 +67,15 @@ class ValidatePost extends Action
         AccountRedirect $accountRedirect,
         CustomerRegistry $customerRegistry,
         Encryptor $encryptor,
-        CustomerManagerInterface $customerManager
+        CustomerManagerInterface $customerLinkManagement
     ) {
         parent::__construct($context);
 
-        $this->session          = $session;
-        $this->accountRedirect  = $accountRedirect;
-        $this->customerRegistry = $customerRegistry;
-        $this->encryptor        = $encryptor;
-        $this->customerManager  = $customerManager;
+        $this->session                = $session;
+        $this->accountRedirect        = $accountRedirect;
+        $this->customerRegistry       = $customerRegistry;
+        $this->encryptor              = $encryptor;
+        $this->customerLinkManagement = $customerLinkManagement;
     }
 
     public function execute()
@@ -87,7 +87,7 @@ class ValidatePost extends Action
             $hash     = $this->customerRegistry->retrieveSecureData($credentials->getCustomerId())->getPasswordHash();
 
             if ($this->encryptor->validateHash($password, $hash)) {
-                $this->customerManager->updateLink($credentials->getCustomerId(), $credentials->getAmazonId());
+                $this->customerLinkManagement->updateLink($credentials->getCustomerId(), $credentials->getAmazonId());
                 $this->session->loginById($credentials->getCustomerId());
             } else {
                 $this->messageManager->addErrorMessage('The password supplied was incorrect');

--- a/src/Login/Helper/Session.php
+++ b/src/Login/Helper/Session.php
@@ -19,6 +19,7 @@ use Amazon\Core\Domain\AmazonCustomer;
 use Amazon\Login\Domain\ValidationCredentials;
 use Magento\Customer\Api\Data\CustomerInterface;
 use Magento\Customer\Model\Session as CustomerSession;
+use Magento\Checkout\Model\Session as CheckoutSession;
 use Magento\Framework\Event\ManagerInterface as EventManagerInterface;
 
 class Session
@@ -26,12 +27,17 @@ class Session
     /**
      * @var CustomerSession
      */
-    protected $session;
+    private $session;
+
+    /**
+     * @var CheckoutSession
+     */
+    private $checkoutSession;
 
     /**
      * @var EventManagerInterface
      */
-    protected $eventManager;
+    private $eventManager;
 
     /**
      * @param CustomerSession $session
@@ -39,9 +45,11 @@ class Session
      */
     public function __construct(
         CustomerSession $session,
-        EventManagerInterface $eventManager
+        EventManagerInterface $eventManager,
+        CheckoutSession $checkoutSession
     ) {
         $this->session      = $session;
+        $this->checkoutSession = $checkoutSession;
         $this->eventManager = $eventManager;
     }
 
@@ -56,6 +64,7 @@ class Session
             $this->dispatchAuthenticationEvent();
             $this->session->setCustomerDataAsLoggedIn($customerData);
             $this->session->regenerateId();
+            $this->checkoutSession->loadCustomerQuote();
         }
     }
 

--- a/src/Login/Model/CheckoutConfigProvider.php
+++ b/src/Login/Model/CheckoutConfigProvider.php
@@ -17,20 +17,31 @@ namespace Amazon\Login\Model;
 
 use Magento\Checkout\Model\ConfigProviderInterface;
 use Magento\Customer\Model\Session as CustomerSession;
+use Magento\Checkout\Model\Session as CheckoutSession;
 
 class CheckoutConfigProvider implements ConfigProviderInterface
 {
     /**
      * @var CustomerSession
      */
-    protected $customerSession;
+    private $customerSession;
 
     /**
+     * @var CheckoutSession
+     */
+    private $checkoutSession;
+
+    /**
+     * CheckoutConfigProvider constructor.
      * @param CustomerSession $customerSession
+     * @param CheckoutSession $checkoutSession
      */
-    public function __construct(CustomerSession $customerSession)
-    {
+    public function __construct(
+        CustomerSession $customerSession,
+        CheckoutSession $checkoutSession
+    ) {
         $this->customerSession = $customerSession;
+        $this->checkoutSession = $checkoutSession;
     }
 
     /**
@@ -40,11 +51,16 @@ class CheckoutConfigProvider implements ConfigProviderInterface
     {
         $config = [];
 
-        /** @var \Amazon\Core\Domain\AmazonCustomer $amazonCustomer */
+        /** @var \Amazon\Core\Api\Data\AmazonCustomerInterface $amazonCustomer */
         if ($amazonCustomer = $this->customerSession->getAmazonCustomer()) {
             $config['amazon_customer_email'] = $amazonCustomer->getEmail();
         }
 
+        if (!isset($config['amazon_customer_email'])) {
+            $quote = $this->checkoutSession->getQuote();
+            $config['amazon_customer_email'] = $quote->getCustomerEmail();
+        }
+
         // return a stdClass so that the resulting JSON is an empty object, not an empty array
         return ['amazonLogin' => empty($config) ? new \stdClass : $config];
     }

--- a/src/Login/composer.json
+++ b/src/Login/composer.json
@@ -2,12 +2,12 @@
   "name": "amzn/login-with-amazon-module",
   "description": "Login with Amazon module",
   "type": "magento2-module",
-  "version": "1.2.6",
+  "version": "1.2.7",
   "license": [
     "Apache-2.0"
   ],
   "require": {
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^1.2.6",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^1.2.7",
     "magento/module-customer": "^100.1.0|^101.0.0",
 	"magento/module-checkout": "^100.1.0|^100.2.0"
     

--- a/src/Login/i18n/en_US.csv
+++ b/src/Login/i18n/en_US.csv
@@ -1,15 +1,117 @@
+"--","--"
+"A comma-separated list of case-insensitive terms which will be used to check whether a Customer Address is a locker or packing station.","A comma-separated list of case-insensitive terms which will be used to check whether a Customer Address is a locker or packing station."
+"A shop account for this email address already exists. Please enter your shop accounts password to log in without leaving the shop.","A store account for this email address already exists. Please enter your store account password to log in without leaving the store."
+"Access Key Id","Access Key Id"
 "Action is not available","Action is not available"
+"Advanced","Advanced"
+"Allowed IPs","Allowed IPs"
+"Allowed Javascript Origins","Allowed Javascript Origins"
+"Allowed Return URLs","Allowed Return URLs"
+"Amazon authorize invalid state : %1 with reason %2","Unexpected state for the Amazon Pay authoriziation. State: %1, Reason code: %2"
+"Amazon capture declined : %1","Amazon Pay declined the capture. Reason code: %1"
+"Amazon capture invalid state : %1 with reason %2","Unexpected state for the Amazon Pay capture. State: %1, Reason code: %2"
+"Amazon could not process your request.","Amazon Pay could not process your request. Please try again."
+"Amazon refund invalid state : %1 with reason %2","Unexpected state for the Amazon Pay refund. State: %1, Reason code: %2"
+"Amazon Pay","Amazon Pay"
+"Amazon Pay button in minicart","Amazon Pay button in minicart"
+"Amazon Pay button is visible on Product Page","Amazon Pay button is visible on Product Page"
+"Amazon Pay Logo","Amazon Pay Logo"
+"An unsupported currency is currently selected. Please review our configuration guide.","An unsupported currency is currently selected. Please review our configuration guide."
+"Are you an Amazon customer? Pay now with address and payment details stored in your Amazon account.","Are you an Amazon customer? Pay now with address and payment details stored in your Amazon account."
+"Asynchronous","Asynchronous"
+"Authorization Mode","Authorization Mode"
+"Authorization soft decline","Authorization soft decline"
+"Authorization hard decline","Authorization hard decline"
+"Authorization timed out","Authorization timed out"
+"Back","Back"
+"Button Color","Button Color"
+"Button Display Language","Button Display Language"
+"Button Size","Button Size"
+"Capture declined","Capture declined"
+"Capture pending","Capture pending"
+"Captured amount of %1 online","Captured amount of %1 online."
+"Capture declined for Order <a href=""%2"">#%1</a>","Capture declined for Order <a href=""%2"">#%1</a>"
+"Capture pending approval from the payment gateway","Capture pending approval from the payment gateway. Please check back later."
+"Charge on Order","Charge on Order"
+"Charge on Shipment","Charge on Shipment"
+"click here to display the categories","click here to display the categories"
+"Client Id","Client Id"
+"Client Secret","Client Secret"
+"Comma separated. The ""Login with Amazon"" and ""Amazon Pay"" buttons will <em>only</em> be rendered for clients having the above IPs.
+                            If the field is empty, the buttons will be visible to all clients.","Comma separated. The ""Login with Amazon"" and ""Amazon Pay"" buttons will <em>only</em> be rendered for clients having the above IPs.
+                            If the field is empty, the buttons will be visible to all clients."
+"Continue as Guest","Continue as Guest"
+"Controls button and widget language. The default is your shop's locale. Available options can be found <a href=""https://payments.amazon.co.uk/developer/documentation/lpwa/201953980#ENTER_LANGUAGE_PARAMETER"">here</a>.","Controls button and widget language. The default is your shop's locale. Available options can be found <a href=""https://payments.amazon.co.uk/developer/documentation/lpwa/201953980#ENTER_LANGUAGE_PARAMETER"">here</a>."
+"Could not find the ""multiline_count"" config of the ""street"" Customer address attribute.","Could not find the ""multiline_count"" config of the ""street"" Customer address attribute."
+"Credentials,Credentials"
+"Credentials JSON","Credentials JSON"
+"Dark Gray","Dark Gray"
+"Data Polling via Cron Job","Data Polling via Cron Job"
+"Declined amount of %1 online","Online Capture of amount %1 was declined."
+"Developer Options","Developer Options"
+"Enable Amazon Pay","Enable Amazon Pay"
+"Enable Login with Amazon","Enable Login with Amazon"
+"Euro Region","Euro Region"
 "Error processing Amazon Login","Error processing Amazon Login"
-"A shop account for this email address already exists. Please enter your shop accounts password to log in without leaving the shop.","A store account for this email address already exists. Please enter your store account password to log in without leaving the store."
+"Excluded Categories","Excluded Categories"
+"Extra Large","Extra Large"
+"Forgot Your Password?","Forgot Your Password?"
+"Frontend","Frontend"
+"General","General"
+"Get started with account registration","Get started with account registration"
+"Gold","Gold"
+"In order to enable automatic account configuration using Amazon's secure key exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin.","In order to enable automatic account configuration using Amazon's secure key exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin."
+"Instant Payment Notifications","Instant Payment Notifications"
+"Is Packing Stations Terms Validation Enabled","Is Packing Stations Terms Validation Enabled"
+"I've already setup Pay with Amazon, I want to edit my settings","I've already setup Amazon Pay, I want to edit my settings"
+"Japan","Japan"
+"Large","Large"
+"Light Gray","Light Gray"
+"Logging","Logging"
+"Login / Pay","Login / Pay"
 "Login with Amazon","Login with Amazon"
-"With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop.","With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop."
+"Login with Amazon / Amazon Pay","Login with Amazon / Amazon Pay"
+"Login with Amazon available in authentication popup","Login with Amazon available in authentication popup"
+"Medium","Medium"
+"Merchant Id","Merchant Id"
+"Module version","Module version"
+"My account is ready, I need to connect it to Magento","My account is ready, I need to connect it to Magento"
+"New Order Status","New Order Status"
+"No Simulation","No Simulation"
+"Ok","Ok"
+"Options","Options"
+"or","or"
+"Packing Stations Terms","Packing Stations Terms"
+"Password","Password"
+"Paste JSON credentials here","Paste JSON credentials here"
+"Payment Action","Payment Action"
+"Payment Region","Payment Region"
+"Please select a payment method.","Please select a payment method."
+"Refund declined","Refund declined"
+"* Required Fields","* Required Fields"
+"Return to standard checkout","Return to standard checkout"
+"Sales Exclusions","Sales Exclusions"
+"Sales Options","Sales Options"
+"Sandbox","Sandbox"
+"Save Credentials","Save Credentials"
+"Secret Access Key","Secret Access Key"
 "Securely login into our website using your existing Amazon details.","Securely login to our website using your existing Amazon details."
-"Welcome back!","Welcome back!"
-"Continue as Guest","Continue as Guest"
+"Simulate Payment Scenarios","Simulate Payment Scenarios"
+"Small","Small"
+"Synchronous","Synchronous"
+"Synchronous if Possible","Synchronous if Possible"
+"The ""Amazon Pay"" button will not be available for products of the selected categories.","The ""Amazon Pay"" button will not be available for products of the selected categories."
+"the country for your address is not allowed for this store","The country associated with your address is not allowed for this store."
+"The currency selected is not supported by Amazon Pay","The currency selected is not supported by Amazon Pay on this store."
 "the email address for your Amazon account is invalid","The email address for your Amazon account is invalid."
-"* Required Fields","* Required Fields"
-"Password","Password"
-"Ok","Ok"
-"Forgot Your Password?","Forgot Your Password?"
-"Login with Amazon available in authentication popup","Login with Amazon available in authentication popup"
-
+"There has been a problem with the selected payment method on your Amazon account. Please choose another one.","There has been a problem with the selected payment method on your Amazon account. Please choose another one."
+"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Unfortunately it is not possible to Pay with Amazon Pay for this order. Please choose another payment method."
+"United Kingdom","United Kingdom"
+"United States","United States"
+"Update Mechanism","Update Mechanism"
+"Updating your config with new keys, please wait...","Updating your config with new keys, please wait..."
+"Valid JSON credentials are required.","Valid JSON credentials are required."
+"Welcome back!","Welcome back!"
+"With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop.","With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop."
+"You will be registering for a %1 account based on the base currency of your shop (%2).","You will be registering for a %1 account based on the base currency of your shop (%2)."
+"Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
\ No newline at end of file

--- a/src/Login/view/frontend/web/js/amazon-csrf.js
+++ b/src/Login/view/frontend/web/js/amazon-csrf.js
@@ -18,25 +18,43 @@ define([
     'jquery',
     'mage/cookies'
 ], function (sjcl, $) {
-    "use strict";
+    'use strict';
 
     return {
         options: {
             wordsLength: 8,
             cookieName: 'amazon-csrf-state'
         },
+
+        /**
+         * Create random string for Amazon CSRF cookie
+         */
         generateNewValue: function () {
             var randomString = sjcl.codec.base64.fromBits(sjcl.random.randomWords(this.options.wordsLength));
+
             $.mage.cookies.set(this.options.cookieName, randomString);
+
             return randomString;
         },
+
+        /**
+         * Check if Amazon CSRF cookie is valid and clear cookie
+         * @param {String} stateString
+         * @returns {Boolean}
+         */
         isValid: function (stateString) {
             var isValid = $.mage.cookies.get(this.options.cookieName) === stateString;
+
             this.clear(); // always clear nonce when validating
+
             return isValid;
         },
+
+        /**
+         * Clear Amazon CSRF cookie
+         */
         clear: function () {
             $.mage.cookies.clear(this.options.cookieName);
         }
-    }
+    };
 });

--- a/src/Login/view/frontend/web/js/amazon-logout.js
+++ b/src/Login/view/frontend/web/js/amazon-logout.js
@@ -16,32 +16,34 @@
 define([
     'jquery',
     'amazonCore',
-    'jquery/ui'
+    'jquery/ui',
+    'mage/cookies'
 ], function ($, core) {
-    "use strict";
-
-    var _this;
+    'use strict';
 
     $.widget('amazon.AmazonLogout', {
         options: {
             onInit: false
         },
+
         /**
          * Create Amazon Logout Widget
          * @private
          */
         _create: function () {
-            _this = this;
             if (this.options.onInit) {
                 core.AmazonLogout(); //logout amazon user on init
+                $.mage.cookies.clear('amazon_Login_accessToken');
             }
         },
+
         /**
          * Logs out a user if called directly
          * @private
          */
         _logoutAmazonUser: function () {
             core.AmazonLogout();
+            $.mage.cookies.clear('amazon_Login_accessToken');
         }
     });
 

--- a/src/Login/view/frontend/web/js/amazon-redirect.js
+++ b/src/Login/view/frontend/web/js/amazon-redirect.js
@@ -21,8 +21,8 @@ define([
     'mage/loader',
     'jquery/ui',
     'mage/cookies'
-], function ($, amazonCore, amazonPaymentConfig, amazonCsrf, loader) {
-    "use strict";
+], function ($, amazonCore, amazonPaymentConfig, amazonCsrf) {
+    'use strict';
 
     var self;
 
@@ -45,7 +45,7 @@ define([
             this.setAuthStateCookies();
             amazonCore.amazonDefined.subscribe(function () {
                 //only set this on the redirect page
-                amazon.Login.setUseCookie(true);
+                amazon.Login.setUseCookie(true); //eslint-disable-line no-undef
                 amazonCore.verifyAmazonLoggedIn().then(function (loggedIn) {
                     if (loggedIn) {
                         self.redirect();
@@ -56,13 +56,13 @@ define([
 
         /**
          * getURLParamater from URL for access OAuth Token
-         * @param name
-         * @param source
-         * @returns {string|null}
+         * @param {String} name
+         * @param {String} source
+         * @returns {String|Null}
          */
         getURLParameter: function (name, source) {
             return decodeURIComponent((new RegExp('[?|&|#]' + name + '=' +
-                    '([^&]+?)(&|#|;|$)').exec(source) || [,""])[1].replace(
+                    '([^&]+?)(&|#|;|$)').exec(source) || [,''])[1].replace(
                         /\+/g,
                         '%20'
                     )) || null;
@@ -70,27 +70,40 @@ define([
 
         /**
          * Set State Cache Auth Cookies if they aren't already set
-         * @returns {boolean}
+         * @returns {Boolean}
          */
         setAuthStateCookies: function () {
-            var token = this.getURLParameter("access_token", location.hash);
+            var token = this.getURLParameter('access_token', location.hash);
+
             if (typeof token === 'string' && token.match(/^Atza/)) {
                 $.mage.cookies.set('amazon_Login_accessToken', token);
             }
+
             return true;
         },
+
         /**
          * Redirect user to correct controller which logs them into M2 via Amazon hash
          */
         redirect: function () {
-            window.location = amazonPaymentConfig.getValue('redirectUrl') + '?access_token=' + this.getURLParameter('access_token', location.hash);
+            window.location = amazonPaymentConfig.getValue('redirectUrl') + '?access_token=' +
+                this.getURLParameter('access_token', location.hash);
         },
+
+        /**
+         * Redirect user on invalid state
+         */
         redirectOnInvalidState: function () {
             var state = this.getURLParameter('state', location.hash);
+
             if (!state || !amazonCsrf.isValid(state)) {
                 window.location = amazonPaymentConfig.getValue('customerLoginPageUrl');
             }
         },
+
+        /**
+         * Redirect user on request error
+         */
         redirectOnRequestWithError: function () {
             if (this.getURLParameter('error', window.location)) {
                 window.location = amazonPaymentConfig.getValue('customerLoginPageUrl');

--- a/src/Payment/Observer/AddAmazonButton.php
+++ b/src/Payment/Observer/AddAmazonButton.php
@@ -25,12 +25,12 @@ class AddAmazonButton implements ObserverInterface
     /**
      * @var Data
      */
-    protected $coreHelper;
+    private $coreHelper;
 
     /**
      * @var ShortcutFactory
      */
-    protected $shortcutFactory;
+    private $shortcutFactory;
 
     /**
      * @param Data $coreHelper
@@ -50,7 +50,6 @@ class AddAmazonButton implements ObserverInterface
         $shortcutButtons = $observer->getEvent()->getContainer();
 
         if ($this->coreHelper->isPwaEnabled() && $this->coreHelper->isCurrentCurrencySupportedByAmazon()) {
-
             $params = [
                 'shortcutValidator' => $this->shortcutFactory->create($observer->getEvent()->getCheckoutSession()),
             ];
@@ -58,7 +57,7 @@ class AddAmazonButton implements ObserverInterface
 
             /** @var \Magento\Framework\View\Element\Template $shortcut */
             $shortcut = $shortcutButtons->getLayout()->createBlock(
-                'Amazon\Payment\Block\Minicart\Button',
+                \Amazon\Payment\Block\Minicart\Button::class,
                 '',
                 $params
             );
@@ -69,7 +68,7 @@ class AddAmazonButton implements ObserverInterface
                 $observer->getEvent()->getOrPosition()
             );
 
-            $shortcut->setIsCart(get_class($shortcutButtons) == 'Magento\Checkout\Block\QuoteShortcutButtons');
+            $shortcut->setIsCart(get_class($shortcutButtons) == \Magento\Checkout\Block\QuoteShortcutButtons::class);
 
             $shortcutButtons->addShortcut($shortcut);
         }

--- a/src/Payment/composer.json
+++ b/src/Payment/composer.json
@@ -2,13 +2,13 @@
   "name": "amzn/amazon-pay-module",
   "description": "Amazon Pay module",
   "type": "magento2-module",
-  "version": "1.2.6",
+  "version": "1.2.7",
   "license": [
     "Apache-2.0"
   ],
   "require": {
-    "amzn/amazon-pay-and-login-with-amazon-core-module": "^1.2.6",
-    "amzn/login-with-amazon-module": "^1.2.6",
+    "amzn/amazon-pay-and-login-with-amazon-core-module": "^1.2.7",
+    "amzn/login-with-amazon-module": "^1.2.7",
     "magento/module-eav": "^100.1.0|^101.0.0",
     "magento/module-sales": "^100.1.0|^101.0.0",
     "magento/module-quote": "^100.1.0|^101.0.0",

--- a/src/Payment/etc/di.xml
+++ b/src/Payment/etc/di.xml
@@ -68,7 +68,6 @@
     <type name="Magento\Framework\Webapi\ErrorProcessor">
         <plugin name="amazon_payment_webapi_error_processor" type="Amazon\Payment\Plugin\WebapiErrorProcessor" sortOrder="1" />
     </type>
-    <type name="Magento\Framework\Mail\MessageInterface" shared="false" />
     <type name="Amazon\Payment\Model\Config">
         <arguments>
             <argument name="methodCode" xsi:type="const">Amazon\Payment\Model\Method\Amazon::PAYMENT_METHOD_CODE</argument>
@@ -79,4 +78,28 @@
             <argument name="amazonConfig" xsi:type="object">Amazon\Payment\Model\Config</argument>
         </arguments>
     </type>
+    <type name="Magento\ScalableCheckout\Console\Command\SplitQuote">
+        <arguments>
+            <argument name="tables" xsi:type="array">
+                <item name="amazon_quote" xsi:type="string">amazon_quote</item>
+            </argument>
+        </arguments>
+    </type>
+    <type name="Amazon\Payment\Model\ResourceModel\QuoteLink">
+        <arguments>
+            <argument name="connectionName" xsi:type="string">checkout</argument>
+        </arguments>
+    </type>
+    <type name="Magento\ScalableOms\Console\Command\SplitSales">
+        <arguments>
+            <argument name="tables" xsi:type="array">
+                <item name="amazon_sales_order" xsi:type="string">amazon_sales_order</item>
+            </argument>
+        </arguments>
+    </type>
+    <type name="Amazon\Payment\Model\ResourceModel\OrderLink">
+        <arguments>
+            <argument name="connectionName" xsi:type="string">sales</argument>
+        </arguments>
+    </type>
 </config>

--- a/src/Payment/i18n/en_US.csv
+++ b/src/Payment/i18n/en_US.csv
@@ -1,20 +1,117 @@
-"Amazon authorize invalid state : %1 with reason %2","Unexpected state for the Amazon Pay authorization. State: %1, Reason code: %2"
+"--","--"
+"A comma-separated list of case-insensitive terms which will be used to check whether a Customer Address is a locker or packing station.","A comma-separated list of case-insensitive terms which will be used to check whether a Customer Address is a locker or packing station."
+"A shop account for this email address already exists. Please enter your shop accounts password to log in without leaving the shop.","A store account for this email address already exists. Please enter your store account password to log in without leaving the store."
+"Access Key Id","Access Key Id"
+"Action is not available","Action is not available"
+"Advanced","Advanced"
+"Allowed IPs","Allowed IPs"
+"Allowed Javascript Origins","Allowed Javascript Origins"
+"Allowed Return URLs","Allowed Return URLs"
+"Amazon authorize invalid state : %1 with reason %2","Unexpected state for the Amazon Pay authoriziation. State: %1, Reason code: %2"
 "Amazon capture declined : %1","Amazon Pay declined the capture. Reason code: %1"
 "Amazon capture invalid state : %1 with reason %2","Unexpected state for the Amazon Pay capture. State: %1, Reason code: %2"
+"Amazon could not process your request.","Amazon Pay could not process your request. Please try again."
 "Amazon refund invalid state : %1 with reason %2","Unexpected state for the Amazon Pay refund. State: %1, Reason code: %2"
-"the country for your address is not allowed for this store","The country associated with your address is not allowed for this store."
-"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method."
-"There has been a problem with the selected payment method on your Amazon account. Please choose another one.","There has been a problem with the selected payment method on your Amazon account. Please choose another one."
-"The currency selected is not supported by Amazon Pay","The currency selected is not supported by Amazon Pay on this store."
-"Captured amount of %1 online","Captured amount of %1 online."
-"Declined amount of %1 online","Online Capture of amount %1 was declined."
+"Amazon Pay","Amazon Pay"
+"Amazon Pay button in minicart","Amazon Pay button in minicart"
+"Amazon Pay button is visible on Product Page","Amazon Pay button is visible on Product Page"
+"Amazon Pay Logo","Amazon Pay Logo"
+"An unsupported currency is currently selected. Please review our configuration guide.","An unsupported currency is currently selected. Please review our configuration guide."
+"Are you an Amazon customer? Pay now with address and payment details stored in your Amazon account.","Are you an Amazon customer? Pay now with address and payment details stored in your Amazon account."
+"Asynchronous","Asynchronous"
+"Authorization Mode","Authorization Mode"
+"Authorization soft decline","Authorization soft decline"
+"Authorization hard decline","Authorization hard decline"
+"Authorization timed out","Authorization timed out"
+"Back","Back"
+"Button Color","Button Color"
+"Button Display Language","Button Display Language"
+"Button Size","Button Size"
 "Capture declined","Capture declined"
+"Capture pending","Capture pending"
+"Captured amount of %1 online","Captured amount of %1 online."
 "Capture declined for Order <a href=""%2"">#%1</a>","Capture declined for Order <a href=""%2"">#%1</a>"
 "Capture pending approval from the payment gateway","Capture pending approval from the payment gateway. Please check back later."
+"Charge on Order","Charge on Order"
+"Charge on Shipment","Charge on Shipment"
+"click here to display the categories","click here to display the categories"
+"Client Id","Client Id"
+"Client Secret","Client Secret"
+"Comma separated. The ""Login with Amazon"" and ""Amazon Pay"" buttons will <em>only</em> be rendered for clients having the above IPs.
+                            If the field is empty, the buttons will be visible to all clients.","Comma separated. The ""Login with Amazon"" and ""Amazon Pay"" buttons will <em>only</em> be rendered for clients having the above IPs.
+                            If the field is empty, the buttons will be visible to all clients."
+"Continue as Guest","Continue as Guest"
+"Controls button and widget language. The default is your shop's locale. Available options can be found <a href=""https://payments.amazon.co.uk/developer/documentation/lpwa/201953980#ENTER_LANGUAGE_PARAMETER"">here</a>.","Controls button and widget language. The default is your shop's locale. Available options can be found <a href=""https://payments.amazon.co.uk/developer/documentation/lpwa/201953980#ENTER_LANGUAGE_PARAMETER"">here</a>."
 "Could not find the ""multiline_count"" config of the ""street"" Customer address attribute.","Could not find the ""multiline_count"" config of the ""street"" Customer address attribute."
-"Are you an Amazon customer? Pay now with address and payment details stored in your Amazon account.","Are you an Amazon customer? Pay now with address and payment details stored in your Amazon account."
-"Simulate Payment Scenarios","Simulate Payment Scenarios"
-"Amazon could not process your request.","Amazon Pay could not process your request. Please try again."
+"Credentials,Credentials"
+"Credentials JSON","Credentials JSON"
+"Dark Gray","Dark Gray"
+"Data Polling via Cron Job","Data Polling via Cron Job"
+"Declined amount of %1 online","Online Capture of amount %1 was declined."
+"Developer Options","Developer Options"
+"Enable Amazon Pay","Enable Amazon Pay"
+"Enable Login with Amazon","Enable Login with Amazon"
+"Euro Region","Euro Region"
+"Error processing Amazon Login","Error processing Amazon Login"
+"Excluded Categories","Excluded Categories"
+"Extra Large","Extra Large"
+"Forgot Your Password?","Forgot Your Password?"
+"Frontend","Frontend"
+"General","General"
+"Get started with account registration","Get started with account registration"
+"Gold","Gold"
+"In order to enable automatic account configuration using Amazon's secure key exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin.","In order to enable automatic account configuration using Amazon's secure key exchange, please turn on secure admin pages in General > Web > Use secure URLs in Admin."
+"Instant Payment Notifications","Instant Payment Notifications"
+"Is Packing Stations Terms Validation Enabled","Is Packing Stations Terms Validation Enabled"
+"I've already setup Pay with Amazon, I want to edit my settings","I've already setup Amazon Pay, I want to edit my settings"
+"Japan","Japan"
+"Large","Large"
+"Light Gray","Light Gray"
+"Logging","Logging"
+"Login / Pay","Login / Pay"
+"Login with Amazon","Login with Amazon"
+"Login with Amazon / Amazon Pay","Login with Amazon / Amazon Pay"
+"Login with Amazon available in authentication popup","Login with Amazon available in authentication popup"
+"Medium","Medium"
+"Merchant Id","Merchant Id"
+"Module version","Module version"
+"My account is ready, I need to connect it to Magento","My account is ready, I need to connect it to Magento"
+"New Order Status","New Order Status"
+"No Simulation","No Simulation"
+"Ok","Ok"
+"Options","Options"
+"or","or"
+"Packing Stations Terms","Packing Stations Terms"
+"Password","Password"
+"Paste JSON credentials here","Paste JSON credentials here"
+"Payment Action","Payment Action"
+"Payment Region","Payment Region"
 "Please select a payment method.","Please select a payment method."
-"Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
+"Refund declined","Refund declined"
+"* Required Fields","* Required Fields"
 "Return to standard checkout","Return to standard checkout"
+"Sales Exclusions","Sales Exclusions"
+"Sales Options","Sales Options"
+"Sandbox","Sandbox"
+"Save Credentials","Save Credentials"
+"Secret Access Key","Secret Access Key"
+"Securely login into our website using your existing Amazon details.","Securely login to our website using your existing Amazon details."
+"Simulate Payment Scenarios","Simulate Payment Scenarios"
+"Small","Small"
+"Synchronous","Synchronous"
+"Synchronous if Possible","Synchronous if Possible"
+"The ""Amazon Pay"" button will not be available for products of the selected categories.","The ""Amazon Pay"" button will not be available for products of the selected categories."
+"the country for your address is not allowed for this store","The country associated with your address is not allowed for this store."
+"The currency selected is not supported by Amazon Pay","The currency selected is not supported by Amazon Pay on this store."
+"the email address for your Amazon account is invalid","The email address for your Amazon account is invalid."
+"There has been a problem with the selected payment method on your Amazon account. Please choose another one.","There has been a problem with the selected payment method on your Amazon account. Please choose another one."
+"Unfortunately it is not possible to pay with Amazon Pay for this order. Please choose another payment method.","Unfortunately it is not possible to Pay with Amazon Pay for this order. Please choose another payment method."
+"United Kingdom","United Kingdom"
+"United States","United States"
+"Update Mechanism","Update Mechanism"
+"Updating your config with new keys, please wait...","Updating your config with new keys, please wait..."
+"Valid JSON credentials are required.","Valid JSON credentials are required."
+"Welcome back!","Welcome back!"
+"With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop.","With Amazon Pay and Login with Amazon, you can easily sign-in and use the shipping and payment information stored in your Amazon account to place an order on this shop."
+"You will be registering for a %1 account based on the base currency of your shop (%2).","You will be registering for a %1 account based on the base currency of your shop (%2)."
+"Your session has expired, please reload the page and try again.","Your session has expired, please reload the page and try again."
\ No newline at end of file

--- a/src/Payment/view/frontend/templates/minicart-button.phtml
+++ b/src/Payment/view/frontend/templates/minicart-button.phtml
@@ -33,7 +33,7 @@ $tooltipConfig = [
 <div id="minicart-amazon-pay-button" class="amazon-minicart-container">
     <div class="amazon-button-container">
         <div class="amazon-button-container__cell">
-            <div id="PayWithAmazon-<?php echo $block->getParentBlock()->getJsId() ?>" class="login-with-amazon" data-mage-init='<?php /* @noEscape */ echo json_encode($config); ?>'></div>
+            <div id="PayWithAmazon-<?php echo $block->getParentBlock()->getJsId() ?>" class="login-with-amazon login-with-amazon-mini" data-mage-init='<?php /* @noEscape */ echo json_encode($config); ?>'></div>
         </div>
 
         <div class="amazon-button-container__cell">

--- a/src/Payment/view/frontend/templates/payment-link-product-page.phtml
+++ b/src/Payment/view/frontend/templates/payment-link-product-page.phtml
@@ -18,7 +18,7 @@
 <div class="amazon-button-container centered-button">
     <div class="amazon-button-container__cell">
         <a href="javascript:;" class="amazon-addtoCart" id="amazon-addtoCart-<?php echo $block->getJsId() ?>" data-mage-init='{"amazonProductAdd": {}}'></a>
-        <div id="LoginWithAmazon-<?php echo $block->getJsId() ?>" class="login-with-amazon" data-mage-init='{"amazonButton": {"buttonType": "PwA"}}'></div>
+        <div id="LoginWithAmazon-<?php echo $block->getJsId() ?>" class="login-with-amazon login-with-amazon-product" data-mage-init='{"amazonButton": {"buttonType": "PwA"}}'></div>
     </div>
     <div class="amazon-button-container__cell">
         <div class="field-tooltip toggle">

--- a/src/Payment/view/frontend/web/js/amazon-product-add.js
+++ b/src/Payment/view/frontend/web/js/amazon-product-add.js
@@ -43,7 +43,7 @@ define([
                 //only trigger the amazon button click if the user has chosen to add to cart via this method
                 if (addedViaAmazon) {
                     addedViaAmazon = false;
-                    $('.login-with-amazon img').trigger('click');
+                    $('.login-with-amazon-mini img').trigger('click');
                 }
             }, this);
 
@@ -52,6 +52,11 @@ define([
                 if ($(_this.options.addToCartForm).valid()) {
                     addedViaAmazon = true;
                     $(_this.options.addToCartForm).submit();
+                    var intervalId = setInterval(function () {
+                        clearInterval(intervalId);
+                        $('.login-with-amazon-mini img').trigger('click');
+                    }, 1000);
+                    return false;
                 }
             });
         }

--- a/src/Payment/view/frontend/web/js/amazon-widgets-loader.js
+++ b/src/Payment/view/frontend/web/js/amazon-widgets-loader.js
@@ -13,10 +13,14 @@
  * permissions and limitations under the License.
  */
 
-var registry = require('uiRegistry');
-var amazonPayment = registry.get('amazonPayment');
+var registry = require('uiRegistry'),
+    amazonPayment = registry.get('amazonPayment');
 
-define([amazonPayment.widgetUrl], function () {
-    //after amazon widgets file as loaded
-});
+if (amazonPayment !== undefined) {
+    define([amazonPayment.widgetUrl], function () {
+        'use strict';
+
+        //after amazon widgets file as loaded
+    });
+}
 

--- a/src/Payment/view/frontend/web/js/catalog-add-to-cart.js
+++ b/src/Payment/view/frontend/web/js/catalog-add-to-cart.js
@@ -23,8 +23,9 @@ define([
     $.widget('amazon.catalogAddToCart', $.mage.catalogAddToCart, {
 
         _create: function () {
-            //this is overridden here and ignores the redirect option until fixed by Magento (as of 2.1)
-            this._bindSubmit();
+            if (this.options.bindSubmit) {
+                this._bindSubmit();
+            }
         },
 
         _bindSubmit: function () {

--- a/src/Payment/view/frontend/web/js/view/checkout-revert.js
+++ b/src/Payment/view/frontend/web/js/view/checkout-revert.js
@@ -27,7 +27,7 @@ define(
         'use strict';
 
         var self;
-
+        if (registry.get('amazonPayment') !== undefined) {
         return Component.extend({
             defaults: {
                 template: 'Amazon_Payment/checkout-revert'
@@ -56,5 +56,8 @@ define(
                 );
             }
         });
+        } else {
+            return Component.extend({});
+        }
     }
 );

--- a/src/Payment/view/frontend/web/js/view/checkout-sandbox-simulator.js
+++ b/src/Payment/view/frontend/web/js/view/checkout-sandbox-simulator.js
@@ -3,34 +3,39 @@
 define(
     [
         'jquery',
-        "uiComponent",
+        'uiComponent',
         'ko',
         'Amazon_Payment/js/model/storage',
-	'uiRegistry'
+        'uiRegistry'
     ],
     function (
         $,
         Component,
         ko,
         amazonStorage,
-	registry
+        registry
     ) {
         'use strict';
+        if (registry.get('amazonPayment') !== undefined) {
+            return Component.extend({
+                defaults: {
+                    template: 'Amazon_Payment/checkout-sandbox-simulator'
+                },
+                isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
+                isSandboxEnabled: ko.observable(registry.get('amazonPayment').isSandboxEnabled),
+                sandboxSimulationReference: amazonStorage.sandboxSimulationReference,
+                sandboxSimulationOptions: ko.observableArray(registry.get('amazonPayment').sandboxSimulationOptions),
 
-        var self;
-
-        return Component.extend({
-            defaults: {
-                template: 'Amazon_Payment/checkout-sandbox-simulator'
-            },
-            isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
-	    isSandboxEnabled: ko.observable(registry.get('amazonPayment').isSandboxEnabled),
-            sandboxSimulationReference: amazonStorage.sandboxSimulationReference,
-            sandboxSimulationOptions: ko.observableArray(registry.get('amazonPayment').sandboxSimulationOptions),
-            initialize: function () {
-                self = this;
-                this._super();
-            }
-        });
+                /**
+                 * Init
+                 */
+                initialize: function () {
+                    this._super();
+                }
+            });
+        }
+        else {
+            return Component.extend({});
+        }
     }
 );

--- a/src/Payment/view/frontend/web/js/view/checkout-widget-address.js
+++ b/src/Payment/view/frontend/web/js/view/checkout-widget-address.js
@@ -3,7 +3,7 @@
 define(
     [
         'jquery',
-        "uiComponent",
+        'uiComponent',
         'ko',
         'Magento_Customer/js/model/customer',
         'Magento_Checkout/js/model/quote',
@@ -19,7 +19,7 @@ define(
         'Magento_Checkout/js/model/url-builder',
         'Magento_Checkout/js/checkout-data',
         'Magento_Checkout/js/model/checkout-data-resolver',
-	'uiRegistry'
+        'uiRegistry'
     ],
     function (
         $,
@@ -39,105 +39,142 @@ define(
         urlBuilder,
         checkoutData,
         checkoutDataResolver,
-	registry
+        registry
     ) {
         'use strict';
+
         var self;
+        if (registry.get('amazonPayment') !== undefined) {
+            return Component.extend({
+                defaults: {
+                    template: 'Amazon_Payment/checkout-widget-address'
+                },
+                options: {
+                    sellerId: registry.get('amazonPayment').merchantId,
+                    addressWidgetDOMId: 'addressBookWidgetDiv',
+                    widgetScope: registry.get('amazonPayment').loginScope
+                },
+                isCustomerLoggedIn: customer.isLoggedIn,
+                isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
+                isAmazonEnabled: ko.observable(registry.get('amazonPayment').isPwaEnabled),
+                rates: shippingService.getShippingRates(),
+
+                /**
+                 * Init
+                 */
+                initialize: function () {
+                    self = this;
+                    this._super();
+                },
+
+                /**
+                 * Call when component template is rendered
+                 */
+                initAddressWidget: function () {
+                    self.renderAddressWidget();
+                },
+
+                /**
+                 * render Amazon address Widget
+                 */
+                renderAddressWidget: function () {
+                    new OffAmazonPayments.Widgets.AddressBook({ // eslint-disable-line no-undef
+                        sellerId: self.options.sellerId,
+                        scope: self.options.widgetScope,
+
+                        /**
+                         * Order reference creation callback
+                         */
+                        onOrderReferenceCreate: function (orderReference) {
+                            var orderid = orderReference.getAmazonOrderReferenceId();
+
+                            amazonStorage.setOrderReference(orderid);
+                        },
+
+                        /**
+                         * Address select callback
+                         */
+                        onAddressSelect: function () { // orderReference
+                            self.getShippingAddressFromAmazon();
+                        },
+                        design: {
+                            designMode: 'responsive'
+                        },
+
+                        /**
+                         * Error callback
+                         */
+                        onError: function (error) {
+                            console.log(error);
+                        }
+                    }).bind(self.options.addressWidgetDOMId);
+                },
+
+                /**
+                 * Get shipping address from Amazon API
+                 */
+                getShippingAddressFromAmazon: function () {
+                    var serviceUrl, payload;
+
+                    amazonStorage.isShippingMethodsLoading(true);
+                    shippingService.isLoading(true);
+                    serviceUrl = urlBuilder.createUrl('/amazon-shipping-address/:amazonOrderReference', {
+                        amazonOrderReference: amazonStorage.getOrderReference()
+                    }),
+                        payload = {
+                            addressConsentToken: amazonStorage.getAddressConsentToken()
+                        };
+
+                    storage.put(
+                        serviceUrl,
+                        JSON.stringify(payload)
+                    ).done(
+                        function (data) {
+                            var amazonAddress = data.shift(),
+                                addressData = addressConverter.formAddressDataToQuoteAddress(amazonAddress),
+                                i;
 
-        return Component.extend({
-            defaults: {
-                template: 'Amazon_Payment/checkout-widget-address'
-            },
-            options: {
-		sellerId: registry.get('amazonPayment').merchantId,
-                addressWidgetDOMId: 'addressBookWidgetDiv',
-		widgetScope: registry.get('amazonPayment').loginScope
-            },
-            isCustomerLoggedIn: customer.isLoggedIn,
-            isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
-	    isAmazonEnabled: ko.observable(registry.get('amazonPayment').isPwaEnabled),
-            rates: shippingService.getShippingRates(),
-            initialize: function () {
-                self = this;
-                this._super();
-            },
-            /**
-             * Call when component template is rendered
-             */
-            initAddressWidget: function () {
-                self.renderAddressWidget();
-            },
-            /**
-             * render Amazon address Widget
-             */
-            renderAddressWidget: function () {
-                new OffAmazonPayments.Widgets.AddressBook({
-                    sellerId: self.options.sellerId,
-                    scope: self.options.widgetScope,
-                    onOrderReferenceCreate: function (orderReference) {
-                        var orderid = orderReference.getAmazonOrderReferenceId();
-                        amazonStorage.setOrderReference(orderid);
-                    },
-                    onAddressSelect: function (orderReference) {
-                        self.getShippingAddressFromAmazon();
-                    },
-                    design: {
-                        designMode: 'responsive'
-                    },
-                    onError: function (error) {
-                    }
-                }).bind(self.options.addressWidgetDOMId);
-            },
-
-            /**
-             * Get shipping address from Amazon API
-             */
-            getShippingAddressFromAmazon: function () {
-                amazonStorage.isShippingMethodsLoading(true);
-                shippingService.isLoading(true);
-                var serviceUrl = urlBuilder.createUrl('/amazon-shipping-address/:amazonOrderReference', {amazonOrderReference: amazonStorage.getOrderReference()}),
-                    payload = {
-                        addressConsentToken: amazonStorage.getAddressConsentToken()
-                };
-
-                storage.put(
-                    serviceUrl,
-                    JSON.stringify(payload)
-                ).done(
-                    function (data) {
-                        var amazonAddress = data.shift(),
-                            addressData = addressConverter.formAddressDataToQuoteAddress(amazonAddress);
-
-                        //if telephone is blank set it to 00000000 so it passes the required validation
-                        addressData.telephone = !(addressData.telephone) ? '0000000000' : addressData.telephone;
-
-                        //fill in blank street fields
-                        if ($.isArray(addressData.street)) {
-                            for (var i = addressData.street.length; i <= 2; i++) {
-                                addressData.street[i] = '';
+                            //if telephone is blank set it to 00000000 so it passes the required validation
+                            addressData.telephone = !addressData.telephone ? '0000000000' : addressData.telephone;
+
+                            //fill in blank street fields
+                            if ($.isArray(addressData.street)) {
+                                for (i = addressData.street.length; i <= 2; i++) {
+                                    addressData.street[i] = '';
+                                }
                             }
+                            checkoutData.setShippingAddressFromData(
+                                addressConverter.quoteAddressToFormAddressData(addressData)
+                            );
+                            checkoutDataResolver.resolveEstimationAddress();
+                        }
+                    ).fail(
+                        function (response) {
+                            errorProcessor.process(response);
+                            //remove shipping loader and set shipping rates to 0 on a fail
+                            shippingService.setShippingRates([]);
+                            amazonStorage.isShippingMethodsLoading(false);
                         }
-                        checkoutData.setShippingAddressFromData(addressConverter.quoteAddressToFormAddressData(addressData));
-                        checkoutDataResolver.resolveEstimationAddress();
-                    }
-                ).fail(
-                    function (response) {
-                        errorProcessor.process(response);
-                        //remove shipping loader and set shipping rates to 0 on a fail
-                        shippingService.setShippingRates([]);
-                        amazonStorage.isShippingMethodsLoading(false);
-                    }
-                );
-            },
-
-            getAmazonOrderReference: function () {
-                return amazonStorage.getOrderReference();
-            },
-
-            getAddressConsentToken: function () {
-                return amazonStorage.getAddressConsentToken();
-            }
-        });
+                    );
+                },
+
+                /**
+                 * Get Amazon Order Reference ID
+                 */
+                getAmazonOrderReference: function () {
+                    return amazonStorage.getOrderReference();
+                },
+
+                /**
+                 * Get Amazon Address Consent Token
+                 */
+                getAddressConsentToken: function () {
+                    return amazonStorage.getAddressConsentToken();
+                }
+            });
+        } else {
+            return Component.extend({});
+        }
     }
 );
 

--- a/src/Payment/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
+++ b/src/Payment/view/frontend/web/js/view/payment/method-renderer/amazon-payment-widget.js
@@ -17,7 +17,7 @@ define(
         'Magento_Checkout/js/model/payment/additional-validators',
         'Magento_Checkout/js/model/url-builder',
         'amazonPaymentConfig',
-	'uiRegistry'
+        'uiRegistry'
     ],
     function (
         $,
@@ -37,7 +37,7 @@ define(
         additionalValidators,
         urlBuilder,
         amazonPaymentConfig,
-	registry
+        registry
     ) {
         'use strict';
 
@@ -48,11 +48,10 @@ define(
             defaults: {
                 template: 'Amazon_Payment/payment/amazon-payment-widget'
             },
-
             options: {
-		sellerId: registry.get('amazonPayment').merchantId,
+                sellerId: registry.get('amazonPayment').merchantId,
                 paymentWidgetDOMId: 'walletWidgetDiv',
-		widgetScope: registry.get('amazonPayment').loginScope
+                widgetScope: registry.get('amazonPayment').loginScope
             },
             isCustomerLoggedIn: customer.isLoggedIn,
             isAmazonAccountLoggedIn: amazonStorage.isAmazonAccountLoggedIn,
@@ -60,54 +59,93 @@ define(
             shippingAddress: quote.shippingAddress,
             billingAddress: quote.billingAddress,
             isPlaceOrderDisabled: amazonStorage.isPlaceOrderDisabled,
+
+            /**
+             * Inits
+             */
             initialize: function () {
                 self = this;
                 this._super();
             },
+
+            /**
+             * Init payment widget
+             */
             initPaymentWidget: function () {
                 var $amazonPayment = $('#amazon_payment');
+
                 self.renderPaymentWidget();
                 $amazonPayment.trigger('click'); //activate Amazon Pay method on render
                 $amazonPayment.trigger('rendered');
-
             },
+
             /**
              * render Amazon payment Widget
              */
             renderPaymentWidget: function () {
-                new OffAmazonPayments.Widgets.Wallet({
+                new OffAmazonPayments.Widgets.Wallet({ // eslint-disable-line no-undef
                     sellerId: self.options.sellerId,
                     scope: self.options.widgetScope,
                     amazonOrderReferenceId: amazonStorage.getOrderReference(),
-                    onPaymentSelect: function (orderReference) {
+
+                    /**
+                     * Payment select callback
+                     */
+                    onPaymentSelect: function () { // orderReference
                         amazonStorage.isPlaceOrderDisabled(true);
                         self.setBillingAddressFromAmazon();
                     },
                     design: {
                         designMode: 'responsive'
                     },
+
+                    /**
+                     * Error callback
+                     */
                     onError: function (error) {
                         errorProcessor.process(error);
                     }
                 }).bind(self.options.paymentWidgetDOMId);
             },
+
+            /**
+             * Return payment code
+             */
             getCode: function () {
                 return 'amazon_payment';
             },
+
+            /**
+             * Is widget active?
+             */
             isActive: function () {
                 return true;
             },
+
+            /**
+             * Return country name
+             */
             getCountryName: function (countryId) {
-                return (countryData()[countryId] != undefined) ? countryData()[countryId].name : "";
+                return countryData()[countryId] !== undefined ? countryData()[countryId].name : '';
             },
+
+            /**
+             * Check if country name set
+             */
             checkCountryName: function (countryId) {
-                return (countryData()[countryId] != undefined);
+                return countryData()[countryId] !== undefined;
             },
+
+            /**
+             * Save billing address
+             */
             setBillingAddressFromAmazon: function () {
-                var serviceUrl = urlBuilder.createUrl('/amazon-billing-address/:amazonOrderReference', {amazonOrderReference: amazonStorage.getOrderReference()}),
+                var serviceUrl = urlBuilder.createUrl('/amazon-billing-address/:amazonOrderReference', {
+                        amazonOrderReference: amazonStorage.getOrderReference()
+                    }),
                     payload = {
-                        addressConsentToken : amazonStorage.getAddressConsentToken()
-                };
+                        addressConsentToken: amazonStorage.getAddressConsentToken()
+                    };
 
                 fullScreenLoader.startLoader();
 
@@ -116,13 +154,20 @@ define(
                     JSON.stringify(payload)
                 ).done(
                     function (data) {
-                        var amazonAddress = data.shift();
-                        var addressData = addressConverter.formAddressDataToQuoteAddress(amazonAddress);
+                        var amazonAddress = data.shift(),
+                            addressData;
 
-                        addressData.telephone = !(addressData.telephone) ? '0000000000' : addressData.telephone;
+                        addressData = addressConverter.formAddressDataToQuoteAddress(amazonAddress);
+                        addressData.telephone = !addressData.telephone ? '0000000000' : addressData.telephone;
 
                         selectBillingAddress(addressData);
                         amazonStorage.isPlaceOrderDisabled(false);
+                        if(window.checkoutConfig.amazonLogin.amazon_customer_email) {
+                            var customerField = $('#customer-email').val();
+                            if (!customerField) {
+                                $('#customer-email').val(window.checkoutConfig.amazonLogin.amazon_customer_email);
+                            }
+                        }
                     }
                 ).fail(
                     function (response) {
@@ -134,17 +179,26 @@ define(
                     }
                 );
             },
+
+            /**
+             * Return Magento billing object
+             */
             getData: function () {
                 return {
-                    "method": this.item.method,
-                    "additional_data": {
-                        "sandbox_simulation_reference": amazonStorage.sandboxSimulationReference()
+                    'method': this.item.method,
+                    'additional_data': {
+                        'sandbox_simulation_reference': amazonStorage.sandboxSimulationReference()
                     }
-                }
+                };
             },
+
+            /**
+             * Save order
+             */
             placeOrder: function (data, event) {
-                var self = this,
-                    placeOrder;
+                var placeOrder;
+
+                self = this;
 
                 if (event) {
                     event.preventDefault();
@@ -157,8 +211,10 @@ define(
                     $.when(placeOrder).fail(function () {
                         self.isPlaceOrderActionAllowed(true);
                     }).done(this.afterPlaceOrder.bind(this));
+
                     return true;
                 }
+
                 return false;
             }
         });

